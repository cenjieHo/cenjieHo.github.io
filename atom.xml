<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>水木今山的博客</title>
  
  <subtitle>Coding the World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-02T02:48:45.911Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>水木今山</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《MapReduce》论文笔记</title>
    <link href="http://yoursite.com/2020/02/01/%E3%80%8AMapReduce%E3%80%8B%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/01/《MapReduce》论文笔记/</id>
    <published>2020-02-01T13:36:00.000Z</published>
    <updated>2020-02-02T02:48:45.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MapReduce是一个处理和生成超大数据集的编程模型和相关实现。基于MapReduce，用户只需通过Map和Reduce函数描述自己的计算问题，而不用关心计算在哪个机器上进行、相互之间如何通信、机器故障如何处理等复杂的问题。</p><h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p><img src="http://blog.default.nanwulife.com/截屏2020-02-01下午7.21.23.png" alt></p><p>当用户调用MapReduce时，将发生下面的一系列动作：</p><ol><li>MapReduce库首先将输入文件分成M个数据片段，然后用户程序在一组机器集群上创建大量的程序副本。</li><li>程序副本中有一个Master程序和多个Worker程序，Master程序负责分配任务（M个Map任务和R个Reduce任务）。</li><li>被分配了Map任务的Worker程序读取相应的输入数据片段，从数据片段中解析出kv对，然后把kv对传给Map函数，Map函数产生中间kv对并缓存在内存中。</li><li>Map Reducer缓存中的kv对通过分区函数分成R个区域并定期写入本地磁盘。这些kv对在本地磁盘上的存储位置将被回传给Master，由Master负责把这些存储位置再传送给Reduce Worker。</li><li>Reduce Worker接受到Master发来的存储位置后，使用RPC从Map Worker所在主机的磁盘上读取这些数据。当Reducer Worker程序读取了所有中间数据后，通过对key进行排序使得具有相同key值的数据聚合在一起。</li><li>Reduce Worker程序遍历排序后的中间数据，对于每一个唯一的中间key值，Reduce Worker程序将这个key值和它相关的中间value值集合传递给用户自定义的Reduce函数。Reduce函数的输出被追加到所属分区的输出文件。</li><li>当所有的Map和Reduce任务都完成之后，Master唤醒用户程序。此时，用户程序里对MapReduce调用才返回。</li></ol><p>成功完成任务后，MapReduce的输出存放在R个输出文件中，而这些文件往往又被作为另外一个MapReduce的输入。</p><p>《设计数据密集型应用》书中对该过程的描述图也很形象：<br><img src="http://blog.default.nanwulife.com/截屏2020-02-01下午8.44.39.png" alt></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>倒排索引的应用：<br><img src="http://blog.default.nanwulife.com/截屏2020-02-02上午10.47.38.png" alt="倒排索引"></p><p>在这个例子中，数据片段个数M和Map Worker数目相同，分区数R也和Reduce Worker数目相同，但在实际应用中，M和R往往比Worker数目要多。</p><h2 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h2><p>和大多数Unix工具一样，运行MapReduce作业通常不会修改输入，除了生成输出外没有任何副作用。当遇到崩溃和网络问题时，任务可以安全地重试，任何失败任务的输出都被丢弃。因此，容错的设计是十分方便的，MapReduce可以保证作业的最终输出与没有发生错误的情况相同，尽管这其中不得不重试各种任务。</p><p>每个工作中的任务把它的输出写到私有的临时文件中，每个Reduce任务生成一个这样的文件，而每个Map任务则生成R个这样的文件：</p><ul><li>当一个Map任务完成时，Map Worker发送一个包含R个临时文件名的完成消息给Master。如果Master从一个已经完成的Map任务再次接收到一个完成消息，Master将忽略这个消息，否则Master将这R个文件的名字记录在数据结构里。</li><li>当一个Reduce任务完成时，Reduce Worker以原子的方式把临时文件重命名为最终的输出文件。如果同一个Reduce任务在多台机器上执行，针对同一个最终的输出文件将有多个重命名操作执行，MapReduce依赖底层文件系统提供的重命名操作的原子性来保证最终的文件系统状态仅仅包含一个Reduce任务产生的数据。</li></ul><h2 id="本地化调度策略"><a href="#本地化调度策略" class="headerlink" title="本地化调度策略"></a>本地化调度策略</h2><p>网络带宽是一个相当匮乏的资源，所以将Worker调度到相应的输入数据所在的机器，从本地机器读取输入数据，从而减少网络带宽的消耗。这也是为什么我们所设的M值最好使得每个独立任务都处理不超过64M的输入数据，因为在GFS中每一个Chunk的大小就是64M，如果输入数据大于64M，就可能得从别的远程机器上读取其它Chunk中的数据，也就加大了网络开销。</p><h2 id="备用任务"><a href="#备用任务" class="headerlink" title="备用任务"></a>备用任务</h2><p>当一个MapReduce操作接近完成的时候，Master调度备用任务进程来执行剩下的、处理中的任务。无论是最初的执行进程还是备用任务进程完成来任务，我们都把这个任务标记为已完成。并且在上面容错机制已经提到，有两个Worker执行同一个任务是没有任何问题的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/mapreduce-osdi04.pdf" target="_blank" rel="noopener">MapReduce: Simplified Data Processing on Large Clusters</a></li><li><a href="https://www.cnblogs.com/xybaby/p/8878054.html" target="_blank" rel="noopener">典型分布式系统分析：MapReduce</a></li><li><a href="https://www.bilibili.com/video/av43772900?from=search&amp;seid=9045060489116633572" target="_blank" rel="noopener">深入浅出讲解 MapReduce</a></li><li>Martin Kleppmann. 数据密集型应用系统设计. 中国电力出版社, 2018.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;MapReduce是一个处理和生成超大数据集的编程模型和相关实现。基于MapReduce，用户只需通过Map和Reduce函数描述自己的计算
      
    
    </summary>
    
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《The Google File System》论文笔记</title>
    <link href="http://yoursite.com/2020/01/31/%E3%80%8AGoogle-File-System%E3%80%8B%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/01/31/《Google-File-System》论文笔记/</id>
    <published>2020-01-31T09:57:00.000Z</published>
    <updated>2020-01-31T09:58:38.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Google File System（简称GFS）是一个面向大规模数据密集型应用的、可伸缩的分布式文件系统，其运行在廉价的普通硬件设备上，并且是基于Linux文件系统之上的。GFS主要是针对以下场景而设计的：</p><ul><li>组件经常失效。</li><li>存储大文件（数GB的文件非常普遍）。</li><li>写操作主要是顺序的追加写，而不是覆盖写。</li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>GFS系统包含三部分：客户端、单独的Master节点、多台Chunk服务器。所有这些机器通常都是普通的Linux机器，运行着用户级别的服务进程。</p><p><img src="http://blog.default.nanwulife.com/截屏2020-01-30下午4.39.01.png" alt="架构"></p><h3 id="Chunk"><a href="#Chunk" class="headerlink" title="Chunk"></a>Chunk</h3><p>GFS存储的文件被划分为固定大小的Chunk。每个Chunk在创建时会被分配一个Chunk句柄，即一个不变的、全局唯一的64位的ID。Chunk服务器把Chunk以Linux文件的形式保存在本地硬盘上，按照Chunk句柄和字节范围来读写Chunk数据。为了可靠性，每个Chunk被复制到多个Chunk服务器上，默认是3份（由复制因子指定）。</p><p>Chunk的大小为64M。选择这么大的Chunk尺寸有以下几个优点：</p><ul><li>减少了客户端和Master节点通讯的需求。</li><li>客户端能够对一个块进行多次操作，从而与Chunk服务器保持较长时间的TCP连接来减少网络负载。</li><li>减少了Master节点需要保存的元数据的数量。</li></ul><p>但大的Chunk尺寸也是有其缺陷的，即小文件包含较少的Chunk甚至只有一个Chunk，当有许多的客户端对同一个小文件进行多次访问时，存储这些Chunk的Chunk服务器就会变成热点。这个问题可以通过增大复制因子来解决。</p><p>这里还有一个值得思考的地方，即GFS对数据的冗余是以Chunk为基本单位而不是机器（或者说文件）。以机器为单位进行冗余的优点是简单方便，但是伸缩性不好，不能充分利用资源；而以Chunk为基本单位，虽然Master节点上需要存更多的元数据，但一个Chunk的信息也就64字节左右，而Chunk本身的粒度又有64M这么大，加之在Master中Chunk的位置信息是不持久化的，所以这并不会给Master带来太多的负担。</p><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p>Master主要存储三种类型的元数据：文件和Chunk的命名空间（GFS按层级目录管理文件）、文件到Chunk的映射关系<br>、Chunk的位置。所有的元数据均被保存在Master的内存中，前两种也会持久化保存，即通过记录操作日志，存储在Master的本地磁盘并且复制到远程机器。使用操作日志允许我们更简单可靠的更新Master状态，不会因为Master的宕机导致数据不一致。但是，Master不会持久化存储Chunk的位置，相反，Master会在启动时询问每个Chunk服务器以获取它们各自的Chunk信息，新Chunk服务器加入集群时也是如此。</p><p>操作日志对于GFS至关重要，它是元数据唯一的持久化存储记录。只有在把日志复制到多台远程机器，并且只有把相应的日志记录写入到本地以及远程机器的硬盘后才能响应客户端。Master节点在灾难恢复时通过重演操作日志把文件系统恢复到最近的状态，为了缩短Master启动的时间，我们必须使日志足够小，所以Master服务器在日志增长到一定量时对系统状态执行快照，而不需要从零开始回放日志，仅需要从本地磁盘装载最近的快照，并回放快照之后发生的有限数量的日志。</p><p>当然，在Master节点上持久化Chunk位置信息也不是不行，但由于只有Chunk服务器才能最终确定一个Chunk是否在它的硬盘上，所以定期轮询的方式更为简便和可靠，否则需要考虑Chunk服务器和Master服务器的数据同步问题，其实没这个必要在Master节点上大费周章的维护一个一致性视图。</p><p>Master也负责管理一些影响整个系统的活动，比如Chunk租赁管理、孤儿Chunk的垃圾回收，以及Chunk服务器之间的Chunk迁移。Master与Chunk服务器保持常规的心跳，以确定Chunk服务器的状态。</p><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>GFS客户端代码以库的形式被链接到客户程序里。客户端只在获取元数据时与Master交互（客户端会缓存元数据），真实的数据操作会直接发至Chunk服务器。客户端和Chunk服务器都不会缓存文件数据。</p><h2 id="读取流程"><a href="#读取流程" class="headerlink" title="读取流程"></a>读取流程</h2><p><img src="http://blog.default.nanwulife.com/截屏2020-01-30下午4.39.01.png" alt="读取"></p><ol><li>应用程序调用GFS客户端提供的接口，指明文件名和字节偏移。</li><li>GFS客户端根据固定的Chunk大小将字节偏移转换成Chunk索引，然后将文件名和Chunk索引发送给Master节点。</li><li>Master节点将相应的Chunk ID和Chunk的位置信息响应给客户端（客户端此时用文件名和Chunk索引作为key缓存这些信息）。</li><li>GFS客户端向最近的持有副本的Chunk服务器发出读请求，请求中包含Chunk id与字节范围。</li></ol><p>在对这个Chunk的后续读取操作中，客户端不必再和Master节点通讯了，除非缓存的元数据信息过期或者文件被重新打开。</p><h2 id="写入流程"><a href="#写入流程" class="headerlink" title="写入流程"></a>写入流程</h2><p>GFS引入了租约（lease）机制。Master节点为Chunk的其中一个副本建立一个租约，这个副本就是Primary，Primary对Chunk的所有更改操作进行序列化，所有的副本都遵从这个序列进行修改操作。</p><p><img src="http://blog.default.nanwulife.com/截屏2020-01-31上午11.11.44.png" alt="写入"></p><ol><li>客户端向Master节点询问哪个Chunk服务器是Primary以及其它副本（Secondary）的位置，客户端在本地缓存这些信息。</li><li>客户端将数据链式推送到所有副本上。</li><li>客户端通知Primary提交。</li><li>Primary提交成功后，通知所有Secondary提交。</li><li>Secondary成功后响应Primary，Primary响应客户端。</li></ol><p>论文中说“设计租约机制的目的是为了最小化Master节点的管理负担”，刚开始未能理解其中的原因。实际上，由于租约的存在，客户端就不必每次进行写入时都询问Master由哪个Chunk服务器负责全局顺序，只要在租约的有效期内，客户端就可以一直联系该Chunk服务器，从而减轻了Master的负担。</p><p>为了提高网络效率，GFS还将数据流和控制流分开，并且数据在Chunk服务器间链式推送（每台机器都尽量选择最近的），从而充分利用每台机器的带宽，避免网络瓶颈和高延时的连接，最小化推送所有数据的延时。不同于主从模式对Primary的压力，这种链式模式下每台机器所有的出口带宽都用于以最快的速度传输数据。除此之外，GFS还使用TCP流式传输数据，即一旦Chunk服务器收到数据就立刻开始推送，而不用等收到完整的数据再发往下一个副本。</p><h2 id="一致性模型"><a href="#一致性模型" class="headerlink" title="一致性模型"></a>一致性模型</h2><p><img src="http://blog.default.nanwulife.com/截屏2020-01-31上午9.34.26.png" alt="一致性模型"></p><ul><li>一致的：对于文件区域A，如果所有客户端从任何副本上读到的数据都是相同的，那A就是一致的。</li><li>已定义的：如果A是一致的，并且客户端可以看到写入的完整数据，那A就是defined，即结果是可预期的。已定义一定是一致的。</li></ul><p>GFS所谓的宽松的一致性可能有点晦涩。<br>写操作（修改操作）包含覆盖写和追加写两种模式。覆盖写由用户指定offset，所以在并发写入时，可能各个用户写入的数据相互混合，我们就无从得知这一堆混合的数据里都是哪些操作分别写入了哪部分数据，但是由于操作在所有的副本上都以相同的顺序执行，读的时候确实是相同的结果，所以就是所谓的“一致但是未定义”。而对于追加写来说，offset是由GFS选择的，GFS保证操作“至少会成功一次”，这种重试机制导致了“已定义但部分不一致“的情况。举个例子，假设追加写操作在两个副本上都成功了，而在最后一个副本上失败了（这个时候仅仅是不一致），那么此时会尝试重试，并且那两个副本上的重复数据不会删除，当重试成功后，因为客户端能看到写入的完整数据，所以是“已定义的”，但由于中间夹杂着不一致的数据，所以是“部分不一致”的，但是对于这种部分不一致，可以通过Checksum或唯一标识符来解决。</p><h2 id="命名空间管理和锁"><a href="#命名空间管理和锁" class="headerlink" title="命名空间管理和锁"></a>命名空间管理和锁</h2><p>GFS的命名空间就是一个全路径和元数据映射关系的查找表，利用前缀压缩高效的存储在内存中。在存储命名空间的树形结构上，每个节点（绝对路径的文件名或绝对路径的目录名）都有一个关联的读写锁。通常情况下，如果一个操作涉及<code>/d1/d2/dn/leaf</code>，那么操作首先要获得目录<code>/d1</code>、<code>/d1/d2</code>、<code>/d1/d2/dn</code>的读锁和<code>/d1/d2/dn/leaf</code>的读写锁。一个操作必须按特定的顺序来申请锁以预防死锁：首先按命名空间树的层级排序，在相同层级再按字典序。</p><p>采用这种锁方案的优点是支持对同一目录的并行操作，目录名的读锁足以防止目录被删除、改名以及被快照，而文件名的写锁序列化了文件创建操作，确保不会多次创建同名的文件。</p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>GFS在删除文件时是惰性的，也就是说不会立刻回收可用的物理空间，而是像其它修改操作一样先以日志的方式记录，然后将文件名改为一个包含删除时间戳的隐藏文件。Master会定期对命名空间进行扫描，把隐藏了超过一定时间的文件删除（这个时间是可设置的），在此期间可以对这个文件进行恢复（重命名即可）。当隐藏文件从命名空间删除时，Master内存中这个文件的相关元数据才会被删除。Chunk服务器在和Master节点交互的心跳信息中，报告它拥有的Chunk子集的信息，Master节点回复Chunk服务器哪些Chunk在Master节点保存的元数据中已经不存在了，Chunk服务器可以任意删除这些Chunk的副本。</p><p>垃圾回收相比直接删除有几个优势：</p><ul><li>删除消息可能丢失，而垃圾回收方式简单可靠。</li><li>回收操作被合并到Master节点规律性的后台活动中，开销被分摊。</li><li>防止文件被意外删除。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/gfs-sosp2003.pdf" target="_blank" rel="noopener">The Google File System</a></li><li><a href="https://www.cnblogs.com/xybaby/p/8967424.html" target="_blank" rel="noopener">典型分布式系统分析: GFS</a></li><li><a href="https://kb.cnblogs.com/page/174130/" target="_blank" rel="noopener">经典论文翻译导读之《Google File System》</a></li><li><a href="https://juejin.im/post/5d9dc4d2e51d4578453274cd#fn1" target="_blank" rel="noopener">The Google File System 论文笔记</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Google File System（简称GFS）是一个面向大规模数据密集型应用的、可伸缩的分布式文件系统，其运行在廉价的普通硬件设备上，并
      
    
    </summary>
    
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>分布式一致性协议：2PC与3PC</title>
    <link href="http://yoursite.com/2019/10/27/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%EF%BC%9A2PC%E4%B8%8E3PC/"/>
    <id>http://yoursite.com/2019/10/27/分布式一致性协议：2PC与3PC/</id>
    <published>2019-10-27T12:29:00.000Z</published>
    <updated>2019-10-27T14:02:58.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="协调者"><a href="#协调者" class="headerlink" title="协调者"></a>协调者</h2><p>在分布式系统中，每一个机器节点虽然都能明确的知道自己执行的事务是成功还是失败，但是却无法知道其他分布式节点的事务执行情况。因此，当一个事务要跨越多个分布式节点的时候（比如，淘宝下单流程，下单系统和库存系统可能就是分别部署在不同的分布式节点中），为了保证该事务可以满足ACID，就要引入一个协调者（Cooradinator）。其他的节点被称为参与者（Participant）。协调者负责调度参与者的行为，并最终决定这些参与者是否要把事务进行提交。</p><h2 id="二阶段提交协议（2PC）"><a href="#二阶段提交协议（2PC）" class="headerlink" title="二阶段提交协议（2PC）"></a>二阶段提交协议（2PC）</h2><p>二阶段提交协议主要分为两个阶段：准备阶段和提交阶段。</p><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><p>事务协调者（事务管理器）给每个参与者发送事务内容，每个参与者要么直接返回失败（如权限验证失败），要么在本地执行事务，写本地的redo和undo日志，但不提交，到达一种“万事俱备，只欠东风”的状态。由于这一阶段近似各参与者投票表明是否可以执行接下来的事务提交操作，所以也被称为“投票阶段”。</p><h3 id="提交阶段"><a href="#提交阶段" class="headerlink" title="提交阶段"></a>提交阶段</h3><p>如果协调者收到了参与者的失败消息或者超时，直接给每个参与者发送回滚（Rollback）消息；否则，发送提交（Commit）消息；参与者根据协调者的指令执行提交或者回滚操作，释放所有事务处理过程中使用的锁资源。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：原理简单、实现方便。<br>缺点：</p><ul><li>同步阻塞：各个参与者在等待其他参与者响应的过程中，将无法进行其他任何操作。</li><li>单点问题：协调者至关重要。尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于锁定事务资源的状态中，而无法继续完成事务操作。</li><li>数据不一致：由于参与者可能宕机，此时只有部分参与者收到了commit请求。</li></ul><h2 id="三阶段提交协议（3PC）"><a href="#三阶段提交协议（3PC）" class="headerlink" title="三阶段提交协议（3PC）"></a>三阶段提交协议（3PC）</h2><p>3PC在协调者和参与者中都引入了超时机制，并将2PC的准备阶段（投票阶段）一分为二，这样三阶段提交就有CanCommit、PreCommit、DoCommit三个阶段。</p><h3 id="CanCommit阶段"><a href="#CanCommit阶段" class="headerlink" title="CanCommit阶段"></a>CanCommit阶段</h3><p>协调者向所有的参与者发送一个包含事务内容的CanCommit请求，参与者在收到该请求后，如果认为自己可以顺利执行事务，就反馈Yes响应，并进入预备状态，否则反馈No响应。</p><h3 id="PreCommit阶段"><a href="#PreCommit阶段" class="headerlink" title="PreCommit阶段"></a>PreCommit阶段</h3><p>协调者根据参与者的反馈情况来决定是否可以继续事务的PreCommit操作。根据响应情况，有以下两种可能。</p><ul><li>假如协调者从所有的参与者获得的反馈都是Yes响应，那么就会执行事务的预执行。即执行事务操作，并将undo和redo信息记录到事务日志中。如果参与者成功的执行了事务操作，则返回Ack响应，同时开始等待最终指令。</li><li>假如有任何一个参与者向协调者发送了No响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。</li></ul><h3 id="DoCommit阶段"><a href="#DoCommit阶段" class="headerlink" title="DoCommit阶段"></a>DoCommit阶段</h3><p>该阶段进行真正的事务提交，也可以分为以下两种情况。</p><ul><li>执行提交：协调者接收到参与者发送的ACK响应，那么他将从预提交状态进入到提交状态，并向所有参与者发送doCommit请求。参与者接收到doCommit请求之后，执行正式的事务提交，并在完成事务提交之后释放所有事务资源，并向协调者发送Ack响应。协调者接收到所有参与者的ack响应之后，完成事务。</li><li>中断事务：协调者没有接收到参与者发送的Ack响应（可能是接受者发送的不是Ack响应，也可能响应超时），那么就会执行中断事务，即回滚操作。</li></ul><blockquote><p>在doCommit阶段，如果参与者无法及时接收到来自协调者的doCommit或者rebort请求时，会在等待超时之后，会继续进行事务的提交。（其实这个应该是基于概率来决定的，当进入第三阶段时，说明参与者在第二阶段已经收到了PreCommit请求，那么协调者产生PreCommit请求的前提条件是他在第二阶段开始之前，收到所有参与者的CanCommit响应都是Yes。（一旦参与者收到了PreCommit，意味他知道大家其实都同意修改了）所以，一句话概括就是，当进入第三阶段时，由于网络超时等原因，虽然参与者没有收到commit或者abort响应，但是他有理由相信：成功提交的几率很大。 ）</p></blockquote><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：降低了参与者的阻塞范围，比如在执行事务之前先询问是否可以顺利执行，避免一些本来就无法执行的参与者导致其他正常的参与者无意义的回滚。并且由于一旦参与者无法及时收到来自协调者的信息之后，他会默认执行commit，因此也就解决了单点故障问题。<br>缺点：超时机制虽然解决了单点问题，但也引入了数据不一致的问题，比如协调者发送的abort响应没有及时被参与者接收到，那么参与者在等待超时之后执行了commit操作，这样就和其他接到abort命令并执行回滚的参与者之间存在数据不一致的情况。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>从 Paxos 到 ZooKeeper 分布式一致性原理与实践.倪超.电子工业出版社</li><li><a href="https://www.hollischuang.com/archives/681" target="_blank" rel="noopener">关于分布式事务、两阶段提交协议、三阶提交协议</a></li><li><a href="https://www.hollischuang.com/archives/1580" target="_blank" rel="noopener">深入理解分布式系统的2PC和3PC</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;协调者&quot;&gt;&lt;a href=&quot;#协调者&quot; class=&quot;headerlink&quot; title=&quot;协调者&quot;&gt;&lt;/a&gt;协调者&lt;/h2&gt;&lt;p&gt;在分布式系统中，每一个机器节点虽然都能明确的知道自己执行的事务是成功还是失败，但是却无法知道其他分布式节点的事务执行情况。因此，当一
      
    
    </summary>
    
      <category term="分布式系统" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="分布式系统" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="一致性协议" scheme="http://yoursite.com/tags/%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>CAP与BASE理论</title>
    <link href="http://yoursite.com/2019/10/27/CAP%E4%B8%8EBASE%E7%90%86%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/10/27/CAP与BASE理论/</id>
    <published>2019-10-27T12:06:00.000Z</published>
    <updated>2019-10-28T01:34:27.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><p>一个分布式系统不可能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三个基本需求，最多只能满足其中的两项.</p><p>一般情况下，分区容错性是一个最基本的要求，其次才在可用性和一致性之间作出取舍。</p><blockquote><p>一致性模型：</p><ul><li>弱一致性<ul><li>最终一致性：DNS、Gossip协议</li></ul></li><li>强一致性<ul><li>同步</li><li>Paxos</li><li>Raft</li><li>ZAB</li></ul></li></ul></blockquote><h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><p>BASE是Basically Available（基本可用）、Soft state（软状态）、Eventually Consistent（最终一致性）三个短语的简称，是对CAP中一致性和可用性权衡的结果，核心思想是即使无法做到强一致性，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。</p><blockquote><p>基本可用：分布式系统在出现不可预知故障时，允许损失部分可用性。<br>弱状态：即软状态，允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性。<br>最终一致性：系统保证数据最终能够达到一致，而不需要实时保证系统数据的强一致性。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>从 Paxos 到 ZooKeeper 分布式一致性原理与实践.倪超.电子工业出版社</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CAP定理&quot;&gt;&lt;a href=&quot;#CAP定理&quot; class=&quot;headerlink&quot; title=&quot;CAP定理&quot;&gt;&lt;/a&gt;CAP定理&lt;/h2&gt;&lt;p&gt;一个分布式系统不可能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Par
      
    
    </summary>
    
      <category term="分布式系统" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="分布式系统" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="CAP" scheme="http://yoursite.com/tags/CAP/"/>
    
      <category term="BASE" scheme="http://yoursite.com/tags/BASE/"/>
    
  </entry>
  
  <entry>
    <title>僵尸进程与孤儿进程</title>
    <link href="http://yoursite.com/2019/07/20/%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/07/20/僵尸进程与孤儿进程/</id>
    <published>2019-07-20T11:24:00.000Z</published>
    <updated>2019-07-20T12:02:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h2><p>一个父进程利用<code>fork</code>创建子进程，如果子进程结束了，但是父进程没有等待（调用<code>wait</code> / <code>waitpid</code>）它，那么该子进程将变成一个僵尸进程。</p><p>僵尸进程对操作系统是有害的：在每个进程退出的时候，内核释放该进程所有的资源，包括打开的文件、占用的内存等，但是仍然为其保留一定的信息（包括进程号、退出状态、运行时间等），如果父进程一直不调用<code>wait</code> / <code>waitpid</code>，那么保留的这些信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果产生大量的僵尸进程，将因为没有可用的进程号而导致系统不能产生新的进程。</p><h2 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h2><p>一个父进程退出，而它的一个或多个子进程仍然在运行，那么这些子进程就会变成孤儿进程。孤儿进程将被init进程（进程号为1）所收养，init进程将在这些孤儿进程结束时第一时间回收它们的信息，保证它们不会成为僵尸进程。</p><h2 id="僵尸进程的避免"><a href="#僵尸进程的避免" class="headerlink" title="僵尸进程的避免"></a>僵尸进程的避免</h2><ul><li>父进程通过<code>wait</code> / <code>waitpid</code>等待子进程，子进程工作完父进程再执行工作。</li><li>父进程<code>fork</code>一个子进程，然后继续工作，子进程<code>fork</code>一个孙进程后退出，那么孙进程将变为孤儿进程从而被<code>init</code>接管，并且由孙进程接受本应子进程接受的任务。当孙进程结束后，<code>init</code>会回收它的信息，不过子进程的回收还是需要自己做。</li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>僵尸状态是每个子进程必经的状态，而之所以在进程结束后要进入僵尸状态是因为父进程可能要取得子进程的退出状态等信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;僵尸进程&quot;&gt;&lt;a href=&quot;#僵尸进程&quot; class=&quot;headerlink&quot; title=&quot;僵尸进程&quot;&gt;&lt;/a&gt;僵尸进程&lt;/h2&gt;&lt;p&gt;一个父进程利用&lt;code&gt;fork&lt;/code&gt;创建子进程，如果子进程结束了，但是父进程没有等待（调用&lt;code&gt;wait&lt;
      
    
    </summary>
    
      <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>关于Java和Python的一些思考</title>
    <link href="http://yoursite.com/2019/05/30/%E5%85%B3%E4%BA%8EJava%E5%92%8CPython%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2019/05/30/关于Java和Python的一些思考/</id>
    <published>2019-05-30T11:37:00.000Z</published>
    <updated>2019-05-30T12:29:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近实习在做的一些项目都是用Python来写的，虽然在之前就有学习过Python的语法，但真正用到的机会很少，而这次通过项目刚好让我对Python有了更进一步的认识，并且在此总结一下Python与之前用的比较多的Java的一些区别。</p><h2 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h2><p>Python与Java很大的一个区别在于Java必须在第一次声明变量时指定其类型，也就是所谓的静态类型，而Python则不一样，Python可以动态改变变量的类型。虽然Python的这个特性显得十分灵活，并且某些场景下可能开发效率更高一些，但稍不注意的话就有可能出错，在写代码时要更加注意。</p><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p>Python不像很多语言使用花括号定义函数或类，而是使用的缩进将代码分割成块，使得代码可读性更高一些。</p><h2 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h2><p>因为在项目中有许多要异步执行的任务，如果不了解Python的话，可能就会想到用多线程来解决问题，但实际上，Python中并不存在真正意义上的多线程，原因就是GIL的存在。GIL即全局解释器锁，Python的每个线程运行时首先要获得该锁，这也就意味着任何时刻仅有一个线程在执行，无法利用到多核的优势，使得多线程的效率甚至还不如单线程。但这也并非绝对的，在I/O操作或别的一些情况下，线程会主动释放GIL，这样别的线程就可以继续工作了，而如果是想完成一些CPU密集的任务的话，就只能通过进程或协程来解决了。</p><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>不像Java使用的可达性分析算法，Python中的垃圾收集是使用的引用计数法，这也就意味着会有循环引用的问题。比如说，在以下这个代码中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c1=ClassA()</span><br><span class="line">        c2=ClassA()</span><br><span class="line">        c1.t=c2</span><br><span class="line">        c2.t=c1</span><br><span class="line">        <span class="keyword">del</span> c1</span><br><span class="line">        <span class="keyword">del</span> c2</span><br></pre></td></tr></table></figure></p><p>在执行完上面的代码后，两个对象的引用计数都为1而非0，虽然它们都应该要被回收销毁的，但由于存在循环引用，所以不会被回收掉，也就导致了内存泄露。要解决这个问题，可以使用gc模块。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近实习在做的一些项目都是用Python来写的，虽然在之前就有学习过Python的语法，但真正用到的机会很少，而这次通过项目刚好让我对Pyt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常见查找算法之跳跃表</title>
    <link href="http://yoursite.com/2019/05/28/%E5%B8%B8%E8%A7%81%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%B3%E8%B7%83%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/05/28/常见查找算法之跳跃表/</id>
    <published>2019-05-28T12:06:00.000Z</published>
    <updated>2019-05-28T23:57:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>跳跃表（skiplist）是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。</p><p>跳跃表支持平均O(logN)和最坏O(N)复杂度的节点查找，还可以通过顺序性操作来批量处理节点。在大部分情况下，跳跃表的效率可以和平衡树相媲美，并且因为跳跃表的实现比平衡树要来得更为简单，所以有不少程序都使用跳跃表来代替平衡树。</p><h2 id="跳跃表的实现"><a href="#跳跃表的实现" class="headerlink" title="跳跃表的实现"></a>跳跃表的实现</h2><p>Redis的跳跃表由<code>zskiplistNode</code>和<code>zskiplist</code>两个结构定义，其中<code>zskiplistNode</code>结构用于表示跳跃表节点，而<code>zskiplist</code>结构则用于保存跳跃表节点的相关信息，比如节点的数量，以及指向表头节点和表尾节点的指针等等。</p><p><img src="http://blog.default.nanwulife.com/graphviz-8fc5de396a5b52c3d0b1991a1e09558ad055dd86.png" alt></p><p>图5-1展示了一个跳跃表示例，位于图片最左边的是<code>zskiplist</code>结构，该结构包含以下属性：</p><ul><li><code>header</code>：指向跳跃表的表头节点。</li><li><code>tail</code>：指向跳跃表的表尾节点。</li><li><code>level</code>：记录目前跳跃表内，层数最大的那个节点的层数（表头节点的层数不计算在内）。</li><li><code>length</code>：记录跳跃表的长度，也即是，跳跃表目前包含节点的数量（表头节点不计算在内）。</li></ul><p>位于<code>zskiplist</code>结构右方的是四个<code>zskiplistNode</code>结构，该结构包含以下属性：</p><ul><li>层（level）：节点中用 L1 、 L2 、 L3 等字样标记节点的各个层，L1 代表第一层， L2 代表第二层，以此类推。每个层都带有两个属性：前进指针和跨度。前进指针用于访问位于表尾方向的其他节点，而跨度则记录了前进指针所指向节点和当前节点的距离。每次创建一个新跳跃表节点的时候， 程序都根据幂次定律（power law，越大的数出现的概率越小）随机生成一个介于1和32之间的值作为层的高度。跨度是用来计算排位（rank）的，在查找某个节点的过程中，将沿途访问过的所有层的跨度累计起来，得到的结果就是目标节点在跳跃表中的排位。</li><li>后退（backward）指针：节点中用 BW 字样标记节点的后退指针，它指向位于当前节点的前一个节点。后退指针在程序从表尾向表头遍历时使用。跟可以一次跳过多个节点的前进指针不同，因为每个节点只有一个后退指针，所以每次只能后退至前一个节点。</li><li>分值（score）：各个节点中的 1.0 、 2.0 和 3.0 是节点所保存的分值。在跳跃表中，节点按各自所保存的分值从小到大排列。</li><li>成员对象（obj）：各个节点中的 o1、o2 和 o3 是节点所保存的成员对象。分值相同的节点将按照成员对象在字典序中的大小来进行排序，成员对象较小的节点会排在前面，而成员对象较大的节点则会排在后面。</li></ul><p>注意表头节点和其他节点的构造是一样的：表头节点也有后退指针、分值和成员对象，不过表头节点的这些属性都不会被用到，所以图中省略了这些部分，只显示了表头节点的各个层。</p><p>虽然仅靠多个跳跃表节点就可以组成一个跳跃表，但通过使用一个<code>zskiplist</code>结构来持有这些节点，程序可以更方便地对整个跳跃表进行处理，比如快速访问跳跃表的表头节点和表尾节点，又或者快速地获取跳跃表节点的数量（也即是跳跃表的长度）等信息。</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>跳跃表的查找是从最上层的跳跃区间大的层开始的，从头结点开始和前进指针指向的节点进行比较，如果大于前进节点，则继续向前找，如果小于前进节点，则到下一层继续查找，直到找到为止。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>跳跃表的插入操作和链表的插入操作十分相似，大致过程如下：</p><ol><li>查找到需要插入的位置</li><li>申请新的结点</li><li>调整指针</li></ol><p>因为找到插入点之后，新生成节点，新节点的层的高度是随机生成的，故需要保存所有层的后继指针。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除和插入类似，大致过程如下：</p><ol><li>查找到需要删除的结点 </li><li>删除结点</li><li>调整指针</li></ol><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>最坏时间复杂度 О(n)</li><li>平均时间复杂度 O(logn)</li></ul><h2 id="Redis中的应用"><a href="#Redis中的应用" class="headerlink" title="Redis中的应用"></a>Redis中的应用</h2><p>Redis使用跳跃表作为有序集合键的底层实现之一：如果一个有序集合包含的元素数量比较多，又或者有序集合中元素的成员是比较长的字符串时，Redis就会使用跳跃表来作为有序集合键的底层实现。而之所以不使用红黑树，是因为在性能相差不大的情况下，跳跃表实现更为简单。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>跳跃表是有序集合的底层实现之一。</li><li>Redis的跳跃表实现由<code>zskiplist</code>和<code>zskiplistNode</code>两个结构组成，其中<code>zskiplist</code>用于保存跳跃表信息（比如表头节点、表尾节点、长度），而<code>zskiplistNode</code>则用于表示跳跃表节点。</li><li>每个跳跃表节点的层高都是1至32之间的随机数。</li><li>在同一个跳跃表中，多个节点可以包含相同的分值，但每个节点的成员对象必须是唯一的。</li><li>跳跃表中的节点按照分值大小进行排序，当分值相同时，节点按照成员对象的大小进行排序。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://redisbook.com/preview/skiplist/datastruct.html" target="_blank" rel="noopener">Redis 设计与实现</a></li><li><a href="https://blog.csdn.net/yang_yulei/article/details/46275283" target="_blank" rel="noopener">查找——图文翔解SkipList（跳跃表）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;跳跃表（skiplist）是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。&lt;/p&gt;
&lt;p&gt;跳跃
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
      <category term="跳跃表" scheme="http://yoursite.com/tags/%E8%B7%B3%E8%B7%83%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Drools规则引擎原理简介</title>
    <link href="http://yoursite.com/2019/05/28/Drools%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2019/05/28/Drools规则引擎原理简介/</id>
    <published>2019-05-28T08:21:00.000Z</published>
    <updated>2019-05-28T08:43:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DRL解释执行流程"><a href="#DRL解释执行流程" class="headerlink" title="DRL解释执行流程"></a>DRL解释执行流程</h2><p>Drools 规则是在 Java 应用程序上运行的，其要执行的步骤顺序由代码确定。为了实现这一点，Drools 规则引擎将业务规则转换成执行树，如下图所示：<br><img src="http://blog.default.nanwulife.com/20170709223809798.jpg" alt><br>如上图所示，每个规则条件分为小块，在树结构中连接和重用。每次将数据添加到规则引擎中时，它将在与此类似的树中进行求值，并到达一个动作节点，在该节点处，它们将被标记为准备执行特定规则的数据。</p><h2 id="规则引擎工作方式"><a href="#规则引擎工作方式" class="headerlink" title="规则引擎工作方式"></a>规则引擎工作方式</h2><p>Drools规则引擎基于ReteOO算法（对面向对象系统的Rete算法进行了增强和优化的实现），它将事实（<code>Fact</code>）与规则进行匹配，以推断相应的规则结果，这个过程称之为模式匹配。</p><p><img src="http://blog.default.nanwulife.com/20170709223935035.jpg" alt></p><p>当我们到达一个事实（<code>Fact</code>）与规则相匹配的节点时，规则评估会将规则操作与触发数据添加到一个叫作议程（<code>Agenda</code>）的组件中，如果同一个事实（<code>Fact</code>）与多个规则相匹配，就认为这些规则是冲突的，议程（<code>Agenda</code>）使用冲突解决策略（<code>Conflict Resolution strategy</code>）管理这些冲突规则的执行顺序。整个生命周期中，规则评估与规则执行之间有着明确的分割。规则操作的执行可能会导致事实（<code>Fact</code>）的更新，从而与其它规则相匹配，导致它们的触发，称之为前向链接。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/chinrui/article/details/74906748" target="_blank" rel="noopener">Drools 简介</a></li><li><a href="https://blog.csdn.net/lfsf802/article/details/42297469" target="_blank" rel="noopener">rete算法学习</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DRL解释执行流程&quot;&gt;&lt;a href=&quot;#DRL解释执行流程&quot; class=&quot;headerlink&quot; title=&quot;DRL解释执行流程&quot;&gt;&lt;/a&gt;DRL解释执行流程&lt;/h2&gt;&lt;p&gt;Drools 规则是在 Java 应用程序上运行的，其要执行的步骤顺序由代码确定。为
      
    
    </summary>
    
    
      <category term="Drools" scheme="http://yoursite.com/tags/Drools/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式与模板方法的一次实践</title>
    <link href="http://yoursite.com/2019/05/28/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E7%9A%84%E4%B8%80%E6%AC%A1%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2019/05/28/工厂模式与模板方法的一次实践/</id>
    <published>2019-05-28T06:26:00.000Z</published>
    <updated>2019-05-28T07:24:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近做的一个项目是实现一个灰度发布的逻辑，具体来说就是当某个产品更新的时候，根据不同的用户决定是否对新版本可见。该功能本身是很容易实现的，但是考虑到可扩展性的问题，引入了Drools规则引擎，并且通过一些设计模式来进一步提高它的可扩展性，以应对之后可能不断发生变化的规则。</p><h2 id="原始代码"><a href="#原始代码" class="headerlink" title="原始代码"></a>原始代码</h2><p>由于规则并不十分复杂，所以项目中将许多的校验与判断逻辑统一封装到了Fact对象中，而在.drl文件中仅仅是做一些初始化工作，例如这里的场景是给每个用户设置一个新版本可见的延迟天数，达到了这个天数才能获取新版本，那么在.drl中就是将用户与延迟天数的映射关系做初始化。因此，最开始只需要一个Fact就行了：<br><img src="http://blog.default.nanwulife.com/DelayDaysPatternReleaseFact.png" alt><br>在.drl文件中，初始化完成之后，仅仅需要调用这个Fact对象的<code>releaseCheck()</code>，然后就可以通过<code>isRelease()</code>方法决定是否发布新版本了。</p><h2 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h2><p>由上面的简单分析可以看到，判断是否发布新版本的逻辑都封装在了<code>releaseCheck()</code>方法中，但这个方法中的许多步骤其实是冗余的，比如说参数校验、安全校验等等，如果每次增加新的Fact时都去写一模一样的重复代码，就显得十分不简洁且不利于维护了，因此，我们将该方法抽象出来，并且将其中最关键的判断逻辑<code>doReleaseCheck()</code>交由子类去实现，这样不同的Fact子类只需要实现各自的核心判断逻辑即可。此时的UML如下：<br><img src="http://blog.default.nanwulife.com/PatternReleaseFact.png" alt><br>除此之外，对于调用方来说，是不需要关心Fact对象的创建过程的，尤其是当参数比较复杂的情况下。这时候就可以通过工厂方法模式，将创建对象的具体过程交给工厂类来完成：<br><img src="http://blog.default.nanwulife.com/PatternReleaseFactFactory.png" alt><br>这样，对于调用方来说，只需要传入一个<code>UserInfo</code>对象即可，具体需要用到它的哪些属性以及属性的一些校验工作则交由工厂类来实现，调用方可以直接拿到想要的Fact对象。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过模板方法，可以在抽象父类中先定义好整个方法的框架，并且让不同的子类去实现其中的某些核心步骤，这些核心步骤在父类中是抽象的；而通过工厂方法，使得调用者不再需要关心创建对象的具体过程，将许多繁琐的工作解耦了出去，由工厂类来负责实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近做的一个项目是实现一个灰度发布的逻辑，具体来说就是当某个产品更新的时候，根据不同的用户决定是否对新版本可见。该功能本身是很容易实现的，但
      
    
    </summary>
    
      <category term="项目" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="工厂方法" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/"/>
    
      <category term="模板方法" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL建索引的几大原则</title>
    <link href="http://yoursite.com/2019/05/27/%E5%BB%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E5%87%A0%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/05/27/建索引的几大原则/</id>
    <published>2019-05-27T14:28:00.000Z</published>
    <updated>2019-05-27T14:32:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最左前缀匹配原则"><a href="#最左前缀匹配原则" class="headerlink" title="最左前缀匹配原则"></a>最左前缀匹配原则</h2><p>b+树的数据项是复合的数据结构，比如索引为<code>(name, age, sex)</code>的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当<code>(张三, 20, F)</code>这样的数据来检索的时候，b+树会优先比较<code>name</code>来确定下一步的搜索方向，如果<code>name</code>相同再依次比较<code>age</code>和<code>sex</code>，最后得到检索的数据；但当<code>(20, F)</code>这样的没有<code>name</code>的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候<code>name</code>就是第一个比较因子，必须要先根据<code>name</code>来搜索才能知道下一步去哪里查询。比如当<code>(张三, F)</code>这样的数据来检索时，b+树可以用<code>name</code>来指定搜索方向，但下一个字段<code>age</code>的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是<code>F</code>的数据了，这个是非常重要的性质，即索引的最左前缀匹配原则。</p><h2 id="索引建议"><a href="#索引建议" class="headerlink" title="索引建议"></a>索引建议</h2><ol><li>根据最左前缀匹配原则，MySQL会一直向右匹配直到遇到范围查询（<code>&gt;</code>、<code>&lt;</code>、<code>between</code>、<code>like</code>）就停止匹配，比如<code>a = 1 and b = 2 and c &gt; 3 and d = 4</code>，如果建立<code>(a, b, c, d)</code>顺序的索引，<code>d</code>是用不到索引的，如果建立<code>(a, b, d, c)</code>的索引则都可以用到，<code>a</code>、<code>b</code>、<code>d</code>的顺序可以任意调整。</li><li><code>=</code>和<code>in</code>可以乱序，比如<code>a = 1 and b = 2 and c = 3</code>建立<code>(a, b, c)</code>索引可以任意顺序，MySQL的查询优化器会帮你优化成索引可以识别的形式。</li><li>尽量选择区分度高的列作为索引，区分度的公式是<code>count(distinct col)/count(*)</code>，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0。</li><li>索引列不能参与计算，否则将导致引擎放弃使用索引而进行全表扫描，比如<code>select id from t where num/2=100;</code>应优化成<code>select id from t where num=100*2;</code></li><li>尽量的扩展索引，不要新建索引。比如表中已经有<code>a</code>的索引，现在要加<code>(a, b)</code>的索引，那么只需要修改原来的索引即可。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://tech.meituan.com/2014/06/30/mysql-index.html" target="_blank" rel="noopener">MySQL索引原理及慢查询优化</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;最左前缀匹配原则&quot;&gt;&lt;a href=&quot;#最左前缀匹配原则&quot; class=&quot;headerlink&quot; title=&quot;最左前缀匹配原则&quot;&gt;&lt;/a&gt;最左前缀匹配原则&lt;/h2&gt;&lt;p&gt;b+树的数据项是复合的数据结构，比如索引为&lt;code&gt;(name, age, sex)&lt;/c
      
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="索引" scheme="http://yoursite.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>InnoDB的行锁与表锁</title>
    <link href="http://yoursite.com/2019/05/27/InnoDB%E7%9A%84%E8%A1%8C%E9%94%81%E4%B8%8E%E8%A1%A8%E9%94%81/"/>
    <id>http://yoursite.com/2019/05/27/InnoDB的行锁与表锁/</id>
    <published>2019-05-27T12:21:00.000Z</published>
    <updated>2019-05-27T14:29:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在数据库系统中，根据作用范围我们可以将锁分为行级锁与表级锁，下面结合InnoDB与MyISAM引擎分别介绍一下这两种锁。</p><h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><p>表级锁是MySQL中锁定粒度最大的一种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少，但发出锁冲突的概率最高，并发度也是最低的。MyISAM就是使用的表级锁，并且因为MyISAM总是一次性获得所需的全部锁，要么全部满足，要么全部等待，所以是不会发生死锁的。</p><h2 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h2><p>行级锁是MySQL中锁定粒度最小的一种锁，表示只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突，其加锁粒度最小，但加锁的开销也最大。行级锁分为共享锁和排他锁。</p><h2 id="InnoDB中的行锁与表锁"><a href="#InnoDB中的行锁与表锁" class="headerlink" title="InnoDB中的行锁与表锁"></a>InnoDB中的行锁与表锁</h2><p>InnoDB行锁是通过给索引上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表级锁。除此之外，虽然是访问不同行的记录，但是如果使用相同的索引键，是会出现锁冲突的。但如果MySQL认为全表扫描效率更高，比如对一些很小的表，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行锁。</p><p>在实际应用中，要特别注意InnoDB行锁的这一特性，不然的话，可能导致大量的锁冲突，从而影响并发性能。</p><h2 id="行级锁与死锁"><a href="#行级锁与死锁" class="headerlink" title="行级锁与死锁"></a>行级锁与死锁</h2><p>InnoDB与MyISAM不同，它是遵循的两段锁协议，是逐步获取锁的，也就有可能出现死锁问题。前面说过，InnoDB不是锁记录，而是锁索引。索引分为主键索引和非主键索引两种，如果一条SQL语句操作了主键索引，MySQL就会锁定这条主键索引；如果一条语句操作了非主键索引，MySQL会先锁定该非主键索引，再锁定相关的主键索引。当两个事务同时执行，一个锁住了主键索引，在等待其他相关索引。另一个锁定了非主键索引，在等待主键索引。这样就会发生死锁。发生死锁后，InnoDB一般都可以检测到，并使一个事务释放锁回退，另一个获取锁完成事务。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.hollischuang.com/archives/914" target="_blank" rel="noopener">MySQL中的行级锁,表级锁,页级锁</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在数据库系统中，根据作用范围我们可以将锁分为行级锁与表级锁，下面结合InnoDB与MyISAM引擎分别介绍一下这两种锁。&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="InnoDB" scheme="http://yoursite.com/tags/InnoDB/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="锁" scheme="http://yoursite.com/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>MySQL主从复制与分库分表</title>
    <link href="http://yoursite.com/2019/05/27/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B8%8E%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    <id>http://yoursite.com/2019/05/27/MySQL主从复制与读写分离/</id>
    <published>2019-05-27T09:12:38.000Z</published>
    <updated>2019-05-27T10:09:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>主要涉及三个线程：binlog 线程、I/O 线程和 SQL 线程。</p><ul><li>binlog线程：负责将主服务器上的数据更改写入二进制日志（Binary log）中。</li><li>I/O线程：负责从主服务器上读取二进制日志，并写入从服务器的中继日志（Relay log）。</li><li>SQL线程：负责读取中继日志，解析出主服务器已经执行的数据更改并在从服务器中重放（Replay）。</li></ul><p><img src="http://blog.default.nanwulife.com/master-slave.png" alt></p><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。</p><p>读写分离能提高性能的原因在于</p><ul><li>主从服务器负责各自的读和写，极大程度缓解了锁的争用；</li><li>从服务器可以使用MyISAM，提升查询性能以及节约系统开销；</li><li>增加冗余，提高可用性。</li></ul><p><img src="http://blog.default.nanwulife.com/master-slave-proxy.png" alt></p><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><p>当在主从复制、索引优化并且升级硬件后，数据库性能依然无法达到要求，此时就可以考虑数据库的切分，根据其切分类型，可以分为两种切分方式：垂直切分和水平切分。</p><h3 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h3><p>垂直切分又分为垂直分库和垂直分表。</p><p>垂直分库就是根据业务耦合性，将关联度低的不同表存储在不同的数据库。做法与大系统拆分为多个小系统类似，按业务分类进行独立划分。与”微服务治理”的做法相似，每个微服务使用单独的一个数据库。（例如用户User一个库，商品Producet一个库，订单Order一个库）</p><p>垂直分表是针对列进行的。如果某个表的字段较多，可以把不常用的字段或者长度较长的字段拆分到一张新的扩展表中。在字段较多的情况下，通过“大表拆小表”，更有利于维护与开发，也能避免跨页问题（一致性、排序等问题）。MySQL底层是通过数据页存储的，一条记录占用空间过大会导致跨页，造成额外的性能开销。另外数据库以行为单位将数据加载到内存中，这样表中字段长度较短且访问频率较高，内存能加载更多的数据，命中率更高，减少了磁盘IO，从而提升了数据库性能。</p><h3 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h3><p>因为垂直切分并没有解决单表数据量过大的问题（1000W行切分后还是1000W行），所以当还是无法满足需求的时候，可以进行水平切分。水平切分有以下几种方式：</p><ul><li>范围切分：比如按照时间区间或ID区间来切分，这可以使得冷热数据分离。由于是顺序存储，天然适合水平扩展，但是无法解决集中写入瓶颈的问题。</li><li>Hash切分：通过Hash取模解决了数据访问不均匀的问题，但是在集群扩容的时候，数据迁移量是很大的（使用一致性hash算法能较好的避免这个问题）。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/butterfly100/p/9034281.html" target="_blank" rel="noopener">数据库分库分表思路</a></li><li><a href="http://codingcms.cn/2019/05/14/MySQL_4/" target="_blank" rel="noopener">MySQL 分库分表策略</a></li><li><a href="https://cyc2018.github.io/CS-Notes/#/notes/MySQL?id=%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6" target="_blank" rel="noopener">CS-NOTE</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;主从复制&quot;&gt;&lt;a href=&quot;#主从复制&quot; class=&quot;headerlink&quot; title=&quot;主从复制&quot;&gt;&lt;/a&gt;主从复制&lt;/h2&gt;&lt;p&gt;主要涉及三个线程：binlog 线程、I/O 线程和 SQL 线程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;binlog线程：负责将主服
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GET和POST的区别</title>
    <link href="http://yoursite.com/2019/05/26/PUT%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/05/26/PUT和POST的区别/</id>
    <published>2019-05-26T11:13:46.000Z</published>
    <updated>2019-05-26T12:06:34.000Z</updated>
    
    <content type="html"><![CDATA[<ol start="0"><li>GET用于资源获取，是安全且幂等的，安全的意思是仅仅会获取资源而不会影响资源状态，幂等则是对同一URL的多次请求应该返回同样的结果；POST主要用来传输数据，多次调用会产生多个新的资源，因此是不安全且非幂等的。</li><li>GET请求的数据会包含在URL中，而POST请求则把数据放置在HTTP请求体中。</li><li>正因为GET请求是通过URL提交数据，所以GET请求可提交的数据量跟URL的长度有关系，而POST请求从理论上讲是没有大小限制，可传较大量的数据。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;GET用于资源获取，是安全且幂等的，安全的意思是仅仅会获取资源而不会影响资源状态，幂等则是对同一URL的多次请求应该返回同样的结果；POST主要用来传输数据，多次调用会产生多个新的资源，因此是不安全且非幂等的。&lt;/li&gt;
&lt;li&gt;GET请求的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TCP与UDP的区别</title>
    <link href="http://yoursite.com/2019/05/26/TCP%E4%B8%8EUDP%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/05/26/TCP与UDP的区别/</id>
    <published>2019-05-26T11:11:00.000Z</published>
    <updated>2019-05-26T11:29:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>OSI和TCP/IP模型在传输层定义了两种传输协议：TCP（传输控制协议）和 UDP（用户数据报协议）。它们的主要区别如下：</p><ol><li>面向连接与无连接</li><li>TCP保证数据可靠性，错误重发；UDP不可靠，可能丢包 </li><li>TCP保证数据顺序，UDP不保证</li><li>TCP主要提供完整性服务，UDP主要提供及时性服务</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OSI和TCP/IP模型在传输层定义了两种传输协议：TCP（传输控制协议）和 UDP（用户数据报协议）。它们的主要区别如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;面向连接与无连接&lt;/li&gt;
&lt;li&gt;TCP保证数据可靠性，错误重发；UDP不可靠，可能丢包 &lt;/li&gt;
&lt;li&gt;TCP保证
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="TCP" scheme="http://yoursite.com/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>@Autowired源码分析</title>
    <link href="http://yoursite.com/2019/05/24/Autowired%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/05/24/Autowired源码分析/</id>
    <published>2019-05-24T06:24:18.000Z</published>
    <updated>2019-05-24T06:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AutowiredAnnotationBeanPostProcessor"><a href="#AutowiredAnnotationBeanPostProcessor" class="headerlink" title="AutowiredAnnotationBeanPostProcessor"></a>AutowiredAnnotationBeanPostProcessor</h2><p><code>@Autowired</code>注解的逻辑是由<code>AutowiredAnnotationBeanPostProcessor</code>实现的，<code>AutowiredAnnotationBeanPostProcessor</code>不是一个简单的<code>BeanPostProcessor</code>，而是一个实现了多重接口的<code>BeanPostProcessor</code>，它主要实现了以下两个接口：</p><ul><li><code>InstantiationAwareBeanPostProcessor</code>：对应<code>postProcessPropertyValues()</code>方法</li><li><code>MergedBeanDefinitionPostProcessor</code>：对应<code>findAutowiringMetadata</code>方法</li></ul><p>下面我们分别来看看这两个接口的实现是如何完成<code>@Autowired</code>的逻辑的。</p><h2 id="作为MergedBeanDefinitionPostProcessor的行为"><a href="#作为MergedBeanDefinitionPostProcessor的行为" class="headerlink" title="作为MergedBeanDefinitionPostProcessor的行为"></a>作为MergedBeanDefinitionPostProcessor的行为</h2><p>首先，我们从<code>ApplicationContext</code>体系最核心的<code>refresh()</code>方法说起：<br><img src="http://blog.default.nanwulife.com/162cc16e4b0eee57.jpg" alt></p><p><code>refresh()</code>方法中<code>registerBeanPostProcessors(beanFactory)</code>这一行代码完成了对<code>AutowiredAnnotationBeanPostProcessor</code>的注册，当执行<code>finishBeanFactoryInitialization(beanFactory)</code>方法时，会实例化所有非懒加载的单例Bean，这个过程中会调用<code>AbstractAutowireCapableBeanFactory</code>类的<code>doCreateBean()</code>方法，其中在使用合适的实例化策略实例化完Bean之后，会有下面这么一段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> Object[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName); <span class="comment">// 重点关注这一行</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                        <span class="string">"Post-processing of merged bean definition failed"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyMergedBeanDefinitionPostProcessors</span><span class="params">(RootBeanDefinition mbd, Class&lt;?&gt; beanType, String beanName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">            MergedBeanDefinitionPostProcessor bdp = (MergedBeanDefinitionPostProcessor) bp;</span><br><span class="line">            bdp.postProcessMergedBeanDefinition(mbd, beanType, beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>applyMergedBeanDefinitionPostProcessors()</code>方法中，会判断当前的<code>BeanPostProcessor</code>是否是<code>MergedBeanDefinitionPostProcessor</code>类型的，如果是的话则调用它的<code>postProcessMergedBeanDefinition()</code>方法（显然，这里会判断为真，因为<code>AutowiredAnnotationBeanPostProcessor</code>实现了<code>MergedBeanDefinitionPostProcessor</code>）。我们再来看看<code>AutowiredAnnotationBeanPostProcessor</code>对该方法的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessMergedBeanDefinition</span><span class="params">(RootBeanDefinition beanDefinition, Class&lt;?&gt; beanType, String beanName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beanType != <span class="keyword">null</span>) &#123;</span><br><span class="line">        InjectionMetadata metadata = findAutowiringMetadata(beanName, beanType, <span class="keyword">null</span>);</span><br><span class="line">        metadata.checkConfigMembers(beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> InjectionMetadata <span class="title">findAutowiringMetadata</span><span class="params">(String beanName, Class&lt;?&gt; clazz, PropertyValues pvs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String cacheKey = (StringUtils.hasLength(beanName) ? beanName : clazz.getName());</span><br><span class="line">    InjectionMetadata metadata = <span class="keyword">this</span>.injectionMetadataCache.get(cacheKey); <span class="comment">// 先从缓存中找 InjectionMetadata，诸如 @Autowire，@Inject 等</span></span><br><span class="line">    <span class="keyword">if</span> (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;                  <span class="comment">// 如果找不到，则从这里开始，通过分析 bean，去找到它的 InjectionMetadata</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.injectionMetadataCache) &#123;</span><br><span class="line">            metadata = <span class="keyword">this</span>.injectionMetadataCache.get(cacheKey);</span><br><span class="line">            <span class="keyword">if</span> (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (metadata != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    metadata.clear(pvs);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    metadata = buildAutowiringMetadata(clazz);              <span class="comment">// 重点关注：去找，并构建其 InjectionMetadata 对象</span></span><br><span class="line">                    <span class="keyword">this</span>.injectionMetadataCache.put(cacheKey, metadata);    <span class="comment">// 如果找到了，将其放入 injectionMetadataCache 中返回；</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (NoClassDefFoundError err) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to introspect bean class ["</span> + clazz.getName() +</span><br><span class="line">                            <span class="string">"] for autowiring metadata: could not find class that it depends on"</span>, err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>findAutowiringMetadata()</code>方法先从缓存中判断否已经存在该<code>InjectionMetadata</code>了，如果存在，且无需进行刷新，则返回；如果缓存中不存在（或者存在但需要刷新），那么就需要去构建一个<code>InjectionMetadata</code>。</p><p>接下来就是比较核心的部分了，通过<code>buildAutowiringMetadata()</code>方法构建<code>InjectionMetadata</code>对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> InjectionMetadata <span class="title">buildAutowiringMetadata</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;InjectionMetadata.InjectedElement&gt; elements = <span class="keyword">new</span> LinkedList&lt;InjectionMetadata.InjectedElement&gt;();</span><br><span class="line">    Class&lt;?&gt; targetClass = clazz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> LinkedList&lt;InjectionMetadata.InjectedElement&gt; currElements =</span><br><span class="line">                <span class="keyword">new</span> LinkedList&lt;InjectionMetadata.InjectedElement&gt;();</span><br><span class="line">        <span class="comment">// 1. 通过反射从 targetClass 的 field 中去找注解</span></span><br><span class="line">        ReflectionUtils.doWithLocalFields(targetClass, <span class="keyword">new</span> ReflectionUtils.FieldCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWith</span><span class="params">(Field field)</span> <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException </span>&#123;</span><br><span class="line">                AnnotationAttributes ann = findAutowiredAnnotation(field); <span class="comment">// 是否存在 @Autowired</span></span><br><span class="line">                <span class="keyword">if</span> (ann != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                            logger.warn(<span class="string">"Autowired annotation is not supported on static fields: "</span> + field);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span>; <span class="comment">// 如果当前处理的属性是静态属性，则直接返回</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">boolean</span> required = determineRequiredStatus(ann);</span><br><span class="line">                    currElements.add(<span class="keyword">new</span> AutowiredFieldElement(field, required));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 2. 通过反射从 targetClass 的 method 中去找注解</span></span><br><span class="line">        ReflectionUtils.doWithLocalMethods(targetClass, <span class="keyword">new</span> ReflectionUtils.MethodCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWith</span><span class="params">(Method method)</span> <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException </span>&#123;</span><br><span class="line">                Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(method);</span><br><span class="line">                <span class="keyword">if</span> (!BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 上述代码处理 bridged method 相关情况；可忽略；</span></span><br><span class="line">                AnnotationAttributes ann = findAutowiredAnnotation(bridgedMethod); <span class="comment">// 是否存在 @Autowired</span></span><br><span class="line">                <span class="keyword">if</span> (ann != <span class="keyword">null</span> &amp;&amp; method.equals(ClassUtils.getMostSpecificMethod(method, clazz))) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                            logger.warn(<span class="string">"Autowired annotation is not supported on static methods: "</span> + method);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span>; <span class="comment">// 如果方法是静态的，则直接返回；</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (method.getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                            logger.warn(<span class="string">"Autowired annotation should only be used on methods with parameters: "</span> +</span><br><span class="line">                                    method); <span class="comment">// 警告，方法参数长度为 0</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">boolean</span> required = determineRequiredStatus(ann);</span><br><span class="line">                    PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);</span><br><span class="line">                    currElements.add(<span class="keyword">new</span> AutowiredMethodElement(method, required, pd));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        elements.addAll(<span class="number">0</span>, currElements);</span><br><span class="line">        targetClass = targetClass.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (targetClass != <span class="keyword">null</span> &amp;&amp; targetClass != Object.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> InjectionMetadata(clazz, elements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该方法分为两部分，通过工具类<code>ReflectionUtils</code>分别从当前Bean实例的<code>fields</code>和<code>methods</code>中去查找<code>@Autowired</code>注解：</p><ol><li>从<code>fields</code>找<code>@Autowired</code>注解，若找到，则创建<code>AutowiredFieldElement</code>实例，并放入<code>currElements</code>队列中</li><li>从<code>methods</code>中找<code>@Autowired</code>注解，若找到，则创建<code>AutowiredMethodElement</code>实例，并放入<code>currElements</code>队列中</li><li>最后，通过Bean的Class对象和<code>curreElements</code>构建<code>InjectionMetadata</code>实例并返回</li></ol><p>此时，将构建好的<code>InjectionMetadata</code>加入缓存<code>injectionMetadataCache</code>中并返回。</p><h2 id="作为InstantiationAwareBeanPostProcessor的行为"><a href="#作为InstantiationAwareBeanPostProcessor的行为" class="headerlink" title="作为InstantiationAwareBeanPostProcessor的行为"></a>作为InstantiationAwareBeanPostProcessor的行为</h2><p>同样，在<code>doCreateBean()</code>方法中执行<code>populateBean()</code>方法填充属性时，<code>populateBean()</code>方法中有如下一段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line"><span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line">pvs = mbd.getPropertyValues();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line"><span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line"><span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line"><span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);<span class="comment">// 重点关注这一行</span></span><br><span class="line"><span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，<code>pvs = ibp.postProcessPropertyValues()</code>这行代码调用了<code>InstantiationAwareBeanPostProcessor</code>的接口方法，继续跟进去看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PropertyValues <span class="title">postProcessPropertyValues</span><span class="params">(PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</span> <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"><span class="comment">// &lt;1&gt;</span></span><br><span class="line">InjectionMetadata metadata = findAutowiringMetadata(beanName, bean.getClass(), pvs);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// &lt;2&gt;</span></span><br><span class="line">metadata.inject(bean, beanName, pvs);</span><br><span class="line">&#125; <span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pvs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在刚实例化完Bean之后，作为<code>MergedBeanDefinitionPostProcessor</code>，已经调用过<code>findAutowiringMetadata()</code>方法，即从当前Bean对象中的属性和方法中找到了<code>@Autowired</code>注解，并将它们封装成了<code>InjectionMetadata</code>放入了缓存当中，因此，此处直接从缓存中就可以获取到该Bean对应的<code>InjectMetadata</code>。接下来就是通过<code>InjectMetadata</code>进行注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target, @Nullable String beanName, @Nullable PropertyValues pvs)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">Collection&lt;InjectedElement&gt; checkedElements = <span class="keyword">this</span>.checkedElements;</span><br><span class="line">Collection&lt;InjectedElement&gt; elementsToIterate =</span><br><span class="line">(checkedElements != <span class="keyword">null</span> ? checkedElements : <span class="keyword">this</span>.injectedElements);</span><br><span class="line"><span class="keyword">if</span> (!elementsToIterate.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">for</span> (InjectedElement element : elementsToIterate) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Processing injected element of bean '"</span> + beanName + <span class="string">"': "</span> + element);</span><br><span class="line">&#125;</span><br><span class="line">element.inject(target, beanName, pvs);<span class="comment">// 重点关注</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target, @Nullable String requestingBeanName, @Nullable PropertyValues pvs)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isField) &#123;</span><br><span class="line">Field field = (Field) <span class="keyword">this</span>.member;</span><br><span class="line">ReflectionUtils.makeAccessible(field);</span><br><span class="line">field.set(target, getResourceToInject(target, requestingBeanName));<span class="comment">// 重点关注</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (checkPropertySkipping(pvs)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Method method = (Method) <span class="keyword">this</span>.member;</span><br><span class="line">ReflectionUtils.makeAccessible(method);</span><br><span class="line">method.invoke(target, getResourceToInject(target, requestingBeanName));<span class="comment">// 重点关注</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex.getTargetException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>InjectionMetadata</code>对象本身包含了一系列的<code>AutowiredFieldElement</code>和<code>AutowiredMethodElement</code>，所以这里迭代<code>InjectedElement</code>并依次处理它们，而处理的逻辑都在<code>inject()</code>这一关键方法中，可以看到最终就是根据是属性还是方法来分别使用反射注入，并且对于方法而言，该方法会被调用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.shangyang.me/2017/04/05/spring-core-container-sourcecode-analysis-annotation-autowired/" target="_blank" rel="noopener">Spring Core Container 源码分析五：@Autowired</a></li><li><a href="https://juejin.im/entry/5ad3fda5f265da238d512a98" target="_blank" rel="noopener">深入理解Spring系列之十四：@Autowired是如何工作的</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;AutowiredAnnotationBeanPostProcessor&quot;&gt;&lt;a href=&quot;#AutowiredAnnotationBeanPostProcessor&quot; class=&quot;headerlink&quot; title=&quot;AutowiredAnnotationB
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>破坏双亲委派模型</title>
    <link href="http://yoursite.com/2019/05/24/%E7%A0%B4%E5%9D%8F%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/05/24/破坏双亲委派模型/</id>
    <published>2019-05-24T02:34:00.000Z</published>
    <updated>2019-07-20T12:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何破坏双亲委派模型"><a href="#如何破坏双亲委派模型" class="headerlink" title="如何破坏双亲委派模型"></a>如何破坏双亲委派模型</h2><p>双亲委派模型不是一个强制性的约束模型，而是一个建议型的类加载器实现方式。考虑这么一个问题，如果基础类需要调用用户的代码该怎么办，因为根据双亲委派模型，越基础的类由越上层的加载器进行加载，但是上层的加载器并不认识用户的代码。</p><p>一个典型的例子就是JNDI服务，JNDI现在已经是Java的标准服务，它的代码由启动类加载器去加载（在JDK1.3时就放进<code>rt.jar</code>）,但它需要调用由独立厂商实现并部署在应用程序的ClassPath下的JNDI接口提供者（SPI， Service Provider Interface）的代码，但启动类加载器不可能“认识“这些代码啊。因为这些类不在<code>rt.jar</code>中，但是启动类加载器又需要加载。怎么办呢？</p><p>为了解决这个问题，Java设计团队只好引入了一个不太优雅的设计：线程上下文类加载器（Thread Context ClassLoader）。这个类加载器可以通过<code>java.lang.Thread</code>类的<code>setContextClassLoader()</code>方法进行设置。如果创建线程时未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过的话，那这个类加载器默认即是应用程序类加载器。</p><p>有了线程上下文加载器，JNDI服务使用这个线程上下文加载器去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上就是打通了双亲委派模型的层次结构来逆向使用类加载器，实际上已经违背了双亲委派模型的一般性原则。</p><h2 id="JDBC如果破坏双亲委派模型"><a href="#JDBC如果破坏双亲委派模型" class="headerlink" title="JDBC如果破坏双亲委派模型"></a>JDBC如果破坏双亲委派模型</h2><p>JDBC之所以要破坏双亲委派模型，是因为原生的JDBC中Driver驱动本身只是一个接口，并没有具体的实现，具体的实现是由不同的数据库去实现的，例如，可以由MySQL的<code>mysql-connector-.jar</code>中的<code>Driver</code>类具体实现。由于原生的JDBC中的类是放在<code>rt.jar</code>包的，是由启动类加载器进行类加载的，且需要动态去加载不同数据库类型的<code>Driver</code>类，而<code>mysql-connector-.jar</code>中的<code>Driver</code>类是用户自己写的代码，所以启动类加载器是不能进行加载的，需要由应用程序类加载器进行加载。此时，通过线程上下文类加载器获得应用程序类加载器，通过应用程序类加载器去加载这个<code>Driver</code>类，从而避开了双亲委派模型的局限性。</p><h2 id="Tomcat的类加载器是怎么设计的？"><a href="#Tomcat的类加载器是怎么设计的？" class="headerlink" title="Tomcat的类加载器是怎么设计的？"></a>Tomcat的类加载器是怎么设计的？</h2><p>前面3个类加载器和默认的一致，CommonClassLoader、CatalinaClassLoader、SharedClassLoader和WebappClassLoader则是Tomcat自己定义的类加载器，它们分别加载<code>/common/*</code>、<code>/server/*</code>、<code>/shared/*</code>（在tomcat 6之后已经合并到根目录下的lib目录下）和<code>/WebApp/WEB-INF/*</code>中的Java类库。其中WebApp类加载器和Jsp类加载器通常会存在多个实例，每一个Web应用程序对应一个WebApp类加载器，每一个JSP文件对应一个Jsp类加载器。</p><p><img src="http://blog.default.nanwulife.com/4236553-89bacc3467d513f0.png" alt></p><ul><li><code>commonLoader</code>：Tomcat最基本的类加载器，加载路径中的class可以被Tomcat容器本身以及各个Webapp访问。</li><li><code>catalinaLoader</code>：Tomcat容器私有的类加载器，加载路径中的class对于Webapp不可见。</li><li><code>sharedLoader</code>：各个Webapp共享的类加载器，加载路径中的class对于所有Webapp可见，但是对于Tomcat容器不可见。</li><li><code>WebappClassLoader</code>：各个Webapp私有的类加载器，加载路径中的class只对当前Webapp可见。</li></ul><p>Common ClassLoader能加载的类都可以被Catalina ClassLoader和Shared ClassLoader使用，从而实现了公有类库的共用，而Catalina ClassLoader和Shared ClassLoader自己能加载的类则与对方相互隔离，从而保证了安全性。WebApp ClassLoader可以使用Shared ClassLoader加载到的类，但各个WebApp ClassLoader实例之间相互隔离。JasperLoader的加载范围仅仅是这个JSP文件所编译出来的那一个.Class文件，它出现的目的就是为了被丢弃：当Web容器检测到JSP文件被修改时，会替换掉目前的JasperLoader的实例，并通过再建立一个新的Jsp类加载器来实现JSP文件的HotSwap功能，否则如果类名还是一样，旧的类加载器会直接取方法区中已经存在的，修改后的JSP是不会重新加载的。</p><p>可以看出，Tomcat没有遵循双亲委派模型，每个Webapp ClassLoader加载自己的目录下的class文件，不会传递给父类加载器。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jianshu.com/p/abf6fd4531e7?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">深入理解 Tomcat（四）Tomcat 类加载器之为何违背双亲委派模型</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何破坏双亲委派模型&quot;&gt;&lt;a href=&quot;#如何破坏双亲委派模型&quot; class=&quot;headerlink&quot; title=&quot;如何破坏双亲委派模型&quot;&gt;&lt;/a&gt;如何破坏双亲委派模型&lt;/h2&gt;&lt;p&gt;双亲委派模型不是一个强制性的约束模型，而是一个建议型的类加载器实现方式。考虑
      
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
      <category term="双亲委派模型" scheme="http://yoursite.com/tags/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>ApplicationContext体系分析</title>
    <link href="http://yoursite.com/2019/05/23/ApplicationContext%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/05/23/ApplicationContext源码分析/</id>
    <published>2019-05-23T11:15:41.000Z</published>
    <updated>2019-05-23T13:28:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>ApplicationContext</code>实现了除基本容器外的多个接口，提供了比<code>BeanFactory</code>更为丰富的功能，比如说自动识别<code>BeanPostProcessor</code>以及其它特殊类型Bean、容器启动时自动加载Bean、国际化支持、容器内事件发布等。因此，我们在实际应用中一般会使用<code>ApplicationContext</code>而不是<code>BeanFactory</code>。</p><h2 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h2><p><img src="http://blog.default.nanwulife.com/72307-b0c809e1cc035cdb.jpg" alt></p><p>从上图可以看出，<code>ApplicationContext</code>继承了<code>BeanFactory</code>，因此拥有<code>BeanFactory</code>的全部功能，实际上，它是将容器的功能委派给<code>DefaultListableBeanFactory</code>来实现。除此之外，<code>ApplicationContext</code>还继承了<code>ResourceLoader</code>、<code>EnvironmentCable</code>、<code>ApplicationEventPublisher</code>、<code>MessageSource</code>等接口，提供了十分丰富的功能。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>创建一个常用的<code>ApplicationContext</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:application.xml"</span>);</span><br></pre></td></tr></table></figure></p><p><code>ClassPathXmlApplicationContext</code>的构造函数在设置完配置文件的位置后，紧接着调用<code>refresh()</code>方法，这个方法是整个<code>ApplicationContext</code>体系的核心，是在<code>AbstractApplicationContext</code>中实现的，并且是个典型的模板方法，也就是说其中的一些步骤是交由具体子类来实现的。以下是这个方法的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// 1. 准备刷新时的上下文环境</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 刷新并初始化 BeanFactory</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 配置 BeanFactory 中的一些其它信息</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 4. 提供子类覆盖的额外处理，即子类处理自定义的 BeanFactoryPostProcess</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 调用各种 BeanFactoryPostProcessor</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 注册 BeanPostProcessor 到 BeanFactory 中去</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 初始化上下文中的资源文件，如国际化文件的处理等</span></span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 初始化上下文事件广播器</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9. 初始化其它特殊 Bean</span></span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10. 检查 listener 类型的 Bean 并注册</span></span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 11. 实例化所有非懒加载的单例 Bean</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 12. 发布相应的事件</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line"><span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="obtainFreshBeanFactory"><a href="#obtainFreshBeanFactory" class="headerlink" title="obtainFreshBeanFactory"></a>obtainFreshBeanFactory</h3><p><code>obtainFreshBeanFactory()</code>方法核心是内部调用<code>refreshBeanFactory()</code>方法并将容器内部的<code>ConfigurableListableBeanFactory</code>返回，从这也看到了<code>ApplicationContext</code>和<code>BeanFactory</code>的关系：<code>ApplicationContext</code>内部包含一个<code>BeanFactory</code>，<code>ApplicationContext</code>所有关于<code>BeanFactory</code>的功能将委派给此<code>BeanFactory</code>处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="comment">// 清理之前的BeanFactory</span></span><br><span class="line">   <span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">      destroyBeans();</span><br><span class="line">      closeBeanFactory();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// createBeanFactory方法直接新建一个DefaultListableBeanFactory，也就是说内部使用的是DefaultListableBeanFactory实例</span></span><br><span class="line">      DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">      beanFactory.setSerializationId(getId());</span><br><span class="line">      <span class="comment">// 自定义此上下文使用的内部bean工厂</span></span><br><span class="line">      customizeBeanFactory(beanFactory);</span><br><span class="line">      <span class="comment">// 将BeanDefinition加载到给定的bean工厂中，通常通过委托给一个或多个BeanDefinitionReader来实现</span></span><br><span class="line">      <span class="comment">// 子类实现的方法，此处调用的是AbstractXmlApplicationContext的方法</span></span><br><span class="line">      loadBeanDefinitions(beanFactory);</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">         <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(...);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说这一步是构建<code>ApplicationContext</code>内部的<code>BeanFactory</code>，以及根据配置将<code>BeanDefinition</code>加载到<code>BeanFactory</code>中（此时并没有实例化Bean）。</p><h3 id="prepareBeanFactory"><a href="#prepareBeanFactory" class="headerlink" title="prepareBeanFactory"></a>prepareBeanFactory</h3><p>配置内部<code>BeanFactory</code>的一些基础参数，比如<code>ClassLoader</code>等等。</p><h3 id="postProcessBeanFactory"><a href="#postProcessBeanFactory" class="headerlink" title="postProcessBeanFactory"></a>postProcessBeanFactory</h3><p>对<code>BeanFactory</code>预处理，<code>ClassPathXmlApplicationContext</code>未重写，<code>WebXmlApplicationContext</code>有重写，这里不展开。</p><h3 id="invokeBeanFactoryPostProcessors"><a href="#invokeBeanFactoryPostProcessors" class="headerlink" title="invokeBeanFactoryPostProcessors"></a>invokeBeanFactoryPostProcessors</h3><p>在任何Bean的实例化之前，实例化并调用所有已注册的<code>BeanFactoryPostProcessor</code>Bean，如果实现了<code>PriorityOrdered</code>或者<code>Ordered</code>接口则按顺序调用。此时允许<code>BeanFactoryPostProcessor</code>在实例化<code>BeanDefinition</code>之前对当前的配置数据进行修改。</p><h3 id="registerBeanPostProcessors"><a href="#registerBeanPostProcessors" class="headerlink" title="registerBeanPostProcessors"></a>registerBeanPostProcessors</h3><p>将当前所有的<code>BeanPostProcessor</code>注册到<code>BeanFactory</code>中去，同样也是按照<code>PriorityOrdered</code>或者<code>Ordered</code>的顺序。这也是<code>ApplicationContext</code>与<code>BeanFactory</code>的一个不同，<code>BeanFactory</code>必须自己手动的调用<code>addBeanPostProcessor()</code>方法。</p><h3 id="initMessageSource"><a href="#initMessageSource" class="headerlink" title="initMessageSource"></a>initMessageSource</h3><p>初始化<code>MessageSource</code>，如果没有定义则使用<code>DelegatingMessageSource</code>，实际是委派给父类的。</p><h3 id="initApplicationEventMulticaster"><a href="#initApplicationEventMulticaster" class="headerlink" title="initApplicationEventMulticaster"></a>initApplicationEventMulticaster</h3><p>初始化<code>ApplicationEventMulticaster</code>，如果没有定义则使用<code>SimpleApplicationEventMulticaster</code>。</p><h3 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh"></a>onRefresh</h3><p>模板方法，交给子类来实现，一般是用于在实例化单例Bean之前调用特定Bean的初始化。</p><h3 id="registerListeners"><a href="#registerListeners" class="headerlink" title="registerListeners"></a>registerListeners</h3><p>将所有<code>ApplicationListener</code>注册到<code>ApplicationEventMulticaster</code>中，然后将<code>earlyApplicationEvents</code>中定义的事件进行广播。</p><h3 id="finishBeanFactoryInitialization"><a href="#finishBeanFactoryInitialization" class="headerlink" title="finishBeanFactoryInitialization"></a>finishBeanFactoryInitialization</h3><p>实例化所有剩余的非懒加载的单例Bean，就是遍历所有的<code>beanName</code>，然后挨个调用<code>getBean(beanName)</code>。</p><h3 id="finishRefresh"><a href="#finishRefresh" class="headerlink" title="finishRefresh"></a>finishRefresh</h3><p>完成此上下文的刷新，调用<code>LifecycleProcessor</code>的<code>onRefresh()</code>方法并发布<code>ContextRefreshedEvent</code>。主要是对于有生命周期的Bean，按照分组，调用其<code>start()</code>方法。</p><h2 id="ApplicationContext使用"><a href="#ApplicationContext使用" class="headerlink" title="ApplicationContext使用"></a>ApplicationContext使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// beanFactory</span></span><br><span class="line">UserService userService = context.getBean(<span class="string">"userService"</span>, UserService.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件</span></span><br><span class="line">context.addApplicationListener(<span class="keyword">new</span> WalkListener());</span><br><span class="line">context.publishEvent(<span class="keyword">new</span> WalkEvent(<span class="keyword">new</span> User(<span class="string">"Jerry"</span>)));</span><br><span class="line">context.publishEvent(<span class="keyword">new</span> WalkEvent(<span class="keyword">new</span> User(<span class="string">"Peter"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// locale</span></span><br><span class="line">context.getMessage(<span class="string">"menu.edit"</span>, <span class="keyword">null</span>, <span class="string">"Edit"</span>, Locale.US);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jianshu.com/p/d75faa3ddce3" target="_blank" rel="noopener">Spring IOC ApplicationContext 源码分析</a></li><li><a href>Spring ApplicationContext源码分析</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;实现了除基本容器外的多个接口，提供了比&lt;code&gt;BeanFactory&lt;/c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Simple IoC开发日志：加载Bean</title>
    <link href="http://yoursite.com/2019/05/21/Simple-IoC%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97%EF%BC%9AgetBean/"/>
    <id>http://yoursite.com/2019/05/21/Simple-IoC开发日志：getBean/</id>
    <published>2019-05-21T10:43:00.000Z</published>
    <updated>2019-05-22T12:32:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-IoC实现"><a href="#Spring-IoC实现" class="headerlink" title="Spring IoC实现"></a>Spring IoC实现</h2><p>在之前加载注册<code>BeanDefinition</code>完成后，Spring已经存在一组<code>beanName</code> - &gt;<code>BeanDefinition</code>的映射了，接下来我们就可以根据名称或类型实例化并获取我们想要的Bean，而和这个实例化Bean相关的则是整个<code>BeanFactory</code>体系。接下来我们从<code>doGetBean()</code>这个方法开始分析起，这个方法涵盖了实例化Bean的总流程，大致步骤如下：</p><ol><li>将 alias name、FactoryBean name 转换为对应的<code>beanName</code></li><li>尝试从缓存中获取单例Bean</li><li>如果缓存中不存在，则从父类容器中加载</li><li>合并父类的属性，获取<code>RootBeanDefinition</code></li><li>加载所依赖的Bean</li><li>根据不同的<code>scope</code>实例化Bean</li><li>类型转换处理，如果传递的<code>requiredType</code>不为<code>null</code>，则需要检测所得到的Bean的类型是否与该<code>requiredType</code>一致。</li></ol><p>首先，如果名称是以<code>&amp;</code>开头的，则去掉<code>&amp;</code>，并且根据别名获取到<code>beanName</code>，然后尝试从单例缓存中获取Bean，这也正是解决循环依赖的关键，第一次获取时是没有效果的，继续往下走。此时判断是否发生原型模式的循环依赖，如果发生了，则抛出异常。接下来根据<code>beanName</code>从映射中获取到<code>BeanDefinition</code>（其实是<code>RootBeanDefinition</code>），然后优先加载所依赖的Bean（<code>depends-on</code>标签），然后根据不同的<code>scope</code>分别实例化Bean，完成<code>FactoryBean</code>的相关处理，最后做类型转换即可，不过目前不会去关心这个类型转换。下面开始分析比较重要的几个步骤。</p><h3 id="Bean实例化"><a href="#Bean实例化" class="headerlink" title="Bean实例化"></a>Bean实例化</h3><p>Bean会根据不同的<code>scope</code>采取不同的实例化策略，总共有五种<code>scope</code>：<code>singleton</code>、<code>prototype</code>、<code>request</code>、<code>session</code>、<code>global session</code>，其实比较常用的也就<code>singleton</code>和<code>prototype</code>，而<code>prototype</code>不需要解决循环依赖的问题，直接反射创建就好了，重点需要关注的是<code>singleton</code>的实例化过程。</p><p>接下来从<code>getSingleton()</code>这个方法进入Bean实例化的正戏。这个方法的开始可以看到用到了双重校验锁，因为多个线程可能在之前同时判断缓存中没有Bean，就都进入到了这里，但为了保证不重复实例化Bean（单例模式），在获取锁之后还会再判断一次是否能从缓存中获取，这里是要注意的。接下来通过<code>ObjectFactory#getObject()</code>方法开始实例化，里面会调用<code>doCreateBean()</code>方法，然后经历以下几个步骤：</p><ol><li>使用合适的实例化策略来创建新的实例：工厂方法、构造函数自动注入、简单初始化。此时Bean已经被创建出来了，只是没有进行属性填充和初始化</li><li>如果为单例模式、允许循环依赖且当前单例Bean正在被创建，那么将其加入到三级缓存<code>singletonFactories</code>中</li><li>属性填充</li><li>调用初始化方法<br> 4.1. 激活<code>Aware</code>方法，对特殊的Bean处理<br>4.2. 调用<code>postProcessBeforeInitialization()</code><br>4.3. 如果实现了<code>InitializingBean</code>接口，调用其<code>afterPropertiesSet()</code>方法；如果指定了<code>init-method</code>，则调用指定的<code>init-method</code><br>4.4. 调用<code>postProcessAfterInitialization()</code></li><li>注册Bean的销毁方法。与<code>InitializingBean</code>和<code>init-method</code>用于对象的自定义初始化工作相似，<code>DisposableBean</code>和<code>destroy-method</code>用于对象的自定义销毁工作。但这里并不是立刻执行，而是先注册，等到Spring容器关闭的时候才去调用，并且需要我们主动去告知Spring容器，对于<code>BeanFactory</code>容器需要调用<code>destroySingletons()</code>方法，对于<code>ApplicationContext</code>容器需要调用<code>registerShutdownHook()</code>方法。</li></ol><p>到这里，我们就获取到一个Bean了，下面对其中的一些细节进行解释。</p><h3 id="createBeanInstance"><a href="#createBeanInstance" class="headerlink" title="createBeanInstance"></a>createBeanInstance</h3><p>在这个方法中，完成了Bean的实例化（注意，此时还没填充属性等等），Spring提供了四种实例化策略：</p><ol><li><code>Supplier</code>回调：从<code>BeanDefinition</code>中获取<code>Supplier</code>对象，如果不为空，则调用<code>obtainFromSupplier()</code>方法完成Bean的初始化</li><li>工厂方法初始化</li><li>构造函数自动注入初始化</li><li>默认构造函数注入</li></ol><p>工厂方法初始化的工厂分为静态工厂和实例工厂，静态工厂的配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"eat"</span> <span class="attr">class</span>=<span class="string">"it.spring.liao.com.EatFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getInstance"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>实例工厂的配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"eatFactory"</span> <span class="attr">class</span>=<span class="string">"it.spring.liao.com.EatFactory "</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"eat"</span> <span class="attr">factory-bean</span>=<span class="string">"eatFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getInstance"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果配置了构造函数的自动注入或者配置了构造函数参数，则调用带参的构造函数去实例化Bean。因为一个类有多个构造函数，每个构造函数都有不同的构造参数，需要根据参数个数和类型确定最精确匹配的构造函数，这部分的源码还是十分复杂的。</p><p>对于带参构造函数或默认构造函数，都会先判断是否有覆盖方法，如果有的话则使用CGLIB创建代理对象，否则通过反射来创建Bean（核心代码其实就是<code>constructorToUse.newInstance()</code>）。</p><p>而对于工厂方法，其实也就是通过该<code>Method</code>反射创建Bean（核心代码其实就是<code>factoryMethod.invoke(factoryBean, args)</code>）。</p><h3 id="解决循环依赖"><a href="#解决循环依赖" class="headerlink" title="解决循环依赖"></a>解决循环依赖</h3><p>先看一下Spring中关于这块的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() <span class="comment">// 如果为单例模式</span></span><br><span class="line">&amp;&amp; <span class="keyword">this</span>.allowCircularReferences <span class="comment">// 允许循环依赖</span></span><br><span class="line">&amp;&amp; isSingletonCurrentlyInCreation(beanName));<span class="comment">// 当前单例 Bean 正在被创建</span></span><br><span class="line"><span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Eagerly caching bean '"</span> + beanName +</span><br><span class="line"><span class="string">"' to allow for resolving potential circular references"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个方法的调用发生在 createBeanInstance() 方法之后，也就是说这个 bean 其实已经创建出来了，但是没有进行属性填充和初始化，</span></span><br><span class="line"><span class="comment">// 但是此时已经可以根据对象引用定位到堆中该对象了，所以将该对象提前曝光出来，加入到三级缓存 singletonFactories 中</span></span><br><span class="line"><span class="comment">// 这里是为了后期避免循环依赖</span></span><br><span class="line">addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Spring IoC是通过三级缓存这么个机制解决循环依赖的问题的，每次在调用<code>createBeanInstance()</code>方法实例化一个Bean后，就将这个Bean加入到三级缓存<code>singletonFactories</code>中，而此时如果依赖的属性又依赖于自己，即发生循环依赖的话，那么就会直接从三级缓存中拿到这个Bean，并将其升级到二级缓存中去，如果后续还有循环依赖的话，直接从二级缓存就能获取到结果。需要注意的是，这时候的Bean仅仅只是实例化了出来，并没有进行属性填充等操作，只有当一切都完成后，才会将这个Bean升级到一级缓存中去。</p><h3 id="populateBean"><a href="#populateBean" class="headerlink" title="populateBean"></a>populateBean</h3><p>上面已经实例化出了Bean，并且加入到三级缓存中了，但是这个Bean还有许多事没做完，接下来第一件事就是对其进行属性填充，也就是<code>populateBean()</code>这个方法，它的大体步骤如下：</p><ol><li>获取Bean的属性值，也就是<code>PropertyValues</code></li><li>根据名称或类型解析依赖（此时并未注入到Bean中，仅仅将属性放到了`pvs中）</li><li>调用<code>applyPropertyValues()</code>真正注入属性：<br> 3.1. 检测属性值列表是否已经转换过，若转换过，则直接填充属性，无需再次转换<br>3.2. 遍历属性值列表<code>pvs</code>，解析原始值<code>originalValue</code>，得到解析值<code>resolvedValue</code><br>3.3. 对解析后的属性值<code>resolvedValue</code>进行类型转换<br>3.4. 将类型转换后的属性值设置到<code>PropertyValue</code>对象中，并将<code>PropertyValue</code>对象存入<code>deepCopy</code>集合中<br>3.5. 将<code>deepCopy</code>中的属性信息注入到Bean对象中</li></ol><p>首先讲讲根据名称或类型解析依赖。<code>autowireByName()</code>方法主要完成了以下几件事：</p><ol><li>获取Bean对象中的非简单属性名，即类型为对象类型的属性，<code>String</code>、<code>Enum</code>、<code>Date</code>、<code>URI/URL</code>、<code>Number</code>的继承类如<code>Integer/Long</code>、<code>byte/short/int</code>等基本类型、<code>Locale</code>、以上所有类型的数组形式。</li><li>遍历那些非简单属性名，如果容器中包含该名称对应的Bean，则递归实例化该Bean（也就是调用<code>getBean()</code>方法）</li><li>将递归获取到的Bean存入到属性值列表<code>PropertyValues</code>中</li><li>注册依赖（就是建立映射关系）</li></ol><p><code>autowireByType()</code>方法比<code>autowireByName()</code>方法复杂一些，因为相同类型的Bean可能有多个，它最核心的思路如下：</p><ol><li>根据类型查找所有合适的候选Bean。比如说我们的成员变量是<code>Dao</code>类型的，那么此时<code>MongoDao</code>和<code>MySQLDao</code>这两个Bean可能都属于合适的候选项，因为它们都实现了<code>Dao</code>接口。</li><li>如果没有找到合适的候选Bean，并且<code>autowire</code>的<code>require</code>属性为<code>true</code>，则直接抛出异常</li><li>当候选者不唯一时，则依次根据<code>Primary</code>、<code>Priority</code>决定最终的候选Bean（此时拿到了<code>autowiredBeanName</code>和<code>instanceCandidate</code>）</li><li>当候选者唯一时，可以直接决定候选Bean（此时拿到了<code>autowiredBeanName</code>和<code>instanceCandidate</code>）</li><li>候选Bean可能并没有实例化，也就是<code>instanceCandidate</code>仅仅为<code>Class</code>类型，比如说是<code>MySQLDao.class</code>，此时根据<code>beanFactory.getBean(autowiredBeanName)</code>方法实例化该Bean</li><li>返回已实例化好的Bean</li></ol><p>接下来就和<code>autowireByName()</code>方法一样了，将获取到的Bean存入到属性值列表<code>PropertyValues</code>中，并且注册这个依赖关系。此时，<code>&lt;property&gt;</code>标签表示的属性和自动注入的属性都已经解析到<code>PropertyValues</code>中了，调用<code>applyPropertyValues()</code>开始真正的属性注入，该方法核心步骤如下：</p><ol><li>将<code>ref</code>（在之前解析标签时将其封装成了<code>RuntimeBeanReference</code>）解析为具体的对象，将<code>&lt;list&gt;</code>标签转换为<code>List</code>对象，还会解析<code>&lt;set/&gt;</code>、<code>&lt;map/&gt;</code>、<code>&lt;array/&gt;</code>等标签。</li><li>对属性值的类型进行转换，比如将<code>String</code>类型的属性值<code>&quot;123&quot;</code>转换为<code>Integer</code>类型的<code>123</code></li><li>反射设置<code>PropertyValues</code>中的所有属性</li></ol><p>至此，属性值已经注入到Bean中了。</p><h3 id="initializeBean"><a href="#initializeBean" class="headerlink" title="initializeBean"></a>initializeBean</h3><p>填充完属性，接下来就是调用初始化方法，该方法的步骤如下：</p><ol><li>激活<code>Aware</code>方法：Bean可以实现<code>Aware</code>接口，从而对当前环境进行感知（就是实现了<code>setXXX()</code>方法）。在这里，会针对<code>BeanNameAware</code>、<code>BeanClassLoaderAware</code>、<code>BeanFactoryAware</code>三种<code>Aware</code>接口进行判断，将一些值设置到当前Bean中。</li><li>调用<code>postProcessBeforeInitialization()</code>方法</li><li>调用<code>invokeInitMethods()</code>方法：<br> 3.1. 如果Bean实现了<code>InitializingBean</code>接口，那么会先调用该接口的<code>afterPropertiesSet()</code>方法<br>3.2. 检查是否指定了<code>init-method</code>，如果指定了则通过反射机制调用<code>init-method</code>方法</li><li>调用<code>postProcessAfterInitialization()</code>方法</li></ol><p>至此，几个核心步骤就都介绍完了。</p><h2 id="Simple-IoC实现"><a href="#Simple-IoC实现" class="headerlink" title="Simple IoC实现"></a>Simple IoC实现</h2><p>Simple IoC的实现大体思路上与Spring IoC一致，但是尚不支持<code>&lt;list/&gt;</code>等一些集合标签，并且不像Spring实现了一套类型转换体系，这里直接使用了<code>apache</code>的<code>BeanUtils</code>完成类型转换相关的操作。除此之外，暂时还未实现<code>initializeBean()</code>相关的逻辑。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>第一个测试是模拟登陆接口的场景，分为<code>Controller</code>、<code>Service</code>、<code>Dao</code>三层，XML配置文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-2.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loginController"</span> <span class="attr">class</span>=<span class="string">"cn.hecenjie.simpleioc.tests.objects.login.LoginController"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginService"</span> <span class="attr">ref</span>=<span class="string">"loginService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loginService"</span> <span class="attr">class</span>=<span class="string">"cn.hecenjie.simpleioc.tests.objects.login.LoginServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.hecenjie.simpleioc.tests.objects.login.UserDao"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResourceLoader resourceLoader = <span class="keyword">new</span> FileSystemResourceLoader();</span><br><span class="line">    Resource resource = resourceLoader.getResource(<span class="string">"C:\\Users\\canjie\\Desktop\\login.xml"</span>);</span><br><span class="line">    DefaultListableBeanFactory factory = <span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line">    BeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(factory);</span><br><span class="line">    beanDefinitionReader.loadBeanDefinitions(resource);</span><br><span class="line">    LoginController loginController = (LoginController) factory.getBean(<span class="string">"loginController"</span>);</span><br><span class="line">    assertEquals(loginController.login(<span class="string">"Lihua"</span>, <span class="string">"123456789"</span>), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二个测试是针对循环依赖问题的，XML配置文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-2.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.hecenjie.simpleioc.tests.objects.persons.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Lihua"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idCard"</span> <span class="attr">ref</span>=<span class="string">"idCard"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"idCard"</span> <span class="attr">class</span>=<span class="string">"cn.hecenjie.simpleioc.tests.objects.persons.IdCard"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"441301188875468912"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"owner"</span> <span class="attr">ref</span>=<span class="string">"person"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCyclicDependence</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ResourceLoader resourceLoader = <span class="keyword">new</span> FileSystemResourceLoader();</span><br><span class="line">    Resource resource = resourceLoader.getResource(<span class="string">"C:\\Users\\canjie\\Desktop\\persons.xml"</span>);</span><br><span class="line">    DefaultListableBeanFactory factory = <span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line">    BeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(factory);</span><br><span class="line">    beanDefinitionReader.loadBeanDefinitions(resource);</span><br><span class="line">    Person person = (Person) factory.getBean(<span class="string">"person"</span>);</span><br><span class="line">    IdCard idCard = (IdCard) factory.getBean(<span class="string">"idCard"</span>);</span><br><span class="line">    assertEquals(person.getName(), <span class="string">"Lihua"</span>);</span><br><span class="line">    assertEquals(person.getAge(), <span class="number">18</span>);</span><br><span class="line">    assertEquals(person.getIdCard(), idCard);</span><br><span class="line">    assertEquals(idCard.getId(), <span class="number">441301188875468912L</span>);</span><br><span class="line">    assertEquals(idCard.getOwner(), person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-IoC实现&quot;&gt;&lt;a href=&quot;#Spring-IoC实现&quot; class=&quot;headerlink&quot; title=&quot;Spring IoC实现&quot;&gt;&lt;/a&gt;Spring IoC实现&lt;/h2&gt;&lt;p&gt;在之前加载注册&lt;code&gt;BeanDefinition&lt;/c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Simple IoC开发日志：注册BeanDefinitions</title>
    <link href="http://yoursite.com/2019/05/19/Simple-IoC%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97%EF%BC%9ABeanDefinition%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/05/19/Simple-IoC开发日志：BeanDefinition加载/</id>
    <published>2019-05-19T14:29:00.000Z</published>
    <updated>2019-05-20T08:04:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-IoC实现"><a href="#Spring-IoC实现" class="headerlink" title="Spring IoC实现"></a>Spring IoC实现</h2><p>在之前已经介绍过Spring IoC对资源的抽象了，也就是<code>Resource</code>接口。当我们加载了指定的资源后，接下来需要做的就是将资源（也就是XML文件）解析成<code>Document</code>实例，并解析成<code>BeanDefinition</code>然后注册。这个过程的整体流程如下：</p><ol><li><code>loadBeanDefinitions(Resource resource)</code>作为方法入口。</li><li><code>doLoadBeanDefinitions(InputSource inputSource, Resource resource)</code>方法实现了真正的加载逻辑，它首先根据XML获取<code>Document</code>实例，然后根据<code>Document</code>实例注册Bean信息。<br> 2.1. <code>doLoadDocument()</code>方法根据XML获取<code>Document</code>实例，其中会牵扯到获取验证模式和错误处理等过程。<br> 2.2. <code>registerBeanDefinitions()</code>遍历XML的每一个节点并注册它们的<code>BeanDefinition</code>。</li></ol><p>接下来就上面获取<code>Document</code>实例和注册<code>BeanDefinition</code>进行分析。</p><h3 id="获取Document"><a href="#获取Document" class="headerlink" title="获取Document"></a>获取Document</h3><p>解析XML有两种方式，一种是DOM解析，另一种则是SAX解析，关于这两个解析方式在网上也有比较充足的资料，就不在这赘述了。在这一个过程还有两个方面是需要关心的，一个是验证模式，另一个是错误处理（还有一个是Spring实现的<code>EntityResolver</code>，自定义了验证文件的获取方式，在本地建立了一个映射而不需要从网络中获取）。</p><p>首先，验证模式同样也有两种，一种是DTD验证模式，另一种是XSD验证模式。因此，在这里需要根据XML文件中的一些信息来探测决定具体使用哪种验证模式，比如说如果内容中包含<code>DOCTYPE</code>则肯定为DTD验证模式，而如果探测不出的话，最终会使用XSD验证模式。错误处理就是当加载<code>Document</code>发生错误时需要做出的反应，简单的实现就是输出错误日志。当以上两个都准备好了后，就先通过<code>DocumentBuilderFactory</code>创建一个<code>DocumentBuilder</code>，再调用<code>DocumentBuilder</code>的<code>parse()</code>方法直接解析并返回一个<code>Document</code>实例即可。</p><h3 id="注册BeanDefinition"><a href="#注册BeanDefinition" class="headerlink" title="注册BeanDefinition"></a>注册BeanDefinition</h3><p>注册<code>BeanDefinition</code>实际上就是通过上面获取到的<code>Document</code>的根节点开始逐个遍历子节点（要先判断根节点是否使用的默认命名空间），然后根据<code>&lt;import/&gt;</code>、<code>&lt;alias/&gt;</code>、<code>&lt;bean/&gt;</code>、<code>&lt;beans/&gt;</code>这四种标签分别进行解析，其中<code>&lt;beans/&gt;</code>标签的处理是一个递归的过程，而<code>&lt;bean/&gt;</code>标签的处理则是需要重点关注的，在这个过程中主要分为两步：解析出<code>BeanDefinition</code>并且完成注册。</p><h2 id="Simple-IoC实现"><a href="#Simple-IoC实现" class="headerlink" title="Simple IoC实现"></a>Simple IoC实现</h2><h3 id="获取Document-1"><a href="#获取Document-1" class="headerlink" title="获取Document"></a>获取Document</h3><p>目前仅支持XSD格式的验证，并且没有实现<code>EntityResolver</code>，也就是说无法根据自定义的策略从本地拿到验证文件，还是默认的从网络中获取。</p><h3 id="注册BeanDefinition-1"><a href="#注册BeanDefinition-1" class="headerlink" title="注册BeanDefinition"></a>注册BeanDefinition</h3><p>在目前的实现中，并没有像Spring IoC一样支持四种标签的解析，这里只解析了<code>&lt;bean/&gt;</code>标签。之后，需要重点关注的一个方法就是<code>parseBeanDefinitionElement()</code>，这是解析<code>&lt;bean/&gt;</code>标签的核心逻辑，主要完成了从<code>&lt;bean/&gt;</code>标签的<code>id</code>属性和<code>name</code>属性还有一些别的属性以及子元素中获取到值并组装成一个<code>BeanDefinition</code>（实际上还会包装一层<code>BeanDefinitionHolder</code>，其中保存了<code>beanName</code>和<code>aliases</code>），下面对这一部分的细节进行分析。</p><h4 id="parseBeanDefinitionElement"><a href="#parseBeanDefinitionElement" class="headerlink" title="parseBeanDefinitionElement"></a>parseBeanDefinitionElement</h4><p>这个方法主要完成以下这些事：</p><ol><li>解析出<code>&lt;bean&gt;</code>标签中的<code>id</code>属性和<code>name</code>属性，在Spring中是以<code>,</code>作为分隔符取得多个别名，但在这里的实现中只考虑一种别名的情况，也就是没有使用<code>,</code>进行分割。</li><li>优先使用id作为<code>beanName</code>，但如果并没有设置<code>id</code>属性的话，就使用第一个别名作为<code>beanName</code>，那么在这里就只有唯一的一个别名，当id没设置时它就是<code>beanName</code>。</li><li>检查<code>beanName</code>和别名的唯一性，如果不唯一，则抛出异常，唯一的话则加入到集合中去。（注意，别名也是需要唯一的）</li><li>解析别的属性以及子元素，开始构造<code>AbstractBeanDefinition</code>。上面几步只是对名称做一些解析，这一步的工作量则相对要大很多，下面是一些比较常见的属性：<br> 4.1. 解析<code>class</code>属性，最重要的了<br>4.2. 解析<code>parent</code>属性，未实现<br>4.3. 解析<code>scope</code>属性<br>4.4. 解析<code>autowire</code>属性<br>4.5. 解析<code>init-method</code>属性<br>4.6. 解析<code>destroy-method</code>属性<br>4.7. 解析<code>factory-bean</code>属性<br>4.8. 解析<code>factory-method</code>属性<br>4.9. 解析<code>&lt;lookup-method/&gt;</code>子元素，未实现<br>4.10. 解析<code>&lt;replaced-method/&gt;</code>子元素，未实现<br>4.11. 解析<code>&lt;property/&gt;</code>子元素，这一步也很重要，它将属性名和属性值封装到了<code>PropertyValue</code>中，并且用<code>PropertyValues</code>封装所有属性（也就是每个<code>BeanDefinition</code>都有一个<code>PropertyValues</code>类型的成员变量）。<br>4.12. 解析<code>&lt;constructor-arg/&gt;</code>子元素，未实现</li><li>此时已经构造出了一个相对完整的<code>BeanDefinition</code>了，这时候将其和<code>beanName</code>与别名一起封装成<code>BeanDefinitionHolder</code>对象。</li><li>注册<code>beanName</code> -&gt; <code>BeanDefinition</code>以及<code>alias</code> -&gt; <code>beanName</code>的映射关系（个人认为，这正是IoC的本质所在，通过一个映射表维护一个名称到<code>BeanDefinition</code>的关系，而这个<code>BeanDefinition</code>中封装了这个Bean的各种信息）。这里要注意的是，在注册<code>alias</code> -&gt; <code>beanName</code>的映射关系时，Spring考虑了别名循环指向的问题，它是通过递归来进行判断的。</li><li>此时，这个<code>BeanDefinition</code>已经注册成功，可以等待使用了</li></ol><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>针对根据XML获取<code>Document</code>实例并注册<code>BeanDefinition</code>的过程做一些简单的测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoadBeanDefinitions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResourceLoader resourceLoader = <span class="keyword">new</span> FileSystemResourceLoader();</span><br><span class="line">    Resource resource = resourceLoader.getResource(<span class="string">"C:\\Users\\canjie\\Desktop\\simple.xml"</span>);</span><br><span class="line">    BeanDefinitionRegistry registry = <span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line">    BeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(registry);</span><br><span class="line">    assertEquals(beanDefinitionReader.loadBeanDefinitions(resource), <span class="number">2</span>);</span><br><span class="line">    assertEquals(((DefaultListableBeanFactory) registry).getBeanDefinition(<span class="string">"first"</span>).getBeanClassName(),</span><br><span class="line">            <span class="string">"beans.First"</span>);</span><br><span class="line">    assertEquals(((DefaultListableBeanFactory) registry).getBeanDefinition(<span class="string">"second"</span>).getBeanClassName(),</span><br><span class="line">            <span class="string">"beans.Second"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-IoC实现&quot;&gt;&lt;a href=&quot;#Spring-IoC实现&quot; class=&quot;headerlink&quot; title=&quot;Spring IoC实现&quot;&gt;&lt;/a&gt;Spring IoC实现&lt;/h2&gt;&lt;p&gt;在之前已经介绍过Spring IoC对资源的抽象了，也就是&lt;
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="IoC" scheme="http://yoursite.com/tags/IoC/"/>
    
  </entry>
  
  <entry>
    <title>Simple IoC开发日志：资源加载</title>
    <link href="http://yoursite.com/2019/05/19/Simple-IoC%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97%EF%BC%9A%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/05/19/Simple-IoC开发日志：资源加载/</id>
    <published>2019-05-19T13:51:40.000Z</published>
    <updated>2019-05-19T14:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-IoC实现"><a href="#Spring-IoC实现" class="headerlink" title="Spring IoC实现"></a>Spring IoC实现</h2><p>Spring对资源文件和资源的加载都做了统一的抽象，以下是资源文件的继承体系：<br><img src="http://blog.default.nanwulife.com/spring-201805091003.jpg" alt></p><p>其中，顶层接口<code>InputStreamSource</code>只包含一个<code>getInputStream()</code>方法用于返回指定资源的<code>InputStream</code>；而<code>Resource</code>是对资源的一个抽象，里面提供了判断资源是否存在、资源是否可读、资源大小等常见接口，并且大部分接口由抽象子类<code>AbstractResource</code>提供了默认实现，而一些方法则由具体的子类如<code>FileSystemResource</code>、<code>ClassPathResource</code>等覆写，以满足特定的场景需求。</p><p>接下来看看Spring对资源加载的统一抽象，同样从它的继承体系说起：<br><img src="http://blog.default.nanwulife.com/FileSystemResourceLoader.png" alt></p><p>与<code>AbstractResource</code>相似，<code>DefaultResourceLoader</code>是<code>ResourceLoader</code>的默认实现。其中<code>getResource()</code>方法是其核心（两个子类都没覆盖该方法），它根据方法参数<code>location</code>的内容来决定到底是返回<code>ClassPathResource</code>还是<code>FileSystemResource</code>还是<code>Resource</code>其它的一些子类。由于在默认的实现策略中，凡是以<code>/</code>开头的都会返回<code>ClassPathContextResource</code>类型的资源，但对于<code>/user/hecenjie/test.xml</code>这样的路径我们更加希望是<code>FileSystemResource</code>类型的资源，因此在子类<code>FileSystemResourceLoader</code>中覆写了相关方法，使之可以从文件系统中获取资源；而另一个子类<code>ClassRelativeResourceLoader</code>则扩展了功能，可以根据给定的Class所在包或者所在包的子包下加载资源。</p><p><code>ResourceLoader</code>的另一个重要实现是<code>ResourcePatternResolver</code>，与上面的<code>ResourceLoader</code>实现类不同的是，它支持根据指定的资源路径匹配模式每次返回多个<code>Resource</code>实例（也就是<code>Resource</code>数组），并且它也新增了一种新的协议前缀<code>classpath*:</code>，该前缀表示可以加载多个jar包中相同的资源文件，而<code>classpath:</code>只能加载找到的第一个文件。</p><p><code>PathMatchingResourcePatternResolver</code>除了支持<code>ResourceLoader</code>和<code>ResourcePatternResolver</code>新增的<code>classpath*:</code>前缀外，还支持Ant风格的路径匹配模式（类似于<code>**/*.xml</code>）。</p><h2 id="Simple-IoC实现"><a href="#Simple-IoC实现" class="headerlink" title="Simple IoC实现"></a>Simple IoC实现</h2><p>目前自己实现的IoC容器中，只实现了文件系统的资源与加载抽象，以下为它们各自的类图：<br><img src="http://blog.default.nanwulife.com/FileSystemResource.png" alt> </p><p><img src="http://blog.default.nanwulife.com/FileSystemResourceLoader1.png" alt></p><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><p>我们可以尝试写一些简单的单元测试从文件系统中加载指定的资源，并对该资源做一些基本操作。首先，准备一个<code>test.xml</code>文件，然后编写以下测试方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileSystemResource</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Resource resource = <span class="keyword">new</span> FileSystemResource(<span class="string">"C:\\Users\\canjie\\Desktop\\test.xml"</span>);</span><br><span class="line">    assertTrue(resource.exists());</span><br><span class="line">    assertEquals(resource.contentLength(), <span class="number">992</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileSystemResourceLoader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ResourceLoader resourceLoader = <span class="keyword">new</span> FileSystemResourceLoader();</span><br><span class="line">    Resource resource = resourceLoader.getResource(<span class="string">"C:\\Users\\canjie\\Desktop\\test.xml"</span>);</span><br><span class="line">    assertTrue(resource.exists());</span><br><span class="line">    assertEquals(resource.contentLength(), <span class="number">992</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-IoC实现&quot;&gt;&lt;a href=&quot;#Spring-IoC实现&quot; class=&quot;headerlink&quot; title=&quot;Spring IoC实现&quot;&gt;&lt;/a&gt;Spring IoC实现&lt;/h2&gt;&lt;p&gt;Spring对资源文件和资源的加载都做了统一的抽象，以下是资
      
    
    </summary>
    
    
  </entry>
  
</feed>
