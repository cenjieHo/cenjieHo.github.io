<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cenjie&#39;s Blog</title>
  
  <subtitle>水木今山的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-06T12:23:03.745Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>水木今山</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ArrayList源码分析</title>
    <link href="http://yoursite.com/2018/09/06/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/09/06/ArrayList源码分析/</id>
    <published>2018-09-06T03:00:10.000Z</published>
    <updated>2018-09-06T12:23:03.745Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList简介（jdk1-8）"><a href="#ArrayList简介（jdk1-8）" class="headerlink" title="ArrayList简介（jdk1.8）"></a>ArrayList简介（jdk1.8）</h2><p>ArrayList就是动态数组，其容量能够自动增长。如下为ArrayList的继承体系结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>ArrayList实现了List<e>, RandomAccess, Cloneable, java.io.Serializable接口，且不是线程安全的，因此只能用在单线程环境下。</e></p><a id="more"></a><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>ArrayList主要有elementData和size两个属性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure></p><p>elementData数组是用来存储元素的，而size表示ArrayList中已有的元素数量（不等于elementData.length）。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>ArrayList共有三种构造方法：</p><ul><li>指定容量的构造函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span> + initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法接受一个初始化容量来初始化底层数组elementData，如果初始化容量值为0则将其初始化为一个空的常量数组：<code>private static final Object[] EMPTY_ELEMENTDATA = {};</code> ，如果值小于零，则抛出异常。</p><ul><li>无参构造函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>此方法中的<strong>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</strong>区别于<strong>EMPTY_ELEMENTDATA</strong>，通过将数组设为前者，在添加元素的时候会将容量设置为默认值10。</p><ul><li>Collection作为参数的构造函数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>此方法接受一个Collection，并且将其转换为数组赋给elementData，如果被赋值后的elementData长度为0，则将空的常量数组赋值给它。相反，则再判断Collection是否转化为了Object数组，如果没有则将其进行转化。</p><p>这里用到了Arrays.copyof()方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class="line">        ? (T[]) <span class="keyword">new</span> Object[newLength]</span><br><span class="line">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出，该方法构造了一个新的长度为newLength的Object类型数组，并且将原数组复制到新的数组中 。而此处的复制用了System.arraycopy()方法，该方法被标记了native，调用了系统的C/C++代码，可以在openJDK中查看到源码。</p><h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法可以得到指定下标的元素，先对下标进行越界检查，然后再通过一个间接方法获取到elementData的index下标的元素。</p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法用于设置指定下标的元素，并将该下标原有的元素返回。</p><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><p>add方法比较复杂，也是ArrayList核心所在，有下面两种形式：</p><ul><li>将元素加入到列表末尾<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 此处的calculateCapacity正是与上文DEFAULTCAPACITY_EMPTY_ELEMENTDATA常量相照应的方法。如果ArrayList是默认构造函数构造的话，在添加元素的时候此方法将返回DEFAULT_CAPACITY也就是10。而size已经大于10的情况，该方法便也失去了意义。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从源码可以看出，当需要的容量大于elementData数组的长度时，就需要对其进行扩张。而扩张的大小则根据if条件判断。<strong>一般情况下，会将长度扩张为原来的1.5倍</strong>，但是当1.5倍仍小于所需的容量时，会将长度直接设为所需容量。而新容量如果大于最大数组长度MAX_ARRAY_SIZE ，则根据所需容量分配Integer.MAX_VALUE或者MAX_ARRAY_SIZE。</p><p>ensureExplicitCapacity方法的第一行语句<code>modCount++;</code>的作用是记录修改次数。我们知道，ArrayList不是线程安全的，因此在迭代ArrayList的时候如果有其它线程修改了内容，那么就会导致modCount与迭代器初始化时的modCount不同，从而抛出异常ConcurrentModificationException。说白了，就是<strong>防止一个线程正在迭代遍历，另一个线程修改了这个列表的结构。</strong></p><ul><li>将元素添加到指定位置上</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此方法中，先对index进行越界检查，然后再进行扩容。这里用了System.arraycopy方法，j将包括index在内的之后的所有元素均向右移动一位，再将要添加的元素放置在elementData的index下标下。</p><h2 id="addAll"><a href="#addAll" class="headerlink" title="addAll"></a>addAll</h2><ul><li>将集合中的元素全部添加到ArrayList末尾</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将Collection对象转化为Object数组后，先根据其长度进行扩容，再同样利用System.arraycopy函数把数组中的所有元素添加到elementData数组末尾。</p><ul><li>将集合中的元素全部添加到ArrayList指定位置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                         numMoved);</span><br><span class="line"></span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理与<code>add(int index, E element)</code>类似，都是通过将已有元素右移实现，此处将不再阐述。</p><h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><ul><li>移除指定下标上的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，移除操作是将要移除的元素后面的所有元素均向左移动一位，并将size数减小实现的。此方法将返回要移除的元素。</p><ul><li>移除指定的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先找到指定元素的下标，再根据下标进行移除。指定的元素有可能为null，而不为null的情况下将根据元素内容进行比较，因此将分为两种情况遍历数组。fastRemove的实现与remove(int index)基本一致，区别在于fastRemove不需要对下标进行检查，也不返回被移除的元素。</p><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由源码可以看出，indexOf和lastIndexOf与<code>remove(Object o)</code>方法类似，并且找到元素时返回下标，没找到时返回-1，而contains方法正是通过indexOf判断是否找到元素实现的。</p><h2 id="ArrayList总结"><a href="#ArrayList总结" class="headerlink" title="ArrayList总结"></a>ArrayList总结</h2><ul><li>ArrayList底层是通过数组实现的，随机访问速度快，但插入和移除由于要移动大量的元素，所以性能较差。</li><li>ArrayList不是线程安全的，在多线程环境下，通过modCount域检测是否出现问题。</li><li>ArrayList每次扩容为原本的1.5倍，若依然不够，则会直接设置为所需容量大小。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ArrayList简介（jdk1-8）&quot;&gt;&lt;a href=&quot;#ArrayList简介（jdk1-8）&quot; class=&quot;headerlink&quot; title=&quot;ArrayList简介（jdk1.8）&quot;&gt;&lt;/a&gt;ArrayList简介（jdk1.8）&lt;/h2&gt;&lt;p&gt;ArrayList就是动态数组，其容量能够自动增长。如下为ArrayList的继承体系结构：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractList&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt;, &lt;span class=&quot;title&quot;&gt;RandomAccess&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Cloneable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;java&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ArrayList实现了List&lt;e&gt;, RandomAccess, Cloneable, java.io.Serializable接口，且不是线程安全的，因此只能用在单线程环境下。&lt;/e&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JDK源码阅读" scheme="http://yoursite.com/categories/JDK%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="util" scheme="http://yoursite.com/categories/JDK%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/util/"/>
    
    
      <category term="arraylist" scheme="http://yoursite.com/tags/arraylist/"/>
    
      <category term="jdk" scheme="http://yoursite.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>浅谈对尾递归的理解</title>
    <link href="http://yoursite.com/2018/08/22/%E6%B5%85%E8%B0%88%E5%AF%B9%E5%B0%BE%E9%80%92%E5%BD%92%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/08/22/浅谈对尾递归的理解/</id>
    <published>2018-08-22T03:06:04.000Z</published>
    <updated>2018-08-22T03:46:53.860Z</updated>
    
    <content type="html"><![CDATA[<p>今天在做《剑指Offer》第十题时，发现了一个用尾递归的解法，由于之前对于尾递归并没有太多了解，于是查阅了一些资料，在此对其进行一个简单的总结。关于其它题目的题解与笔记，感兴趣的朋友可以到我的Github或个人博客上看看：<a href="https://github.com/cenjieHo/CodingInterviews/blob/master/README.md" target="_blank" rel="noopener">剑指Offer笔记</a>  <a href="http://hecenjie.cn/" target="_blank" rel="noopener">Cenjie’s Blog</a> ，</p><p>以下是正文。</p><a id="more"></a><h3 id="递归本质"><a href="#递归本质" class="headerlink" title="递归本质"></a>递归本质</h3><p>递归的本质是自己调用自己，因为是嵌套调用，所以<strong>栈帧无法回收</strong>，在递归调用的层级太多时，往往会引发调用栈溢出，也就是<strong>内存溢出</strong>。</p><h3 id="尾递归概述"><a href="#尾递归概述" class="headerlink" title="尾递归概述"></a>尾递归概述</h3><p>尾递归本质与递归并无区别，只不过是递归的一种特殊写法。尾递归要求递归调用是整个函数体中最后执行的语句且它的返回值不属于表达式的一部分，例如 <code>return 3f(n)</code>或者<code>return f(n)+f(n-1)</code> 都是不允许的。</p><p>由于尾递归也是一种递归，因此<strong>这种写法本身并不会有任何的优化效果，内存依旧会溢出</strong>，只不过一些编译器中会加入对尾递归的优化机制，在编译代码时自动根据尾递归的特性对其进行优化。</p><h3 id="如何优化尾递归"><a href="#如何优化尾递归" class="headerlink" title="如何优化尾递归"></a>如何优化尾递归</h3><p>因为在递归调用自身的时候，这一层函数已经没有要做的事情了，虽然被递归调用的函数是在当前的函数里，但是他们之间的关系已经在传参的时候了断了，也就是这一层函数的所有变量什么的都不会再被用到了，所以当前函数虽然没有执行完，不能弹出栈，但它确实已经可以出栈了，这是一方面。</p><p>另一方面，正因为调用的是自身，所以需要的存储空间是一模一样的，那干脆重新刷新这些空间给下一层利用就好了，不用销毁再另开空间。</p><p>因此，为尾递归进行优化主要分两个步骤：<br>1、写成尾递归的形式。<br>2、编译器遇到此形式时自动为其优化。</p><p>而在<a href="https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3?tpId=13&amp;tqId=11160&amp;tPage=1&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">第十题：斐波那契数列</a>中，由于Java没有对尾递归进行优化，因此与使用普通递归并无太大区别，依然会产生内存溢出的问题。</p><p>本文参考：<a href="https://www.cnblogs.com/bellkosmos/p/5280619.html" target="_blank" rel="noopener">https://www.cnblogs.com/bellkosmos/p/5280619.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在做《剑指Offer》第十题时，发现了一个用尾递归的解法，由于之前对于尾递归并没有太多了解，于是查阅了一些资料，在此对其进行一个简单的总结。关于其它题目的题解与笔记，感兴趣的朋友可以到我的Github或个人博客上看看：&lt;a href=&quot;https://github.com/cenjieHo/CodingInterviews/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;剑指Offer笔记&lt;/a&gt;  &lt;a href=&quot;http://hecenjie.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cenjie’s Blog&lt;/a&gt; ，&lt;/p&gt;
&lt;p&gt;以下是正文。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>暑期学习记录（2018）</title>
    <link href="http://yoursite.com/2018/07/31/%E6%9A%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%882018%EF%BC%89/"/>
    <id>http://yoursite.com/2018/07/31/暑期学习记录（2018）/</id>
    <published>2018-07-31T14:29:40.000Z</published>
    <updated>2018-09-02T11:44:20.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="七月份总结"><a href="#七月份总结" class="headerlink" title="七月份总结"></a>七月份总结</h1><p>七月十八号从老家回来，正式开始了暑期的学习计划，共十二天的学习时间，掌握了如下内容：</p><ul><li>SSM框架的使用</li><li>查找与图等基础数据结构与算法</li></ul><p>八月份要完成二手平台的前台功能，并进行测试与上线，域名要赶紧备案好。其中模态的异步传输已经知道该如何解决，上传商品页面的多图上传功能依然令人头疼。因此，前十天先完成在看的企业级电商项目，后二十天再将二手平台搞定。除此之外，《算法》也要在月底之前看完，最好能抽时间出来总结一下。</p><a id="more"></a><h1 id="八月份总结"><a href="#八月份总结" class="headerlink" title="八月份总结"></a>八月份总结</h1><p>前十天刷完了SSM电商项目，粗略地看完了《算法》，后二十天完成了二手平台的项目，并且刷了共十七道《剑指Offer》的题目，对解算法题稍微有了一些感觉。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>计划大致都完成了，但是学校项目花的时间太久，效率不够，导致许多本应完成的附加内容没完成，并且关于框架的使用还不够熟练，后续将多写几篇博客来巩固自己所学的内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;七月份总结&quot;&gt;&lt;a href=&quot;#七月份总结&quot; class=&quot;headerlink&quot; title=&quot;七月份总结&quot;&gt;&lt;/a&gt;七月份总结&lt;/h1&gt;&lt;p&gt;七月十八号从老家回来，正式开始了暑期的学习计划，共十二天的学习时间，掌握了如下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSM框架的使用&lt;/li&gt;
&lt;li&gt;查找与图等基础数据结构与算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;八月份要完成二手平台的前台功能，并进行测试与上线，域名要赶紧备案好。其中模态的异步传输已经知道该如何解决，上传商品页面的多图上传功能依然令人头疼。因此，前十天先完成在看的企业级电商项目，后二十天再将二手平台搞定。除此之外，《算法》也要在月底之前看完，最好能抽时间出来总结一下。&lt;/p&gt;
    
    </summary>
    
      <category term="日志" scheme="http://yoursite.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="日志" scheme="http://yoursite.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms(4th) 读书笔记</title>
    <link href="http://yoursite.com/2018/07/04/Algorithms-4th-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/07/04/Algorithms-4th-读书笔记/</id>
    <published>2018-07-04T14:33:54.000Z</published>
    <updated>2018-07-12T09:58:25.007Z</updated>
    
    <content type="html"><![CDATA[<p>《算法》第四版学习过程中的代码记录，更新中<br><a href="https://github.com/cenjieHo/Algorithms" target="_blank" rel="noopener">Github地址</a><br><a id="more"></a></p><p>本书所用到的所有测试数据: <a href="http://algs4.cs.princeton.edu/code/algs4-data.zip" target="_blank" rel="noopener">algs4-data.zip</a><br><br>本书所依赖的jar包: <a href="http://algs4.cs.princeton.edu/code/algs4.jar" target="_blank" rel="noopener">algs4.jar</a></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="初级排序"><a href="#初级排序" class="headerlink" title="初级排序"></a>初级排序</h3><p>测试数据: tinyUF.txt mediumUF.txt tiny.txt</p><ul><li>选择排序</li><li>插入排序</li></ul><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>测试数据: tinyUF.txt mediumUF.txt tiny.txt</p><ul><li>自顶向下的归并排序</li><li>自底向上的归并排序</li></ul><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>测试数据: tinyUF.txt mediumUF.txt tiny.txt</p><ul><li>快速排序</li><li>三向切分的快速排序</li></ul><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><p>测试数据: m1.txt m2.txt m3.txt tinyBatch.txt</p><ul><li>基于堆的优先队列</li><li>索引优先队列</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《算法》第四版学习过程中的代码记录，更新中&lt;br&gt;&lt;a href=&quot;https://github.com/cenjieHo/Algorithms&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github地址&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java核心技术卷Ⅰ 读书笔记</title>
    <link href="http://yoursite.com/2018/06/27/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7%E2%85%A0-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/06/27/Java核心技术卷Ⅰ-读书笔记/</id>
    <published>2018-06-27T13:33:01.000Z</published>
    <updated>2018-07-04T14:51:40.225Z</updated>
    
    <content type="html"><![CDATA[<p>本文是根据我很久之前读的《Java核心技术卷Ⅰ》第十版而自己总结出的读书笔记+思维导图，包含有三、四、六、七章，主要梳理了章节的知识点，并贴出了书内的样例代码。</p><ul><li><p><a href="https://blog.csdn.net/qq_38283262/article/details/79111526" target="_blank" rel="noopener">《java核心技术卷Ⅰ》第三章：java的基本程序设计结构</a></p></li><li><p><a href="https://blog.csdn.net/qq_38283262/article/details/79222212" target="_blank" rel="noopener">《java核心技术卷Ⅰ》第四章：对象与类</a></p></li><li><p><a href="https://blog.csdn.net/qq_38283262/article/details/79273007" target="_blank" rel="noopener">《java核心技术卷Ⅰ》第六章：接口、lambda表达式与内部类</a></p></li><li><p><a href="https://blog.csdn.net/qq_38283262/article/details/79301757" target="_blank" rel="noopener">《java核心技术卷Ⅰ》第七章：异常、断言和日志</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是根据我很久之前读的《Java核心技术卷Ⅰ》第十版而自己总结出的读书笔记+思维导图，包含有三、四、六、七章，主要梳理了章节的知识点，并贴出了书内的样例代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_382832
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Core Java" scheme="http://yoursite.com/tags/Core-Java/"/>
    
      <category term="JavaSE" scheme="http://yoursite.com/tags/JavaSE/"/>
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>README文档的规范写法总结</title>
    <link href="http://yoursite.com/2018/06/25/README%E6%96%87%E6%A1%A3%E7%9A%84%E8%A7%84%E8%8C%83%E5%86%99%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/06/25/README文档的规范写法总结/</id>
    <published>2018-06-25T11:15:27.000Z</published>
    <updated>2018-07-04T14:42:22.603Z</updated>
    
    <content type="html"><![CDATA[<p>俗话说的好：“一个好开源项目一定有一个好的 README”。</p><p>要想自己放到github上的项目能吸引更多人的眼球，就必须写一个规范舒适的README.md，这么做不仅可以梳理自己对于项目的思路，也方便他人上手使用或学习。因此，此文根据Github上众多项目以及查阅相关资料对README做了一个小小的总结， 方便以后写README的时候可以直接套用该模板。<br><a id="more"></a></p><hr><h2 id="XXX系统（如果有Logo可以加上Logo）"><a href="#XXX系统（如果有Logo可以加上Logo）" class="headerlink" title="XXX系统（如果有Logo可以加上Logo）"></a>XXX系统（如果有Logo可以加上Logo）</h2><p>xxx系统是一个..系统，支持…，…（此处为简要描述）</p><p><a href="http://example.com" target="_blank" rel="noopener">官方网站</a> | <a href="http://example.com" target="_blank" rel="noopener">文档手册</a> | <a href="http://example.com" target="_blank" rel="noopener">别的东西</a> </p><p>目前，此系统包含有以下功能：</p><ul><li>功能1</li><li>功能2</li><li>功能3</li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>依赖1</li><li>依赖2</li><li>依赖3</li></ul><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>IntelliJ IDEA + MySQL 或者 eclipse + MySQL，…</p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><ul><li>步骤1</li><li>步骤2</li><li>步骤3</li></ul><h3 id="相关截图"><a href="#相关截图" class="headerlink" title="相关截图"></a>相关截图</h3><p>截图1<br>截图2</p><h3 id="To-Do-List"><a href="#To-Do-List" class="headerlink" title="To Do List"></a>To Do List</h3><ul><li>功能1</li><li>功能2</li><li>功能3</li></ul><h3 id="CHANGE-LOG"><a href="#CHANGE-LOG" class="headerlink" title="CHANGE LOG"></a>CHANGE LOG</h3><p>此处填写版本更新记录</p><h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><ul><li><a href="https://blog.csdn.net/qq_38283262" target="_blank" rel="noopener">水木今山的CSDN</a></li><li><a href="https://github.com/cenjieHo" target="_blank" rel="noopener">水木今山的Github</a></li><li><a href="mailto:cenjie.ho@gmail.com" target="_blank" rel="noopener">水木今山的Gmail</a></li><li><a href="https://weibo.com/5777495883/profile?topnav=1&amp;wvr=6" target="_blank" rel="noopener">水木今山的Weibo</a></li></ul><hr><p>至此，我们可以看到一个相对规范的README.md模板，在开源项目时可以直接套用该模板，而不必每次都采用不同的零零散散的格式去书写README。Markdown代码在下方给出，当然，大家也可以根据项目具体情况进行修改而使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">## XXX系统（如果有Logo可以加上Logo）</span><br><span class="line">xxx系统是一个..系统，支持...，...（此处为简要描述）</span><br><span class="line"></span><br><span class="line">[官方网站](http://example.com) | [文档手册](http://example.com) | [别的东西](http://example.com) </span><br><span class="line"></span><br><span class="line">目前，此系统包含有以下功能：</span><br><span class="line">* 功能1</span><br><span class="line">* 功能2</span><br><span class="line">* 功能3</span><br><span class="line"></span><br><span class="line">### 准备</span><br><span class="line">* 依赖1</span><br><span class="line">* 依赖2</span><br><span class="line">* 依赖3</span><br><span class="line"></span><br><span class="line">### 搭建环境</span><br><span class="line">IntelliJ IDEA + MySQL 或者 eclipse + MySQL，...</span><br><span class="line"></span><br><span class="line">### 快速开始</span><br><span class="line">* 步骤1</span><br><span class="line">* 步骤2</span><br><span class="line">* 步骤3</span><br><span class="line"></span><br><span class="line">### 相关截图</span><br><span class="line">截图1</span><br><span class="line">截图2</span><br><span class="line"></span><br><span class="line">### To Do List</span><br><span class="line">* 功能1</span><br><span class="line">* 功能2</span><br><span class="line">* 功能3</span><br><span class="line"></span><br><span class="line">### CHANGE LOG</span><br><span class="line">此处填写版本更新记录</span><br><span class="line"></span><br><span class="line">### 联系方式</span><br><span class="line">* [水木今山的CSDN](https://blog.csdn.net/qq_38283262)</span><br><span class="line">* [水木今山的Github](https://github.com/cenjieHo)</span><br><span class="line">* [水木今山的Gmail](mailto:cenjie.ho@gmail.com)</span><br><span class="line">* [水木今山的Weibo](https://weibo.com/5777495883/profile?topnav=1&amp;wvr=6)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;俗话说的好：“一个好开源项目一定有一个好的 README”。&lt;/p&gt;
&lt;p&gt;要想自己放到github上的项目能吸引更多人的眼球，就必须写一个规范舒适的README.md，这么做不仅可以梳理自己对于项目的思路，也方便他人上手使用或学习。因此，此文根据Github上众多项目以及查阅相关资料对README做了一个小小的总结， 方便以后写README的时候可以直接套用该模板。&lt;br&gt;
    
    </summary>
    
      <category term="Github" scheme="http://yoursite.com/categories/Github/"/>
    
    
      <category term="README" scheme="http://yoursite.com/tags/README/"/>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Java Web入门项目-图书后台管理系统</title>
    <link href="http://yoursite.com/2018/06/25/Java-Web%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE-%E5%9B%BE%E4%B9%A6%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2018/06/25/Java-Web入门项目-图书后台管理系统/</id>
    <published>2018-06-25T07:24:12.000Z</published>
    <updated>2018-06-26T11:29:40.307Z</updated>
    
    <content type="html"><![CDATA[<p>一个基于JSP、Servlet、Javabeans的十分适合作为入门的Java Web项目。<br><a href="https://github.com/cenjieHo/LibraryBackstageManagementSystem" target="_blank" rel="noopener">项目地址</a></p><h2 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h2><ul><li>语言: Java</li><li>IDE: Intellij IDEA</li><li>Web服务器: Tomcat8.5</li><li>数据库: MySQL</li><li>设计模式: JSP+Servlet+JavaBean构成的MVC模型</li></ul><a id="more"></a><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><h3 id="登陆注册功能"><a href="#登陆注册功能" class="headerlink" title="登陆注册功能"></a>登陆注册功能</h3><ul><li>常规登陆注册操作，用户未登陆无法进入主界面，且注册字段经过正则表达式校验<h3 id="图书分类管理"><a href="#图书分类管理" class="headerlink" title="图书分类管理"></a>图书分类管理</h3></li><li>添加图书分类，未单独设计表<h3 id="图书管理"><a href="#图书管理" class="headerlink" title="图书管理"></a>图书管理</h3></li><li>图书添加</li><li>图书查询(使用AJAX局部刷新)</li><li>图书展示</li></ul><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>创建数据库libdb，导入sql脚本，将DBHelper中相关数据配置为自己的设置，导入jar包: servlet、jdbc。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个基于JSP、Servlet、Javabeans的十分适合作为入门的Java Web项目。&lt;br&gt;&lt;a href=&quot;https://github.com/cenjieHo/LibraryBackstageManagementSystem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;项目环境&quot;&gt;&lt;a href=&quot;#项目环境&quot; class=&quot;headerlink&quot; title=&quot;项目环境&quot;&gt;&lt;/a&gt;项目环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;语言: Java&lt;/li&gt;
&lt;li&gt;IDE: Intellij IDEA&lt;/li&gt;
&lt;li&gt;Web服务器: Tomcat8.5&lt;/li&gt;
&lt;li&gt;数据库: MySQL&lt;/li&gt;
&lt;li&gt;设计模式: JSP+Servlet+JavaBean构成的MVC模型&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="项目" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="入门" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="javabean" scheme="http://yoursite.com/tags/javabean/"/>
    
      <category term="jsp" scheme="http://yoursite.com/tags/jsp/"/>
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>Welcome To My Blog</title>
    <link href="http://yoursite.com/2018/06/22/Welcome-To-My-Blog/"/>
    <id>http://yoursite.com/2018/06/22/Welcome-To-My-Blog/</id>
    <published>2018-06-22T15:30:37.000Z</published>
    <updated>2018-07-12T08:15:04.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>大家好！我是就读于南京某高校的一名大二学生，在昨天搭建了这个个人博客网站用于记录自己在学习以及项目过程中的技术积累，希望通过这个平台能与大家分享自己的经验与教训，同时也欢迎大家随时可以联系我，期待与大家共同进步。</p><p><img src="/images/one.jpg" alt=""></p><a id="more"></a><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>我在学校的专业是<em>电子信息科学与技术</em>，曾利用课余时间学习过C、C++、Python等多门语言(仅限于皮毛)，经过两年的不断试错，终于在大二下学期确定了自己以后的发展方向—Java后台研发工程师。于是从基础语法到各大框架，这半年里接触到了许多新技术，看似学了许多东西却仍浮于水面终无所获，逐渐了解到自己要走的路还很长，而自己目前对于基础方面知识也尤为欠缺。因此需记住，沉下心，耐下性子，Coding the World。</p><h2 id="近期任务"><a href="#近期任务" class="headerlink" title="近期任务"></a>近期任务</h2><ul><li>SSM</li><li>阅读jdk的部分源码</li><li>阅读《算法》</li><li>完成二手平台项目</li><li>坚持运动</li><li>用心coding</li></ul><h2 id="Remember"><a href="#Remember" class="headerlink" title="Remember"></a>Remember</h2><p>Work hard in silence, let success make the noise.</p><h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>If you have some questions after you see this article, you can just find some info by clicking these links.</p><ul><li><a href="https://blog.csdn.net/qq_38283262" target="_blank" rel="noopener">水木今山的CSDN</a></li><li><a href="https://github.com/cenjieHo" target="_blank" rel="noopener">水木今山的Github</a></li><li><a href="mailto:cenjie.ho@gmail.com" target="_blank" rel="noopener">水木今山的Gmail</a></li><li><a href="https://weibo.com/5777495883/profile?topnav=1&amp;wvr=6" target="_blank" rel="noopener">水木今山的Weibo</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h2&gt;&lt;p&gt;大家好！我是就读于南京某高校的一名大二学生，在昨天搭建了这个个人博客网站用于记录自己在学习以及项目过程中的技术积累，希望通过这个平台能与大家分享自己的经验与教训，同时也欢迎大家随时可以联系我，期待与大家共同进步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/one.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="hello" scheme="http://yoursite.com/tags/hello/"/>
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
