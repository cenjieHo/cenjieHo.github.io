[{"title":"Netty源码分析：服务端启动","url":"/2019/04/02/Netty源码分析：服务端启动/","content":"## 服务端启动Demo\n\n```java\npublic final class Server {\n\n    public static void main(String[] args) throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childOption(ChannelOption.TCP_NODELAY, true)\n                    .childAttr(AttributeKey.newInstance(\"childAttr\"), \"childAttrValue\")\n                    .handler(new ServerHandler())\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) {\n                            ch.pipeline().addLast(new AuthHandler());\n                            //..\n\n                        }\n                    });\n\n            ChannelFuture f = b.bind(8888).sync();\n\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n\npublic class ServerHandler extends ChannelInboundHandlerAdapter {\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) {\n        System.out.println(\"channelActive\");\n    }\n\n    @Override\n    public void channelRegistered(ChannelHandlerContext ctx) {\n        System.out.println(\"channelRegistered\");\n    }\n\n    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) {\n        System.out.println(\"handlerAdded\");\n    }\n\n    @Override\n    public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exception {\n        super.channelRead(ctx, msg);\n\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                // 耗时的操作\n                String result = loadFromDB();\n\n                ctx.channel().writeAndFlush(result);\n                ctx.executor().schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        // ...\n                    }\n                }, 1, TimeUnit.SECONDS);\n\n            }\n        }).start();\n    }\n\n    private String loadFromDB() {\n        return \"hello world!\";\n    }\n}\n```\n\n## 服务端启动\n\n服务端的启动主要分为四个过程：\n- 创建服务端Channel\n- 初始化服务端channel\n- 注册selector\n- 端口绑定\n\n## 创建服务端Channel\n\n服务端Channel创建过程：`bind() [用户代码入口]`->`initAndRegister() [初始化并注册]`->`newChannel() [创建服务端Channel]`。下面进入源码：\n\n```java\n    private ChannelFuture doBind(final SocketAddress localAddress) {\n        final ChannelFuture regFuture = initAndRegister();\t//从这里进入初始化并注册，创建服务端Channel正是在这个方法里\n        final Channel channel = regFuture.channel();\n        if (regFuture.cause() != null) {\n            return regFuture;\n        }\n        ...\n    }\n    \n    final ChannelFuture initAndRegister() {\n        Channel channel = null;\n        try {\n            channel = channelFactory.newChannel();\t//在此处创建了服务端Channel\n            init(channel);\n        } catch (Throwable t) {\n\t\t\t\t...\n        }\n\t\t\t...\n        return regFuture;\n    }\n```\n\n可以看出channel是通过工厂模式创建出来的，`newChannel()`是`channelFactory`唯一的方法，并且它是通过反射机制完成的：\n```java\npublic class ReflectiveChannelFactory<T extends Channel> implements ChannelFactory<T> {\n\n    private final Class<? extends T> clazz;\n\n    public ReflectiveChannelFactory(Class<? extends T> clazz) {\n        if (clazz == null) {\n            throw new NullPointerException(\"clazz\");\n        }\n        this.clazz = clazz;\n    }\n\n    @Override\n    public T newChannel() {\n        try {\n            return clazz.newInstance();\n        } catch (Throwable t) {\n            throw new ChannelException(\"Unable to create Channel from class \" + clazz, t);\n        }\n    }\n    ...\n}\n```\n\n而这个`clazz`对象正是通过上面demo中的`.channel(NioServerSocketChannel.class)`传入的，这个`channel`方法如下：\n```java\n    public B channel(Class<? extends C> channelClass) {\n        if (channelClass == null) {\n            throw new NullPointerException(\"channelClass\");\n        }\n        return channelFactory(new ReflectiveChannelFactory<C>(channelClass));\n    }\n```\n可以看出，这里直接new了一个`ReflectiveChannelFactory`，并且将`NioServerSocketChannel.class`传入了。因此，我们才能通过`newChannel()`工厂方法使用反射机制创建出这么一个channel。\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Netty","源码分析"],"categories":["Netty"]},{"title":"Redis缓存设计与优化","url":"/2019/03/31/Redis缓存设计与优化/","content":"## 过期策略\n\nRedis过期策略是：定期删除+惰性删除。\n\n所谓定期删除，指的是Redis默认每隔100ms就随机抽取一些设置了过期时间的key（全部都检查的话十分消耗CPU资源），检查其是否过期，如果过期了就删除。但仅依赖此策略会有许多过期的key未被检查到，因此Redis还使用惰性删除策略，即在读/写key的时候再检查其是否过期，如果过期了则删除。\n\n## 内存淘汰机制\n\n如果某些key没有被定期删除，也没及时去读/写以触发惰性删除，那么Redis的内存会越来越高，当已用内存超过`maxmemory`限定时，就会根据内存淘汰机制删除部分key。Redis内存淘汰机制有以下几个：\n- noeviction: 当内存不足以容纳新写入数据时，新写入操作会报错。\n- allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。\n- allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。\n- volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。\n- volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。\n- volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。\n\n## 缓存穿透\n\n一般的缓存系统，都是根据key去缓存查询，如果不存在对应的value，就应该去数据库查找。如果key对应的value是一定不存在的，并且对该key并发请求量很大，就会对数据库造成很大的压力，这就叫做缓存穿透。\n\n第一个解决办法是对查询结果为空的键也进行缓存，由于这种方式需要更多的键，所以可以设置一个短一点的过期时间。\n\n第二个解决方案则是使用布隆过滤器拦截。布隆过滤器的原理是，当一个元素被加入集合时，通过K个Hash函数将这个元素映射成一个位数组中的K个点，并把它们置为1。检索时，我们只要看看这些点是不是都是1就（大约）知道集合中有没有它了：如果这些点有任何一个0，则被检元素一定不在；如果都是1，则被检元素有可能在。\n\n![](http://blog.default.nanwulife.com/booleanfilter.png)\n\n通过布隆过滤器，一个一定不存在的数据会被它拦截掉，从而避免了对数据库的查询压力。\n\n## 缓存雪崩\n\n当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，所有请求都会查询数据库，也会给数据库带来很大压力，这就叫做缓存雪崩。对于缓存雪崩有以下几种解决方案：\n- 可以给缓存设置过期时间时加上一个随机时间，使得每个key的过期时间分散开来，不会集中在同一时刻失效。\n- 进行缓存预热，避免在系统刚启动不久由于还未将大量数据进行缓存而导致缓存雪崩。\n- 使用分布式缓存。\n- 提前演练。\n\n## 热点key重建\n\n当前key是一个热点key（比如说某个热门的娱乐新闻），如果在缓存失效时有大量线程并发请求，那么这些线程会同时去访问数据库并重建key，导致后端系统负载过大，甚至因此崩溃。\n\n![](http://blog.default.nanwulife.com/1115933-20180629202036949-8223995.png)\n\n为此有以下几种解决方案：\n\n### 互斥锁\n\n可以使用互斥锁的方式实现，直接利用redis的`set`命令即可（如`SET mutexKey \"1\" EX 10086 NX`），为了防止该锁未被正确释放，还应给该锁设置一个过期时间。\n\n![](http://blog.default.nanwulife.com/1115933-20180703003410961-1677269917.png)\n\n这种方式的缺点在于重建的过程中别的线程都会处于等待状态，整体性能不高。\n\n### 永远不过期\n\n我们不为每个key设置一个过期时间，但会添加一个逻辑过期时间属性，每次去读的时候都判断一下当前时间是否已经大于逻辑过期时间，如果是的话就使用单独的线程去构建缓存。\n\n![](http://blog.default.nanwulife.com/1115933-20180703004145474-1329843618.png)\n\n这种方式的缺点在于缓存的构建是异步的，因此别的线程在这个过程中依然会取到老值，不保证数据的一致性。\n\n## 参考资料\n\n- 《Redis开发与运维》\n- [缓存穿透与缓存雪崩](http://www.cnblogs.com/fidelQuan/p/4543387.html)\n- [分布式缓存击穿（布隆过滤器 Bloom Filter）](https://blog.csdn.net/fouy_yun/article/details/81075432)","tags":["Redis"],"categories":["Redis"]},{"title":"Redis Cluster","url":"/2019/03/31/Redis-Cluster/","content":"## Redis Cluster作用\n\nRedis Cluster是Redis 3.0开始引入的分布式存储方案，集群由多个节点组成，Redis的数据分布在这些节点中。集群中的节点分为主节点和从节点：只有主节点负责读写请求和集群信息的维护，从节点只进行主节点数据和状态信息的复制。集群的作用，可以归纳为两点：\n- 数据分片：集群将数据分散到多个节点，突破了Redis单机内存大小的限制，存储容量大大增加。\n- 高可用：集群支持主从复制和主节点的自动故障转移（与哨兵类似），当任一节点发生故障时，集群仍然可以对外提供服务。\n\n## 数据分区方案\n\n常见的哈希分区方案包括：哈希取余分区、一致性哈希分区、带虚拟节点的一致性哈希分区等。\n\n- 哈希取余分区：哈希取余分区思路非常简单，首先计算key的hash值，然后对节点数量进行取余，从而决定数据映射到哪个节点上。该方案最大的问题是，当新增或删减节点时，节点数量发生变化，系统中所有的数据都需要重新计算映射关系，引发大规模数据迁移。\n- 一致性哈希分区：一致性哈希算法将整个哈希值空间组织成一个虚拟的圆环，范围为`0 ~ 2^32-1`。对于每个数据，根据key计算hash值，确定数据在环上的位置，然后从此位置沿环顺时针行走，找到的第一台服务器就是其应该映射到的服务器。与哈希取余分区相比，一致性哈希分区将增减节点的影响限制在相邻节点。\n![](http://blog.default.nanwulife.com/U%7BKC_N~EU%5DO%5B9_%7B3KK03U58.png)\n- 一致性哈希分区（虚拟节点机制）：普通的一致性哈希在服务器节点数量较少时容易产生数据倾斜问题，各个服务器的负载不均匀。为解决这个问题，引入了虚拟节点机制，每台机器可以负责更多节点，数据负担更加均匀。\n![](http://blog.default.nanwulife.com/Y90YE9D$%29CU%7B6AA%604QP~VEB.png)\n- 虚拟槽分区：Redis Cluser底层使用的虚拟槽分区，有一个长度为16384的虚拟槽，每个Master节点都会负责一部分的槽，Redis对key计算哈希值，使用的算法是CRC16，然后根据哈希值计算数据属于哪个槽，最后根据槽与节点的映射关系，计算数据属于哪个节点。其中哪个节点负责哪个槽，这是可以由用户指定的。\n![](http://blog.default.nanwulife.com/1174710-20181025213453407-302249562.png)\n\n## 节点通信机制\n\n### 两个端口\n\n在redis sentinel中，节点分为数据节点和sentinel节点：前者存储数据，后者实现额外的控制功能。在redis cluster中，没有数据节点与非数据节点之分，所有的节点都存储数据，也都参与集群状态的维护。为此，集群中的每个节点都提供了两个TCP端口，普通端口主要用于为客户端提供服务，集群端口用于节点之间的通信，如搭建集群、增减节点、故障转移等操作时节点间的通信。\n\n### Gossip协议\n\nGossip过程是由种子节点发起，当一个种子节点有状态需要更新到网络中的其他节点时，它会随机的选择周围几个节点散播消息，收到消息的节点也会重复该过程，直至最终网络中所有的节点都收到了消息。这个过程可能需要一定的时间，由于不能保证某个时刻所有节点都收到消息，但是理论上最终所有节点都会收到消息，因此它是一个最终一致性协议。\n\n![](http://blog.default.nanwulife.com/v2-575e785e7d03ad317e5bce4e36debb03_b.gif)\n\nGossip协议的优点：\n- 负载低：比广播低，广播每条消息都要发送给所有节点，CPU、带宽等消耗较大。\n- 去中心化：Gossip协议不要求任何中心节点，所有节点都可以是对等的，任何一个节点无需知道整个网络状况，只要网络是连通的，任意一个节点就可以把消息散播到全网。\n- 容错性高：网络中任何节点的宕机和重启都不会影响Gossip消息的传播，Gossip协议具有天然的分布式系统容错特性。\nGossip协议的缺点：\n- 消息的延迟：由于节点只会随机向少数几个节点发送消息，消息最终是通过多个轮次的散播而到达全网的，因此使用Gossip协议会造成不可避免的消息延迟，不适合用在对实时性要求较高的场景下。\n\n### 消息类型\n\n集群节点间发送的消息有以下几种类型：\n- meet：在节点握手阶段，当节点收到客户端的`cluster meet`命令时，会向新加入的节点发送meet消息，请求新节点加入到当前集群，新节点收到meet消息后会回复一个pong消息。\n- ping：集群里每个节点每秒钟会选择部分节点发送ping消息，接收者收到消息后会回复一个pong消息。ping消息使用Gossip协议发送，内容是自身节点和部分其他节点的状态信息，作用是彼此交换信息，以及检测节点是否在线。\n- pong：pong消息封装了自身状态数据，可以分为两种：第一种是在接到meet/ping消息后回复的pong消息，第二种是指节点向集群广播pong消息，这样其他节点可以获知该节点的最新信息，例如故障恢复后新的主节点会广播pong消息。\n- fail：当一个主节点判断另一个主节点客观下线后，会向集群广播这一fail消息，通知集群中所有节点标记故障节点为客观下线，并通知故障节点的从节点触发故障转移流程。\n- publish：节点收到publish命令后，会先执行该命令，然后向集群广播这一消息，接收节点也会执行该publish命令。\n\n## 客户端路由\n\n### moved重定向\n\nmoved异常代表槽已经确认迁移至别的节点。\n\n![](http://blog.default.nanwulife.com/1.png)\n![](http://blog.default.nanwulife.com/3.png)\n\n### ask重定向\n\n在集群缩容扩容的时候，要对槽进行迁移，在迁移的过程中访问一个key，但是key已经迁移到目标节点，那么就会返回一个ask异常。\n\n![](http://blog.default.nanwulife.com/6.png)\n\n### Smart Client\n\nredis-cli这一类客户端称为Dummy客户端，因为它们在执行命令前不知道数据在哪个节点上，因此需要借助moved异常重定向。为了追求性能，我们不可能每次都随机访问一个节点，再根据moved或ask异常去重定向到目标节点，因此需要实现一个Smart客户端，比如说JedisCluster。JedisCluster的基本原理大致如下：\n1. 从集群中选一个可运行节点，使用`cluster slots`命令并将结果映射到本地，这样本地就有了slot->node的映射关系缓存。\n2. JedisCluster为每个节点创建连接池(即JedisPool)。\n3. 当执行命令时，JedisCluster根据key->slot->node选择需要连接的节点，发送命令。如果成功，则命令执行完毕。如果执行失败，则会随机选择其他节点进行重试，并在出现moved错误时，刷新本地的映射关系缓存。\n\n这里需要注意的是，JedisCluster中已经包含所有节点的连接池，因此JedisCluster要使用单例。\n\n## 集群伸缩\n\n集群伸缩的核心是槽迁移，通过修改槽与节点的对应关系，实现槽（即数据）在节点之间的移动。例如，如果槽均匀分布在集群的3个节点中，此时增加一个节点，则需要从3个节点中分别拿出一部分槽给新节点，从而实现槽在4个节点中的均匀分布。\n\n### 增加节点\n1. 启动节点\n2. 加入集群：使用`cluster meet`命令。\n3. 迁移槽和数据\n\n### 减少节点\n\n1. 迁移槽和数据\n2. 忘记节点：使用`cluster forget`命令\n2. 关闭节点\n\n这里要注意应先下线从节点再下线主节点，因为若主节点先下线，会触发故障的自动转移。\n\n在槽迁移未完成时，客户端访问了负责该槽的节点，但key此时已经迁移到了别的节点下，这时候会返回ask异常，通过这个机制使得redis cluster可以无痛的完成扩缩容操作。\n\n## 故障转移\n\n集群对故障发现与故障转移的实现与哨兵思路类似：通过定时任务发送ping消息检测其他节点状态，若某个主节点发现另一个主节点不可用（与参数`cluster-node-timeout`有关），则标记该节点进行主观下线，而当半数以上持有槽的主节点都标记该节点主观下线，则对该节点进行客观下线，并向集群广播fail消息，让集群中所有节点都将其标记为客观下线，并触发从节点的故障转移。\n\n在故障转移阶段，主要有以下几个步骤：\n- 检查资格：每个从节点都会检查与故障主节点的断线时间，如果超过默认值150s（`cluster-node-timeout * cluster-slave-validity-factor`）则会取消资格。\n- 准备选举时间：为了保证偏移量比较大的从节点更有可能成为主节点，会将该从节点的延迟时间设置更小一些。\n- 选举投票：从节点选举胜出需要的票数为N/2+1，其中N为主节点数量（包括故障主节点），但故障主节点实际上不能投票。因此为了能够在故障发生时顺利选出从节点，集群中至少需要3个主节点。\n- 替换主节点。\n\n与哨兵一样，集群只实现了主节点的故障转移，从节点故障时只会被下线，不会进行故障转移。因此，使用集群时，应谨慎使用读写分离技术，因为从节点故障会导致读服务不可用，可用性变差。\n\n## 参数优化\n\n### cluster_node_timeout\n`cluster_node_timeout`的默认值是15s，影响包括：\n- 值越大对延迟容忍度越高，并且由于节点发现与其它节点最后通信时间超过`cluster_node_timeout / 2`时会直接发送ping消息，因此调大该参数还可以降低带宽消耗，但同时也会降低收敛速度。\n- 影响故障转移的判定和时间，值越大越不容易误判，但完成转移消耗时间越长。\n\n### cluster-require-full-coverage\n\n`cluster-require-full-coverage`参数设置为yes时，当主节点发生故障而故障转移尚未完成，原主节点中的槽不在任何节点中，此时集群会处于下线状态，无法响应客户端的请求。但在实际应用中为了保证服务的高可用性，都会将该参数设置为no。\n\n\n\n## 参考资料\n\n- 《Redis开发与运维》\n- [哈希分区技术之间的对比（一致性哈希、Redis cluster虚拟槽）](http://duqingfeng.net/2018/06/12/%E5%93%88%E5%B8%8C%E5%88%86%E5%8C%BA%E6%8A%80%E6%9C%AF%E4%B9%8B%E9%97%B4%E7%9A%84%E5%AF%B9%E6%AF%94%EF%BC%88%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E3%80%81Redis%20cluster%E8%99%9A%E6%8B%9F%E6%A7%BD%EF%BC%89/)\n- [深入学习Redis（5）：集群](https://www.cnblogs.com/kismetv/p/9853040.html)\n- [P2P 网络核心技术：Gossip 协议](https://zhuanlan.zhihu.com/p/41228196)\n- [Redis cluster 客户端路由](https://enpsl.top/2019/01/24/2019-01-24-redis-cluster-route/)","tags":["Redis"],"categories":["Redis"]},{"title":"Zookeeper集群节点为什么推荐为奇数","url":"/2019/03/31/Zookeeper集群节点为什么推荐为奇数/","content":"不止包括Zookeeper集群，其它大多数集群都推荐节点数最好为奇数个，因此本文将详细说明其中的缘由。首先我们需要明白一个概念“脑裂”：\n> 集群的脑裂通常是发生在节点之间通信不可达的情况下，集群会分裂成不同的小集群，每个小集群都认为其它小集群的节点是不可用的，小集群各自选出自己的master节点，导致原有的集群出现多个master节点的情况，这就是脑裂。\n\n在zookeeper的选举过程中，有个规则是要求可用节点数量>总节点数量/2。之所以会有这样的要求，就是为了防止集群出现脑裂的时候，可能会出现多个子集群同时服务的情况（即子集群各组选举出自己的leader）。如果遵守这个规则，那么只会有一个子集群能进行Leader选举，因为当前集群中只可能有一个子集群的节点数能超过总节点数的一半。\n\n说明了可用节点数量>总节点数量/2这个规则后，我们再进一步探索为什么Zookeeper集群节点数推荐为奇数个。主要有以下两个原因：\n\n## 1. 防止脑裂造成集群不可用\n\n如果集群的数量为偶数个，那么在发生脑裂的时候，可能两个子集群的数量都无法超过总节点数量的一半，也就无法满足Zookeeper进行选举的规则，这时候整个服务对外是彻底不可用的。但是如果集群的数量为奇数个的话，发生脑裂时必然有一个子集群的节点数目大于总节点数目的一半，这时候可以保证当前服务对外依然是可用的。\n\n## 2. 在容错能力相同的情况下，奇数台更节省资源\n\n比如说，如果当前集群有四个节点，要想完成Leader选举，只允许一个节点不可用，这样才能保证可用的节点数大于总节点数的一半。但如果当前集群有三个节点，要想完成Leader选举，同样也只允许一个节点不可用，因为只有当两个节点都存活的时候才能满足可用节点数大于总节点数的一半。可以看出，以上两个集群都只有一个节点的容错能力，但是第二个集群比第一个集群节约了更多的资源，因此，更推荐Zookeeper的节点数为奇数个。\n\n\n\n\n\n","tags":["Zookeeper"],"categories":["Zookeeper"]},{"title":"Redis Sentinel","url":"/2019/03/30/Redis-Sentinel/","content":"## Redis Sentinel架构\n\n复制是高可用Redis的基础，哨兵和集群都是在复制基础上实现高可用的，但它故障恢复无法自动化，因此Redis提供了哨兵（Sentinel）这么一个高可用方案。Redis Sentinel由两部分组成，哨兵节点和数据节点：\n- 哨兵节点：哨兵系统由一个或多个哨兵节点组成，哨兵节点是特殊的redis节点，不存储数据。\n- 数据节点：主节点和从节点都是数据节点。\n\n![](http://blog.default.nanwulife.com/1174710-20180908182924632-1069251418.png)\n\nRedis Sentinel具有以下功能：\n- 监控：哨兵通过心跳检测会不断地检查主节点和从节点是否运作正常。\n- 自动故障转移：当主节点不能正常工作时，哨兵会开始自动故障转移操作，它会将失效主节点的其中一个从节点升级为新的主节点，并让其他从节点改为复制新的主节点。\n- 配置提供者：客户端在初始化时，通过连接哨兵来获得当前Redis服务的主节点地址。\n- 通知：哨兵可以将故障转移的结果发送给客户端。\n\n## 客户端连接Redis Sentinel\n\n对于Redis Sentinel，它仅仅完成了服务端的高可用，当master挂掉时能选举出一个新的master节点来完成故障转移，但是我们客户端并没有去连接新的master节点，因此我们还要使得客户端也是高可用的。\n\nJedis客户端对Redis Sentinel提供了很好的支持。我们只需要向Jedis提供sentinel节点集合和`masterName`，构造`JedisSentinelPool`对象，然后便可以像使用普通redis连接池一样来使用了：通过`pool.getResource()`获取连接，执行具体的命令。\n\n```java\npublic static void testSentinel() throws Exception {\n         String masterName = \"mymaster\";\n         Set<String> sentinels = new HashSet<>();\n         sentinels.add(\"192.168.92.128:26379\");\n         sentinels.add(\"192.168.92.128:26380\");\n         sentinels.add(\"192.168.92.128:26381\");\n \n         JedisSentinelPool pool = new JedisSentinelPool(masterName, sentinels); //初始化过程做了很多工作\n         Jedis jedis = pool.getResource();\n         jedis.set(\"key1\", \"value1\");\n         pool.close();\n}\n```\n\n在整个过程中，我们的代码不需要显式的指定主节点的地址，就可以连接到主节点。代码中对故障转移也没有任何体现，就可以在sentinel完成故障转移后自动的切换主节点。之所以可以做到这些，是因为客户端完成了以下几个工作：\n- 遍历sentinel节点，找到一个可用的sentinel节点，通过`sentinel get-master-addr-by-name`命令获取master节点的信息（IP和端口），之后再对master节点执行`role`命令判断其是否真的为master节点。\n- 客户端和sentinel使用了一个发布订阅模式，客户端订阅sentinel的某一个频道，当master发生变化时，sentinel向这个频道发布一条消息，客户端就可以获取再对新的master进行一个连接。\n\n前面说过sentinel相当于配置提供者，我们得到了sentinel的集合后就可以通过sentinel节点获取到master的地址。这里要注意sentinel只是配置提供者，而不是代理，二者的区别在于如果是配置提供者，客户端在通过sentinel获得master信息后，会直接建立到master的连接，后续的请求会直接发向master，而如果是代理，客户端的每一次请求都会发向sentinel，sentinel再通过主节点处理请求。\n\n## 基本原理\n\n\n### 三个定时任务\n\n- 10秒每个sentinel对master和slave执行info，以此发现slave节点并确认主从关系。\n- 2秒每个sentinel通过master节点的channel交换信息（因此sentinel节点之间能够自动感知）。\n- 每1秒每个sentinel对其它sentinel和redis执行ping也就是心跳检测。\n\n### 主观下线和客观下线\n\n- 主观下线：在心跳检测的定时任务中，如果其他节点超过一定时间没有回复，哨兵节点就会将其进行主观下线。顾名思义，主观下线的意思是一个哨兵节点“主观地”判断下线。\n- 客观下线：哨兵节点在对主节点进行主观下线后，会通过`sentinel is-master-down-by-addr`命令询问其他哨兵节点该主节点的状态。如果判断主节点下线的哨兵数量达到设置的法定人数（quorum），则对该主节点进行客观下线。\n\n需要特别注意的是，客观下线是主节点才有的概念，如果从节点和哨兵节点发生故障，被哨兵主观下线后，不会再有后续的客观下线和故障转移操作。\n\n### 领导者选举\n\n由于只需要一个sentinel节点完成故障转移，因此sentinel内部需要选举出一个节点作为领导者，同样也是通过`sentinel is-master-down-by-addr`这个命令完成领导者的选举（这正是这条命令的第二个作用）。过程如下：\n1. 每个做主观下线的sentinel节点向其它sentinel节点发送命令，要求将它设置为领导者。\n2. 收到命令的sentinel节点如果没有同意通过其它sentinel节点发送的命令，那么将同意该请求，否则拒绝。\n3. 如果该sentinel节点发现自己的票数已经超过sentinel集合半数并且超过quorum，那么将它成为领导者。\n\n需要特别注意的是，客观下线是主节点才有的概念，如果从节点和哨兵节点发生故障，被哨兵主观下线后，不会再有后续的客观下线和故障转移操作。\n\n### 故障转移\n\n完成了领导者选举后，由领导者进行故障转移操作：\n1. 从slave节点中选出一个“合适的”节点作为新的master节点：选择优先级最高的从节点(由`slave-priority`指定)；如果优先级无法区分，则选择复制偏移量最大的从节点；如果仍无法区分，则选择runid最小的从节点。\n2. 对上面slave节点执行`slaveof no one`命令让其成为master节点。\n3. 向剩余的slave节点发送命令，让它们成为新master节点的slave节点，复制规则和`parallel-syncs`参数有关。\n4. 更新原来master节点配置为slave，并保持着对其“关注”，当其恢复后命令它去复制新的master节点。\n\n## 常见问题\n\nRedis Sentinel无法对从节点进行自动故障转移，在读写分离场景下，从节点故障会导致读服务不可用，需要我们对从节点做额外的监控、切换操作。除此之外，它的存储能力受到单机限制的问题，因此如果我们对扩容有需求的话，应当使用Redis Cluster这么一个高可用的集群方案。\n\n## 参考资料\n- 《Redis开发与运维》\n- [深入学习Redis（4）：哨兵](https://www.cnblogs.com/kismetv/p/9609938.html#t33)","tags":["Redis"],"categories":["Redis"]},{"title":"Redis主从复制","url":"/2019/03/30/dis主从复制/","content":"## 概述\n\n主从复制是指将主节点（master）的数据复制到从节点（slave）中，数据的复制是单向的，只能由主节点到从节点。\n\n## 基本原理\n\n主从复制过程大体可以分为3个阶段：连接建立阶段、数据同步阶段、命令传播阶段。\n\n### 连接建立阶段\n\n主从复制的开启，完全是在从节点发起的（通过`slaveof`命令），不需要我们在主节点做任何事情。需要注意的是，`slaveof`是异步命令，从节点完成主节点ip和port的保存后，向发送`slaveof`命令的客户端直接返回OK，实际的复制操作在这之后才开始进行。\n\n### 数据同步阶段\n\n主从节点之间的连接建立以后，便可以开始进行数据同步。数据同步阶段是主从复制最核心的阶段，由从节点向主节点发送`psync`命令开始同步，并且根据主从节点当前状态的不同，可以分为全量复制和部分复制。\n\n![](http://blog.default.nanwulife.com/psync.jpg)\n\n#### 全量复制\n\n全量复制用于初次复制或其他无法进行部分复制的情况，将主节点中的所有数据都发送给从节点，是一个非常重型的操作。执行过程如下：\n- 主节点收到全量复制的命令后，执行`bgsave`，在后台生成RDB文件，并使用一个缓冲区（称为复制缓冲区）记录从现在开始执行的所有写命令。\n- 主节点的`bgsave`执行完成后，将RDB文件发送给从节点，从节点首先清除自己的旧数据，然后载入接收的RDB文件，将数据库状态更新至主节点执行`bgsave`时的数据库状态。\n- 主节点将复制缓冲区中的所有写命令发送给从节点，从节点执行这些写命令，将数据库状态更新至主节点的最新状态。\n- 如果从节点开启了AOF，则会触发`bgrewriteaof`的执行，从而保证AOF文件更新至主节点的最新状态。\n\n#### 部分复制\n\n复制偏移量：主节点和从节点分别维护一个复制偏移量（offset），代表的是主节点向从节点传递的字节数。主节点每次向从节点传播N个字节数据时，主节点的offset增加N；从节点每次收到主节点传来的N个字节数据时，从节点的offset增加N。offset用于判断主从节点的数据库状态是否一致：如果二者offset相同，则一致；如果offset不同，则不一致，此时可以根据两个offset找出从节点缺少的那部分数据。\n\n复制缓冲区：复制缓冲区是由主节点维护的、固定长度的、先进先出队列，默认大小1MB，当主节点开始有从节点时创建。在命令传播阶段，主节点除了将写命令发送给从节点，还会发送一份给复制缓冲区，作为写命令的备份。除了存储写命令，复制缓冲区中还存储了其中的每个字节对应的复制偏移量（offset）。由于复制缓冲区定长且是先进先出，所以它保存的是主节点最近执行的写命令，时间较早的写命令会被挤出缓冲区，因此当主从节点offset的差距过大超过缓冲区长度时，将无法执行部分复制，只能执行全量复制。\n\n服务器运行ID（runid）：每个Redis节点（无论主从），在启动时都会自动生成一个随机ID（每次启动都不一样），runid用来唯一识别一个Redis节点。主从节点初次复制时，主节点将自己的runid发送给从节点，从节点将这个runid保存起来。当断线重连时，从节点会将这个runid发送给主节点；主节点根据runid判断能否进行部分复制：\n- 如果从节点保存的runid与主节点现在的runid相同，说明主从节点之前同步过，主节点会继续尝试使用部分复制(到底能不能部分复制还要看offset和复制积压缓冲区的情况)；\n- 如果从节点保存的runid与主节点现在的runid不同，说明从节点在断线前同步的Redis节点并不是当前的主节点，只能进行全量复制。\n\n### 命令传播阶段\n\n数据同步阶段完成后，主从节点进入命令传播阶段。在这个阶段主节点将自己执行的写命令发送给从节点，从节点接收命令并执行，从而保证主从节点数据的一致性。需要注意的是，命令传播是异步的过程，即主节点发送写命令后并不会等待从节点的回复，因此实际上主从节点之间很难保持实时的一致性，延迟在所难免。\n\n## 故障转移\n\n在没有使用哨兵或集群的场景下，当主节点挂掉了以后，从节点没法完成master选举，从而导致整个服务对外不可用。我们需要自行选择一个从节点作为主节点并继续对外提供服务，并将其它从节点的主节点设为它，由于这些过程都需要手动完成，出错率比较高，因此在真实场景中往往都会使用哨兵或者集群来实现系统的高可用。\n\n## 参考资料\n\n- 《Redis开发与运维》\n- [深入学习Redis（3）：主从复制](https://www.cnblogs.com/kismetv/p/9236731.html)","tags":["Redis"],"categories":["Redis"]},{"title":"Redis持久化：AOF与RDB","url":"/2019/03/30/Redis五种数据类型/","content":"## Redis持久化\n\nRedis是内存数据库，数据都是存储在内存中，为了避免进程退出导致数据的永久丢失，需要定期将Redis中的数据以某种形式(数据或命令)从内存保存到硬盘，当下次Redis重启时，利用持久化文件实现数据恢复。\n\nRedis持久化分为RDB持久化和AOF持久化：前者将当前数据保存到硬盘，后者则是将每次执行的写命令保存到硬盘（类似于MySQL的binlog）。\n\n## RDB\n\nRDB持久化是将当前进程中的数据生成快照保存到硬盘，保存的文件后缀是rdb，当Redis重新启动时，可以读取快照文件恢复数据。RDB持久化分为手动触发和自动触发两种方式：\n\n### 手动触发\n\n手动触发可以使用`save`命令和`bgsave`命令，都可以生成rdb文件。它们的区别在于`save`命令会阻塞Redis服务器进程，直到RDB文件创建完毕为止，在Redis服务器阻塞期间，服务器不能处理任何命令请求；而`bgsave`命令会创建一个子进程，由子进程来负责创建RDB文件，父进程（即Redis主进程）则继续处理请求，整个过程中只有`fork`子进程时会阻塞服务器。\n\n### 自动触发\n\n自动触发最常见的情况是在配置文件中通过`save m n`，指定当m秒内发生n次变化时，会触发`bgsave`。例如默认配置文件中有以下三行：\n```\nsave 900 1\nsave 300 10\nsave 60 10000\n```\n只要上面三行任意一条满足时，就会执行`bgsave`。除此之外，在主从复制的场景下，如果从节点执行全量复制操作，则主节点会执行`bgsave`命令，并将rdb文件发送给从节点。执行`shutdown`命令时，也会自动执行rdb持久化。\n\n### 启动时加载\n\nRDB文件的载入工作是在服务器启动时自动执行的，并没有专门的命令。但是由于AOF的优先级更高，因此当AOF开启时，Redis会优先载入AOF文件来恢复数据；只有当AOF关闭时，才会在Redis服务器启动时检测RDB文件，并自动载入。服务器载入RDB文件期间处于阻塞状态，直到载入完成为止。\n\n## AOF\n\nRDB持久化是将进程数据写入文件，而AOF持久化则是将Redis执行的每次写命令记录到单独的日志文件中（有点像MySQL的binlog），当Redis重启时再次执行AOF文件中的命令来恢复数据。与RDB相比，AOF的实时性更好，因此已成为主流的持久化方案。\n\n### 三种策略\n\n为了提高文件写入效率，在现代操作系统中，当用户将数据写入文件时（`write`命令），操作系统通常会将数据暂存到一个内存缓冲区里，当缓冲区被填满或超过了指定时限，才真正将缓冲区的数据写入到硬盘里。这样的操作虽然提高了效率，但如果系统崩溃，内存缓冲区中的数据将会丢失。因此可以设置同步选项，强制操作系统什么时候将缓冲区中的数据写入到硬盘中（`fsync`命令），Redis提供了以下三种同步策略：\n- always：每个写命令都同步\n- everysec：每秒同步一次\n- no：让操作系统来决定何时同步\n\nalways会严重降低服务器的性能，而no的不可控性太强，因此Redis使用everysec作为默认配置，但在系统崩溃时可能会丢失一秒的数据。\n\n### 文件重写\n\n随着Redis服务器执行的写命令越来越多，AOF文件也会越来越大，过大的AOF文件不仅会影响服务器的正常运行，也会导致数据恢复需要的时间过长。文件重写是指定期重写AOF文件，减小AOF文件的体积。需要注意的是，AOF重写是把Redis进程内的数据转化为写命令，同步到新的AOF文件，而不会对旧的AOF文件进行任何读取、写入操作。\n\n\n文件重写主要是针对以下一些语句：\n- 过期的数据（如`expire`），可以不用再写入文件。\n- 多次`INCR`命令可以合并为一个`SET`命令。\n- 无效的命令不再写入文件，比如有些数据被删除了。\n\n### 手动触发\n\n可以直接调用`bgrewriteaof`命令重写文件，该命令的执行与`bgsave`有些类似，都是`fork`子进程进行具体的工作，且都只有在`fork`时阻塞。\n\n### 自动触发\n\n默认配置是当AOF文件大小是上次重写后大小的一倍（`auto-aof-rewrite-min-size`）且文件大于64M时触发（`auto-aof-rewrite-percentage`）。\n\n### 具体流程\n\n1. 父进程执行`fork`操作创建子进程，这个过程中父进程是阻塞的。\n2. 子进程创建后，Redis的所有写命令依然写入AOF缓冲区，并根据设置策略同步到硬盘，保证原有AOF机制的正确。\n3. 由于`fork`操作使用写时复制技术，子进程只能共享`fork`操作时的内存数据。由于父进程依然在响应命令，因此Redis使用AOF重写缓冲区（图中的aof_rewrite_buf）保存这部分数据，防止新AOF文件生成期间丢失这部分数据。也就是说，bgrewriteaof执行期间，Redis的写命令同时追加到aof_buf和aof_rewirte_buf两个缓冲区。\n4. 子进程根据内存快照，按照命令合并规则写入到新的AOF文件。\n5. 子进程写完新的AOF文件后，向父进程发信号，父进程把AOF重写缓冲区的数据写入到新的AOF文件，这样就保证了新AOF文件所保存的数据库状态和服务器当前状态一致。\n6. 使用新的AOF文件替换老文件，完成AOF重写。\n\n![](http://blog.default.nanwulife.com/1174710-20180605092001589-1724580361.png)\n\n## RDB与AOF对比\n\n- RDB持久化：RDB文件紧凑，体积小，恢复速度比AOF快很多，但数据的实时性较低。\n- AOF持久化：实时性较高，但是文件大，并且恢复速度较慢，且对性能有一定影响。\n\n## 常见问题\n\n### fork阻塞：CPU的阻塞\n\n在Redis中，无论是RDB持久化的`bgsave`，还是AOF重写的`bgrewriteaof`，都需要`fork`出子进程来进行操作，而在操作系统`fork`的实现中，基本都采用了写时复制技术，即在父/子进程试图修改数据空间之前，父子进程实际上共享数据空间，但是当父/子进程的任何一个试图修改数据空间时，操作系统会为修改的那一部分（内存的一页）制作一个副本。\n\n也就是说，虽然`fork`时子进程不会复制父进程的数据空间，但是会复制内存页表，如果Redis内存过大，会导致fork操作时复制内存页表耗时过多，而Redis主进程在进行`fork`时是完全阻塞的，意味着无法响应客户端的请求，造成请求延迟过大。\n\n为了防止该问题的发生，我们需要控制Redis单机内存的大小，并且适当放宽AOF重写的触发条件，尽量在写入较少的时间段完成重写。\n\n### AOF追加阻塞：硬盘的阻塞\n\nAOF持久化过程中，通过`fsync`命令每秒一次将缓冲区的数据写入磁盘中，但在硬盘负载过高时，`fsync`操作可能会超过1s，当继续向缓冲区内写入数据时，磁盘负载会越来越大，如果此时Redis进程异常退出，丢失的数据也有可能远超1s。\n\n为此，Redis的处理策略是这样的：主线程每次进行AOF会对比距离上次`fsync`成功的时间，如果距上次不到2s，主线程直接返回；如果超过2s，则主线程阻塞直到`fsync`同步完成。因此，如果系统硬盘负载过大导致`fsync`速度太慢，会导致Redis主线程的阻塞。这里还要注意的是，如果使用everysec策略，AOF最多可能丢失2s的数据，而不是1s。\n\n## 参考资料\n\n- 《Redis开发与运维》\n- [深入学习Redis（2）：持久化](https://www.cnblogs.com/kismetv/p/9137897.html)","tags":["Redis"],"categories":["Redis"]},{"title":"Linux五种IO模型","url":"/2019/03/27/Linux-五种IO模型/","content":"## IO模型\n\n对于一次IO访问，会分为两个阶段，首先等待数据准备好后被拷贝到操作系统内核的缓冲区中，然后再从操作系统内核的缓冲区拷贝到用户空间。IO模型可以分为以下五种类型：\n- 阻塞式I/O（Blocking I/O）\n- 非阻塞式I/O（Non-blocking I/O）\n- 多路复用I/O（Multiplexing I/O）\n- 信号驱动I/O（Signal-driven I/O）\n- 异步I/O（Asynchronous I/O）\n\n其中信号驱动式IO并不常用，所以重点关注另外四种IO模型。\n\n## 阻塞式I/O\n\n在这个IO模型中，用户空间的应用程序执行一个系统调用（recvform），这会导致应用程序阻塞，什么也不干，直到数据准备好，并且将数据从内核复制到用户进程，最后进程再处理数据，在等待数据到处理数据的两个阶段，整个进程都被阻塞，不能处理别的IO。\n\n阻塞IO的特点就是能够及时的返回数据，但是在IO执行的两个阶段都被阻塞了，只有当数据从内核复制到了用户空间中，进程才能继续往下执行，因此对性能有所牺牲。\n\n![](http://blog.default.nanwulife.com/1492928416812_4.png)\n\n## 非阻塞式I/O\n\n应用进程执行系统调用之后，内核会立即返回一个错误码，但IO操作还没完成。此时应用进程并没有被阻塞，可以继续执行，但是需要不断的执行系统调用来获知IO操作是否完成，这种方式称为轮询。\n\n这种模型的CPU利用率比较低，并且因为每过一段时间才去轮询一次，所以存在一个响应延迟。还需要注意的是，拷贝数据的整个过程，进程仍然是属于阻塞的状态。\n\n![](http://blog.default.nanwulife.com/1492929000361_5.png)\n\n## I/O多路复用\n\n使用`select`或者`poll`对多个IO端口进行监听，只要多个套接字中的任何一个数据准备好了，就能返回可读，之后应用进程再执行recvfrom系统调用把数据从内核复制到进程中。\n\nI/O复用模型让单个进程具有处理多个I/O事件的能力，因此相比多进程和多线程技术，它的系统开销小了许多。但是`select`，`poll`，`epoll`函数依然会阻塞应用进程，并且由于多路复用可以处理多个IO，那么多个IO之间的顺序就变得不确定了。\n\n![](http://blog.default.nanwulife.com/1492929444818_6.png)\n\n## 信号驱动I/O\n\n应用进程使用sigaction系统调用，内核立即返回，应用进程可以继续执行，也就是说等待数据阶段应用进程是非阻塞的。内核在数据到达时向应用进程发送SIGIO信号，应用进程收到之后在信号处理程序中调用recvfrom将数据从内核复制到应用进程中。\n\n相比于非阻塞式I/O的轮询方式，信号驱动I/O的CPU利用率更高。\n\n![](http://blog.default.nanwulife.com/1492929553651_7.png)\n\n## 异步非阻塞I/O\n\n\n用户进程进行aio_read系统调用之后，无论内核数据是否准备好，都会直接返回给用户进程，然后用户进程就可以去做别的事情。等到数据准备好了，内核直接复制数据给进程，然后从内核向进程发送通知。这个IO模式的两个阶段，进程都是非阻塞的。\n\n![](http://blog.default.nanwulife.com/1492930243286_8.png)\n\n## 五种I/O模型对比\n\n- 阻塞式I/O：同步阻塞\n- 非阻塞式I/O：同步非阻塞（轮询）\n- I/O多路复用：同步阻塞（可以监听多个IO）\n- 信号驱动I/O：同步非阻塞（收到SIGIO信号后才执行recvfrom并阻塞）\n- 异步I/O：异步非阻塞（两个阶段都不会阻塞）\n\n![](http://blog.default.nanwulife.com/1492928105791_3.png)\n\n## I/O多路复用中的select、poll、epoll\n\nselect，poll，epoll都是IO多路复用的机制，select出现的最早，之后是poll，再是epoll。I/O多路复用就是通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。\n\n> 文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。\n\n- **select**：它仅仅知道有I/O事件发生了，却并不知道是哪几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，测试每个流是否有事件发生，找出能读出数据，或者写入数据的流，对他们进行操作。所以select具有O(n)的时间复杂度，同时处理的流越多，无差别轮询时间就越长。\n- **poll**：poll本质上和select没有区别，需要查询每个fd对应的设备状态，但是它没有最大连接数的限制，因为select的描述符类型使用数组实现，而poll的描述符类型使用链表实现。\n- **epoll**：epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll会把哪个流发生了怎样的I/O事件通知我们。所以我们说epoll实际上是事件驱动（每个事件关联上fd）的，此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）\n\n## 参考资料\n\n- [Linux IO模式及 select、poll、epoll详解](https://segmentfault.com/a/1190000003063859)\n- [select、poll、epoll之间的区别(搜狗面试)](https://www.cnblogs.com/aspirant/p/9166944.html)\n","tags":["IO","Linux"],"categories":["Linux"]},{"title":"NIO知识点总结","url":"/2019/03/10/NIO知识点总结/","content":"# 简介\n\nJava NIO是一个可以替代标准Java IO API的IO API，主要有以下三个核心组件：\n- Channels\n- Buffers\n- Selectors\n\nNIO与IO的主要区别在于：\n- IO是面向流的，NIO是面向缓冲区的。\n- IO是阻塞的，NIO是非阻塞的。\n- NIO有选择器，允许一个单独的线程来管理多个输入通道。\n\n<!--more-->\n\n# Channel\n\nJava NIO的通道类似流，主要区别在于：\n\n- 既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。\n- 通道可以异步地读写。\n- 通道中的数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入。\n\nNIO中有以下几个重要的通道实现。\n\n## FileChannel\n\nFileChannel是一个连接到文件的通道。可以通过文件通道读写文件。\n\n注意：FileChannel无法设置为非阻塞模式，它总是运行在阻塞模式下。\n\n```java\n//打开FileChannel\nRandomAccessFile aFile = new RandomAccessFile(\"data/nio-data.txt\", \"rw\");\nFileChannel inChannel = aFile.getChannel();\n\n//在FileChannel的某个特定位置进行数据的读/写操作\nlong pos = channel.position();\nchannel.position(pos +123);\n\n//可以使用FileChannel.truncate()方法截取一个文件，指定长度后面的部分将被删除\nchannel.truncate(1024);\n\n//出于性能方面的考虑，操作系统会将数据缓存在内存中，所以无法保证写入到FileChannel里的数据一定会即时写到磁盘上，而通过FileChannel.force()方法则可以将通道里尚未写入磁盘的数据强制写到磁盘上\nchannel.force(true);\n```\n\n\n## SocketChannel\n\nSocketChannel是一个连接到TCP网络套接字的通道。可以通过以下2种方式创建SocketChannel：\n\n- 打开一个SocketChannel并连接到互联网上的某台服务器。\n- 一个新连接到达ServerSocketChannel时，会创建一个SocketChannel。\n\nSocketChannel是可以设置为非阻塞模式的，设置之后，就可以在异步模式下调用`connect()`, `read()`和`write()`了。\n\n```java\n//打开并连接\nSocketChannel socketChannel = SocketChannel.open();\nsocketChannel.connect(new InetSocketAddress(\"http://jenkov.com\", 80));\n\n//非阻塞模式可以调用finishConnect()的方法确定连接是否建立\nsocketChannel.configureBlocking(false);\nsocketChannel.connect(new InetSocketAddress(\"http://jenkov.com\", 80));\nwhile(! socketChannel.finishConnect() ){\n   //wait, or do something else...\n}\n\n```\n\n## ServerSocketChannel\n\nServerSocketChannel是一个可以监听新进来的TCP连接的通道。在打开了ServerSocketChannel之后，可以通过`accept()`方法监听新进来的连接，当`accept()`方法返回的时候，它返回一个包含新进来的连接的`SocketChannel`。因此，`accept()`方法会一直阻塞到有新连接到达。\n\nServerSocketChannel也可以设置成非阻塞模式。在非阻塞模式下，`accept()`方法会立刻返回，如果还没有新进来的连接,返回的将是`null`。\n\n```java\n//打开通道并监听新进来的连接\nServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\nserverSocketChannel.socket().bind(new InetSocketAddress(9999));\nwhile(true){\n    SocketChannel socketChannel = serverSocketChannel.accept();\n    //do something with socketChannel...\n}\n```\n\n## DatagramChannel\n\nDatagramChannel是一个能收发UDP包的通道。因为UDP是无连接的网络协议，所以不能像其它通道那样读取和写入。它发送和接收的是数据包。\n\n```java\n//打开DatagramChannel\nDatagramChannel channel = DatagramChannel.open();\nchannel.socket().bind(new InetSocketAddress(9999));\n\n//通过receive()方法从DatagramChannel接收数据到指定的Buffer，如果Buffer容不下收到的数据，多出的数据将被丢弃\nByteBuffer buf = ByteBuffer.allocate(48);\nbuf.clear();\nchannel.receive(buf);\n\n//通过send()方法从DatagramChannel发送数据\nString newData = \"New String to write to file...\" + System.currentTimeMillis();\nByteBuffer buf = ByteBuffer.allocate(48);\nbuf.clear();\nbuf.put(newData.getBytes());\nbuf.flip();\nint bytesSent = channel.send(buf, new InetSocketAddress(\"jenkov.com\", 80));\n```\n\n# Buffer\n\nBuffer本质是一块可以写入数据，并可以从中读取数据的内存，用于和通道进行交互，过程如下：\n- 写入数据到Buffer\n- 调用`flip()`方法\n- 从Buffer中读取数据\n- 调用`clear()`方法或者`compact()`方法\n\n其中`flip()`方法是将Buffer从写模式切换到读模式，`clear()`方法会清空整个缓冲区，`compact()`方法只会清除已经读过的数据并将所有未读的数据拷贝到Buffer起始处。\n\nBuffer有三个属性：\n- capacity\n- position：当写数据到Buffer中时，position表示当前的位置；当从Buffer读取数据时，也是从当前位置开始读；将Buffer从写模式切换到读模式，position会被重置为0。\n- limit：在写模式下，limit表示你最多能往Buffer里写多少数据，此时limit等于capacity；在读模式下，limit表示最多能读到多少数据，因此，当切换Buffer到读模式时，limit会被设置成写模式下的position值。\n\nBuffer有以下几种类型，它们代表了不同的数据类型：\n- ByteBuffer\n- MappedByteBuffer\n- CharBuffer\n- DoubleBuffer\n- FloatBuffer\n- IntBuffer\n- LongBuffer\n- ShortBuffer\n\n## Buffer的分配\n\n要想获得一个Buffer对象首先要进行分配。每一个Buffer类都有一个allocate方法：\n```java\nByteBuffer buf = ByteBuffer.allocate(48);\n```\n\n## 向Buffer写数据\n\n写数据到Buffer有两种方式：\n- 从Channel写到Buffer。\n- 通过Buffer的`put()`方法写到Buffer里。\n\n```java\nint bytesRead = inChannel.read(buf); //read into buffer.\n\nbuf.put(127);\n```\n\n## 从Buffer读数据\n\n从Buffer中读取数据有两种方式：\n- 从Buffer读取数据到Channel。\n- 使用get()方法从Buffer中读取数据。\n\n```java\nint bytesWritten = inChannel.write(buf);\n\nbyte aByte = buf.get();\n```\n\n## rewind()方法\n\n`rewind()`将position设回0，所以可以重读Buffer中的所有数据。limit保持不变，仍然表示能从Buffer中读取多少个元素。\n\n# Selector\n\nSelector是NIO中能够检测一到多个通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接。\n\n## 创建并注册\n\n与Selector一起使用时，Channel必须处于非阻塞模式下。这意味着不能将FileChannel与Selector一起使用，因为FileChannel不能切换到非阻塞模式。\n\n```java\n\t//Selector的创建\n\tSelector selector = Selector.open();\n    \n   //向Selector注册通道\n   channel.configureBlocking(false);\n\tSelectionKey key = channel.register(selector,\n   Selectionkey.OP_READ);\n```\n\n注意`register()`方法的第二个参数。这是一个interest集合，意思是在通过Selector监听Channel时对什么事件感兴趣。可以监听四种不同类型的事件，用SelectionKey的四个常量来表示:\n- `SelectionKey.OP_CONNECT`：某个channel成功连接到另一个服务器称为“连接就绪”\n- `SelectionKey.OP_ACCEPT`：一个server socket channel准备好接收新进入的连接称为“接收就绪”\n- `SelectionKey.OP_READ`：一个有数据可读的通道可以说是“读就绪”\n- `SelectionKey.OP_WRITE`：等待写数据的通道可以说是“写就绪”。\n\n如果对不止一种事件感兴趣，那么可以用“位或”操作符将常量连接起来，如`int interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;`\n\n## SelectionKey\n\n当向Selector注册Channel时，`register()`法会返回一个SelectionKey对象，这个对象包含以下几个属性：\n- terest集合\n- ready集合\n- Channel\n- Selector\n- 附加的对象（可选）\n\n### interest集合\n\n可以用位与操作interest集合和给定的SelectionKey常量来确定某个事件是否在interest集合中。\n\n```java\nint interestSet = selectionKey.interestOps();\n\nboolean isInterestedInAccept  = (interestSet & SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT；\nboolean isInterestedInConnect = interestSet & SelectionKey.OP_CONNECT;\nboolean isInterestedInRead    = interestSet & SelectionKey.OP_READ;\nboolean isInterestedInWrite   = interestSet & SelectionKey.OP_WRITE;\n```\n\n### ready集合\n\nready集合是通道已经准备就绪的操作的集合。可以用像检测interest集合那样的方法，来检测channel中什么事件或操作已经就绪，也可以通过如下的方法：\n```java\nselectionKey.isAcceptable();\nselectionKey.isConnectable();\nselectionKey.isReadable();\nselectionKey.isWritable();\n```\n\n### Channel Selector\n\n```java\nChannel  channel  = selectionKey.channel();\nSelector selector = selectionKey.selector();\n```\n\n### 附加的对象\n\n可以将一个对象或者更多信息附着到SelectionKey上，这样就能方便的识别某个给定的通道。使用方法如下：\n\n```java\nselectionKey.attach(theObject);\nObject attachedObj = selectionKey.attachment();\n```\n\n## 选择通道\n\n一旦向Selector注册了一或多个通道，就可以调用`select()`方法选择就绪的通道，方法返回已经就绪的通道数目。`select()`阻塞到至少有一个通道在你注册的事件上就绪了，而`selectNow()`不会阻塞。\n\n一旦调用了`select()`方法，并且返回值表明有一个或更多个通道就绪了，就可以通过调用`selectedKeys()`方法返回就绪通道的集合：\n```java\n\tSet selectedKeys = selector.selectedKeys();\n```\n\n之后就可以通过遍历这个集合来访问就绪的通道：\n```java\nSet selectedKeys = selector.selectedKeys();\nIterator keyIterator = selectedKeys.iterator();\nwhile(keyIterator.hasNext()) {\n    SelectionKey key = keyIterator.next();\n    if(key.isAcceptable()) {\n        // a connection was accepted by a ServerSocketChannel.\n    } else if (key.isConnectable()) {\n        // a connection was established with a remote server.\n    } else if (key.isReadable()) {\n        // a channel is ready for reading\n    } else if (key.isWritable()) {\n        // a channel is ready for writing\n    }\n    keyIterator.remove();\n}\n```\n注意每次迭代末尾的`keyIterator.remove()`调用。Selector不会自己从集合中移除SelectionKey实例，必须在处理完通道时自己移除。下次该通道变成就绪时，Selector会再次将其放入集合中。\n\n## 关闭\n\n用完Selector后调用其`close()`方法会关闭该Selector，且使注册到该Selector上的所有SelectionKey实例无效，但通道本身并不会关闭。\n\n# Scatter/Gather\n\nJava NIO支持scatter/gather，scatter是指数据从一个channel读取到多个buffer中，而gather则是指数据从多个buffer写入到同一个channel。scatter/gather经常用于需要将传输的数据分开处理的场合，例如传输一个由消息头和消息体组成的消息，你可能会将消息体和消息头分散到不同的buffer中，这样可以方便的处理消息头和消息体。\n\n```java\nByteBuffer header = ByteBuffer.allocate(128);\nByteBuffer body   = ByteBuffer.allocate(1024);\nByteBuffer[] bufferArray = { header, body };\nchannel.read(bufferArray);\n\nByteBuffer header = ByteBuffer.allocate(128);\nByteBuffer body   = ByteBuffer.allocate(1024);\nByteBuffer[] bufferArray = { header, body };\nchannel.write(bufferArray);\n```\n\n注意，Scattering Reads在移动下一个buffer前，必须填满当前的buffer，这意味着它不适用于动态消息，而Gathering Writes只有position和limit之间的数据才会被写入，因此能较好的处理动态消息。\n\n# 通道之间的数据传输\n\n如果两个通道中有一个是FileChannel，那么可以直接将数据从一个通道传输到另外一个通道。\n\n## transferFrom()\n\n`transferFrom()`方法可以将数据从源channel传输到FileChannel中：\n```java\nRandomAccessFile fromFile = new RandomAccessFile(\"fromFile.txt\", \"rw\");\nFileChannel fromChannel = fromFile.getChannel();\n\nRandomAccessFile toFile = new RandomAccessFile(\"toFile.txt\", \"rw\");\nFileChannel toChannel = toFile.getChannel();\n\nlong position = 0;\nlong count = fromChannel.size();\n\ntoChannel.transferFrom(position, count, fromChannel);\n```\n\n## transferTo()\n\n`transferTo()`方法将数据从FileChannel传输到其他的channel中。\n\n```java\nRandomAccessFile fromFile = new RandomAccessFile(\"fromFile.txt\", \"rw\");\nFileChannel      fromChannel = fromFile.getChannel();\n\nRandomAccessFile toFile = new RandomAccessFile(\"toFile.txt\", \"rw\");\nFileChannel      toChannel = toFile.getChannel();\n\nlong position = 0;\nlong count = fromChannel.size();\n\nfromChannel.transferTo(position, count, toChannel);\n```\n\n# Path\n\nPath接口表示的是一个与平台无关的路径，既可以是绝对路径也可以是相对路径，文件和目录都用Path表示。\n\n## 创建Path\n\n可以使用Paths工具类的工厂方法创建一个Path对象：\n\n```java\nPath path = Paths.get(\"C:\\\\DATA\\\\test.txt\");\n\nPath projects = Paths.get(\"d:\\\\data\", \"projects\");\n\nPath currentDir = Paths.get(\".\");\nPath parentDir = Paths.get(\"..\");\n```\n\n## normalize()\n\n`normalize()`方法可以标准化路径，它会处理路径中的相对路径，去除`.` `..`：\n```java\nPath path = Paths.get(\"c:/Z_DATA/./test.txt\");\nSystem.out.println(\"path = \" + path);\n\npath = path.normalize();\nSystem.out.println(\"path = \" + path);\n\n//输出\npath = c:\\Z_DATA\\.\\test.txt\npath = c:\\Z_DATA\\test.txt\n```\n\n\n# Files\n\nFiles工具类封装提供了一些操作文件系统中文件的工具方法，往往和和Path一起使用。\n\n## exists()\n\n`exists()`可以判断一个Path在文件系统中是否存在。\n\n## createDirctory()\n\n在调用创建方法前最好先检查是否存在，如果已经存在会抛出`FileAlreadyExistsException`异常。\n\n```java\nPath newDir = Paths.get(\"c:/Z_DATA/newDir\");\ntry {\n    if(!Files.exists(newDir)) {\n        Files.createDirectory(newDir);\n    }\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n## copy()\n\n`copy()`只能复制到不存在的路径，如果复制的目标文件已存在则会抛出异常。强制覆盖已存在文件也是可以的，需要增加相应参数：\n\n```java\nPath sourcePath = Paths.get(classPath,\"nio-data.txt\");\nPath targetPath = Paths.get(classPath,\"nio-data-copy.txt\");\ntry {\n    Files.copy(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING); // 复制并覆盖已有文件\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n## move()\n\nJava NIO Files类同样提供了移动文件的方法。\n\n```java\nPath sourcePath = Paths.get(classPath,\"nio-data.txt\");\nPath targetPath = Paths.get(classPath,\"nio-data-copy.txt\");\ntry {\n    Files.move(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING); // 移动并覆盖已有文件\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n## delete()\n\n删除文件或目录\n\n```java\nFiles.delete(targetPath);\n```\n\n如果删除的文件或目录不存在会抛出`IOException`异常。\n\n# AsynchronousFileChannel\n\n使用AsynchronousFileChannel可以实现异步地读取和写入文件数据。\n\n## 创建\n\n我们可以使用AsynchronousFileChannel提供的静态方法`open()`创建它。\n\n```java\nPath path = Paths.get(\"data/test.xml\");\nAsynchronousFileChannel fileChannel =\n    AsynchronousFileChannel.open(path, StandardOpenOption.READ);\n```\n\n## 读取数据\n\nAsynchronousFileChannel提供了两种读取数据的方式，都是调用它本身的`read()`方法。\n\n### 使用Futrue读取数据\n\n第一种方式是调用AsynchronousFileChannel的`read()`方法，该方法返回一个`Future`类型的对象。\n\n```java\nAsynchronousFileChannel fileChannel = \n    AsynchronousFileChannel.open(path, StandardOpenOption.READ);\n\nByteBuffer buffer = ByteBuffer.allocate(1024);\nlong position = 0;\n\nFuture<Integer> operation = fileChannel.read(buffer, position);\n\nwhile(!operation.isDone());\n\nbuffer.flip();\nbyte[] data = new byte[buffer.limit()];\nbuffer.get(data);\nSystem.out.println(new String(data));\nbuffer.clear();\n```\n以上代码`read()`方法会立即返回，即使整个读的过程还没有完全结束。我们可以通过`Future.isDone()`来检查读取是否完成。\n\n### 使用CompletionHandler读取数据\n\n第二种读取数据的方式是调用AsynchronousFileChannel的另一个`read()`方法，该方法需要一个`CompletionHandler`作为参数。\n\n```java\nfileChannel.read(buffer, position, buffer, new CompletionHandler<Integer, ByteBuffer>() {\n    @Override\n    public void completed(Integer result, ByteBuffer attachment) {\n        System.out.println(\"result = \" + result);\n\n        attachment.flip();\n        byte[] data = new byte[attachment.limit()];\n        attachment.get(data);\n        System.out.println(new String(data));\n        attachment.clear();\n    }\n\n    @Override\n    public void failed(Throwable exc, ByteBuffer attachment) {\n\n    }\n});\n```\n\n一旦读取操作完成，`CompletionHandler`的`complete()`方法将会被调用。它的第一个参数是个`Integer`类型，表示读取的字节数。第二个参数`attachment`是`ByteBuffer`类型的，用来存储读取的数据(`ByteBuffer`也可以换成其他合适的对象方便数据写入)。它其实就是由`read()`方法的第三个参数。读取失败的时候，`CompletionHandler`的`failed()`方法会被调用。\n\n## 写入数据\n\n就像读取一样，我们同样有两种方式向AsynchronousFileChannel写入数据。\n\n### 使用Future读取数据\n\n```java\nPath path = Paths.get(\"data/test-write.txt\");\nAsynchronousFileChannel fileChannel = \n    AsynchronousFileChannel.open(path, StandardOpenOption.WRITE);\n\nByteBuffer buffer = ByteBuffer.allocate(1024);\nlong position = 0;\n\nbuffer.put(\"test data\".getBytes());\nbuffer.flip();\n\nFuture<Integer> operation = fileChannel.write(buffer, position);\nbuffer.clear();\n\nwhile(!operation.isDone());\n\nSystem.out.println(\"Write done\");\n```\n\n注意，写入目标文件要提前创建好，如果它不存在的话，`write()`方法会抛出一个 `NoSuchFileException`。\n\n### 使用CompletionHandler写入数据\n\n```java\nPath path = Paths.get(\"data/test-write.txt\");\nif(!Files.exists(path)){\n    Files.createFile(path);\n}\nAsynchronousFileChannel fileChannel = \n    AsynchronousFileChannel.open(path, StandardOpenOption.WRITE);\n\nByteBuffer buffer = ByteBuffer.allocate(1024);\nlong position = 0;\n\nbuffer.put(\"test data\".getBytes());\nbuffer.flip();\n\nfileChannel.write(buffer, position, buffer, new CompletionHandler<Integer, ByteBuffer>() {\n\n    @Override\n    public void completed(Integer result, ByteBuffer attachment) {\n        System.out.println(\"bytes written: \" + result);\n    }\n\n    @Override\n    public void failed(Throwable exc, ByteBuffer attachment) {\n        System.out.println(\"Write failed\");\n        exc.printStackTrace();\n    }\n});\n```\n\n当写入程序完成时，CompletionHandler的`completed()`方法将会被调用，相反的如果写入失败则会调用`failed()`方法。\n\n# 参考资料\n\n- [Java NIO 系列教程](http://ifeve.com/java-nio-all/)\n\n\n\n\n\n\n\n","tags":["NIO"],"categories":["NIO"]},{"title":"HTTPS的过程与原理","url":"/2019/02/17/HTTPS的过程与原理/","content":"由于HTTP存在明文通信、无法验证服务器的真实性等弊端，使用HTTPS的人变得越来越多。HTTPS并不是新的协议，而是在HTTP基础之上加一层TLS模块，TLS提供了加密、认证以及消息完整性校验的服务，从而保证通信的安全性。\n\n<!--more-->\n\n## HTTPS过程\n\nHTTPS总的流程就相当于使用非对称加密的方式来传递对称私钥，之后的通信就可以使用这个私钥进行对称加密了。\n\n![HTTPS的过程与原理](http://blog.default.nanwulife.com/2012072310244445.png)\n\n### 客户端发起HTTPS请求\n\n用户在浏览器里输入一个https网址，然后连接到server的443端口。\n\n### 服务端的配置\n\n采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面。\n\n### 传送证书\n\n这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。\n\n### 客户端解析证书\n\n这部分工作是由客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值。然后用证书对该随机值进行加密。\n\n### 传送加密信息\n\n这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。\n\n### 服务段解密信息\n\n服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。\n\n### 传输加密后的信息\n\n这部分信息是服务端用私钥加密后的信息，可以在客户端被还原。\n\n### 客户端解密信息\n\n客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。\n\n## 证书认证\n\n单纯的加密是无法保证通信安全的，TLS还需要通过证书机制来保证访问的服务器是真实的。\n\n![](http://blog.default.nanwulife.com/2402164-db6c5a0d348fcc15.png)\n\n证书是由权威机构颁发的，服务端如果能够提供一个合法的证书，说明这个服务端是合法的，可以被信任。整个证书的认证过程如下：\n\n- 客户端获取到了站点证书，拿到了站点的公钥\n- 要验证站点可信后，才能使用其公钥，因此客户端找到其站点证书颁发者的信息\n- 站点证书的颁发者验证了服务端站点是可信的，但客户端依然不清楚该颁发者是否可信\n- 再往上回溯，找到了认证了中间证书商的根证书颁发者。由于根证书颁发者非常少，我们浏览器之前就认识了，因此可以认为根证书颁发者是可信的\n- 一路倒推，证书颁发者可信，那么它所颁发的所有站点也是可信的，最终确定我们所要访问的服务端是可信的\n- 客户端使用证书中包含的公钥，继续完成TLS的握手过程\n\n如果证书过期了、颁发机构不受信任或者证书绑定的域名和请求的域名不一致等原因，浏览器会抛出异常信息，说明此时的访问是不安全的。\n\n## 参考资料\n\n- [图解HTTPS](http://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html)\n- [TLS整理（下）：TLS如何保证安全](https://www.jianshu.com/p/24af67c40e8d)\n\n\n\n\n","tags":["HTTPS","TLS"],"categories":["计算机网络"]},{"title":"InnoDB和MyISAM的区别","url":"/2019/02/16/InnoDB和MyISAM的区别/","content":"1. InnoDB支持事务，MyISAM不支持。\n2. InnoDB支持外键，而MyISAM不支持。\n3. InnoDB是聚集索引，而MyISAM是非聚集索引。\n4. InnoDB不保存表的具体行数，执行`select count(*) from table`时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快。","tags":["MyISAM","InnoDB"],"categories":["MySQL"]},{"title":"访问一个网页的全过程","url":"/2019/02/13/访问一个网页的全过程/","content":"1. 客户端用户从浏览器输入`www.google.com`网站网址后回车，系统会查询本地hosts文件及DNS缓存信息，查找是否存在网址对应的IP解析记录。如果有就直接获取到IP地址，然后访问网站，一般第一次请求时，DNS缓存是没有解析记录的。\n\n<!--more-->\n\n3. 如果hosts与DNS缓存都没有解析记录时，系统会把浏览器的解析请求交给客户端本地设置的DNS服务器地址解析，如果本地DNS服务器的本地缓存有对应的解析记录，就会直接返回IP地址。\n\n5. 如果本地DNS服务器没有对应的解析记录，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(`google.com`)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找`google.com`域服务器，重复上面的动作，进行查询，直至找到`www.google.com`主机。\n\n6. 如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。\n\n5. 通过DNS解析拿到了ip之后，就可以通过ip向服务器发送http请求了，因为http工作在应用层，tcp工作在传输层，所以发生http请求之前，还会进行tcp的三次握手建立连接。\n6. 在连接成功建立后，开始向web服务器发送请求，当浏览器向Web服务器发出请求时，它向服务器传递了一个数据块，也就是请求报文，请求报文由`请求方法 URI 协议/版本`、`请求头`、`请求正文`三部分组成。\n\n6. 请求报文由应用层向下，依次经过传输层、网络层、数据链路层与物理层。应用层的任务是通过应用进程间的交互来完成特定网络应用，有HTTP、DNS等众多协议，传输层的主要任务则是负责向两台主机进程之间的通信提供通用的数据传输服务，包括TCP与UDP两种协议，TCP是面向连接的、可靠的的数据传输服务，而UDP提供无连接的、不可靠的数据传输服务，TCP主要提供完整性服务，UDP主要提供及时性服务；传输层是为主机中的进程提供数据传输服务，而网络层则是为不同主机提供数据传输服务，这一层有IP协议，由于主机之间可以有很多链路，数据链路层则是为同一链路的主机提供数据传输服务。最终物理层考虑怎样在传输媒体上传输数据比特流。数据通过以太网电缆传送到服务器，服务器拿到数据包后同样再由数据链路层、网络层、传输层依次向上解析，应用层最终收到请求内容。\n\n7. 服务器收到请求报文之后，就会将响应报文返回给客户端，响应报文由`协议/版本 状态码 描述`、`响应头`、`响应正文`三部分组成。这里的状态码分为1XX（信息类）、2XX（成功类）、3XX（重定向类）、4XX（客户端错误）、5XX（服务器错误）。\n\n8. 当浏览器加载一个完整的页面时，还需要与服务器断开连接，这个过程就是tcp的四次挥手。\n\n9. 在HTTP协议的初始版本中，每进行一次HTTP通信就要断开一次TCP连接。因此，每次的请求都会造成无谓的TCP连接建立与断开，增加通信量的开销。为了解决这个问题，HTTP/1.1使用长连接减少开销，只要任意一端没有明确提出断开连接，就保持TCP连接状态，当客户端再次访问这个服务器上的网页时，会继续使用这一条已经建立的连接。","categories":["计算机网络"]},{"title":"多线程断点续传下载器","url":"/2019/02/12/多线程断点续传下载器/","content":"最近在研究多线程的断点续传下载。断点续传的原理其实很简单，就是在下载时将下载进度保存到一个临时文件中，如果下载过程遇到什么意外中断了，下次下载同一个文件时就可以从临时文件中读取到上次下载发生中断时的进度，然后从这个进度开始继续下载。\n\n<!--more-->\n\n要使用断点续传下载首先要判断服务器是否支持范围请求，假如在响应中存在`Accept-Ranges`首部并且它的值不为 `none`，那么表示该服务器支持范围请求。通常情况下Web服务器会默认开启对范围请求的支持，我们只需要在请求头中加入`Range`首部来指示服务器应该返回文件的哪一部分，例如使用`Range: bytes=0-1023`返回某个资源的前1024个字节，在代码中体现为：`httpcon.setRequestProperty(\"Range\", \"bytes=\" + startPos + \"-\" + endPos);`，这时候服务器会返回状态码为`206 Partial Content`的响应表示成功。\n\n项目中还使用了多线程进行分块下载，要注意的是并非线程数越多下载就越快（受限于带宽），一般开十个线程就差不多了，多线程之所以能提高下载速度的原因也很复杂，具体可以参考[为什么多线程下载能加速？](https://www.zhihu.com/question/19914902)以及[为什么多 TCP 连接分块下载比单连接下载快？](https://www.zhihu.com/question/21813579)。简单来说就是当链路存在争用的情况下，由于传输网络的带宽有限，每个TCP连接可以得到均等的带宽。在多用户环境下，一个用户拥有越多TCP连接，获得的带宽越大。除此之外，由于TCP的拥塞控制机制被设计的十分友好，只要丢了点包就会极大的减慢速率，而此时可能并没有发生拥塞，导致单个连接没法最大化的利用带宽。\n\n下图为该项目的执行流程：\n\n\n![](http://blog.algorithms.nanwulife.com/%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0.jpg)\n\n以下为项目源码：\n\n```java\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.RandomAccessFile;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * @Project: breakpoint\n * @Description:\n * @Author: Cenjie\n * @Date: Created in 2019/2/11\n */\npublic class Downloader {\n    private String urlStr;\n    private int threadNum;\n    private String filename;\n    private String filename_tmp;\n    private CountDownLatch latch;\n    private long fileLength;\n    private long lenPerThread;  //每个线程的下载大小\n    private long[] start;    //保留每个线程下载的起始位置。\n    private long[] end;      //保留每个线程下载的结束位置。\n    private URL url;\n\n    public Downloader(String urlStr, int threadNum) {\n        this.urlStr = urlStr;\n        this.threadNum = threadNum;\n        start = new long[this.threadNum];\n        end = new long[this.threadNum];\n        latch = new CountDownLatch(this.threadNum);\n    }\n\n    /**\n     * 文件下载\n     */\n    public void download() {\n        File file = null;\n        File file_tmp = null;\n\n        //从文件链接中获取文件名\n        filename = urlStr.substring(urlStr.lastIndexOf('/') + 1, urlStr\n                .contains(\"?\") ? urlStr.lastIndexOf('?') : urlStr.length());\n        //设置临时文件的文件名\n        filename_tmp = filename + \"_tmp\";\n\n        try {\n            //创建url\n            url = new URL(urlStr);\n\n            //打开下载链接，并且得到一个HttpURLConnection的一个对象httpcon\n            HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();\n            httpcon.setRequestMethod(\"GET\");\n\n            //获取请求资源的总长度，为Long型\n            fileLength = httpcon.getContentLengthLong();\n\n            //下载文件和临时文件\n            file = new File(filename);\n            file_tmp = new File(filename_tmp);\n\n            //每个线程需下载的资源大小；由于文件大小不确定，为避免数据丢失\n            lenPerThread = fileLength % threadNum == 0 ? fileLength / threadNum : fileLength / threadNum + 1;\n            //打印下载信息\n            System.out.println(\"文件名: \" + filename + \"，\" + \"文件大小：\"\n                    + fileLength + \"字节，每个线程下载大小：\" + lenPerThread + \"字节\");\n\n            if (file.exists() && file.length() == fileLength) {\n                System.out.println(\"文件已存在\");\n                return;\n            } else {\n                setBreakPoint(file_tmp);\n                ExecutorService exec = Executors.newCachedThreadPool();\n                for (int i = 0; i < threadNum; i++) {\n                    exec.execute(new DownLoadThread(start[i], end[i],\n                            this, i));\n                }\n                latch.await();  //当所有线程下载完毕后，才会从此阻塞中返回\n                System.out.println(\"文件下载完成\");\n                exec.shutdown();\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        //下载完成后，判断文件是否完整，并删除临时文件\n        if (file.length() == fileLength) {\n            if (file_tmp.exists()) {\n                file_tmp.delete();\n                System.out.println(\"删除临时文件完成，下载结束\");\n            }\n        } else{\n            System.out.println(\"该文件不完整\");\n        }\n    }\n\n    /**\n     * 读取临时文件中记录的断点，加载每个线程的任务区间，若临时文件不存在，则重新分配每个线程的任务区间\n     * @param file_tmp\n     */\n    private void setBreakPoint(File file_tmp) {\n        RandomAccessFile random_file_tmp = null;\n        System.out.println(\"开始分配任务区间：\");\n        try {\n            //如果存在临时文件，则从临时文件记录的位置继续下载\n            if (file_tmp.exists()) {\n                System.out.println(\"找到临时文件，将从断点处恢复下载...\");\n                random_file_tmp = new RandomAccessFile(file_tmp, \"rw\");\n                for (int i = 0; i < threadNum; i++) {\n                    random_file_tmp.seek(i * 8);\n                    start[i] = random_file_tmp.readLong();\n\n                    random_file_tmp.seek(1000 + i * 8);\n                    end[i] = random_file_tmp.readLong();\n\n                    System.out.println(\"线程\" + i + \" 起始位置：\"\n                            + start[i] + \"，结束位置：\" + end[i]);\n                }\n            } else {\n                System.out.println(\"未找到临时文件，开始一个新的下载...\");\n                random_file_tmp = new RandomAccessFile(file_tmp, \"rw\");\n\n                for (int i = 0; i < threadNum; i++) {\n                    //设置线程i的下载起始位置\n                    start[i] = lenPerThread * i;\n                    if (i == threadNum - 1) {\n                        //当线程i为最后一个线程时，设置线程i的下载结束位置为文件长度\n                        end[i] = fileLength - 1;\n                    } else {\n                        end[i] = lenPerThread * (i + 1) - 1;\n                    }\n\n                    random_file_tmp.seek(i * 8);\n                    random_file_tmp.writeLong(start[i]);\n\n                    random_file_tmp.seek(1000 + i * 8);\n                    random_file_tmp.writeLong(end[i]);\n\n                    System.out.println(\"线程\" + i + \" 起始位置：\"\n                            + start[i] + \"，结束位置：\" + end[i]);\n                }\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (random_file_tmp != null) {\n                    random_file_tmp.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    class DownLoadThread implements Runnable {\n        private int id;         //线程id\n        private long startPos;  //线程下载起始位置\n        private long endPos;    //线程下载结束位置\n        private Downloader task;\n        private RandomAccessFile rand_file;\n        private RandomAccessFile rand_file_tmp;\n\n        public DownLoadThread(long startPos, long endPos,\n                              Downloader task, int id) {\n            this.startPos = startPos;\n            this.endPos = endPos;\n            this.task = task;\n            this.id = id;\n            try {\n                this.rand_file = new RandomAccessFile(this.task.filename, \"rw\");\n                this.rand_file_tmp = new RandomAccessFile(this.task.filename_tmp, \"rw\");\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void run() {\n\n            HttpURLConnection httpcon;\n            InputStream is = null;\n            int length;\n\n            System.out.println(\"线程\" + id + \" 开始下载...\");\n\n            while (true) {\n                try {\n                    httpcon = (HttpURLConnection) task.url.openConnection();\n                    httpcon.setRequestMethod(\"GET\");\n\n                    //防止网络阻塞，设置指定的超时时间；单位都是ms。超过指定时间，就会抛出异常\n                    httpcon.setReadTimeout(20000);//读取数据的超时设置\n                    httpcon.setConnectTimeout(20000);//连接的超时设置\n\n                    if (startPos < endPos) {\n\n                        //向服务器请求指定区间段的数据，这是实现断点续传的根本。\n                        httpcon.setRequestProperty(\"Range\", \"bytes=\" + startPos + \"-\" + endPos);\n\n                        System.out.println(\"线程\" + id + \" 长度：\" + (endPos - startPos + 1));\n\n                        rand_file.seek(startPos);\n\n                        is = httpcon.getInputStream();//获取服务器返回的资源流\n                        long count = 0L;\n                        byte[] buf = new byte[1024];\n\n                        while ((length = is.read(buf)) != -1) {\n                            count += length;\n                            rand_file.write(buf, 0, length);\n\n                            //不断更新每个线程下载资源的起始位置，并写入临时文件\n                            startPos += length;\n                            rand_file_tmp.seek(id * 8);\n                            rand_file_tmp.writeLong(startPos);\n                        }\n                        System.out.println(\"线程\" + id\n                                + \" 总下载大小: \" + count);\n\n                        //关闭流\n                        is.close();\n                        httpcon.disconnect();\n                        rand_file.close();\n                        rand_file_tmp.close();\n                    }\n                    latch.countDown();\n                    System.out.println(\"线程\" + id + \" 下载完成\");\n                    break;\n                } catch (IOException e) {\n                    e.printStackTrace();\n                } finally {\n                    try {\n                        if (is != null) {\n                            is.close();\n                        }\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int threadNum = 10;\n        String url = \"http://blog.default.nanwulife.com/pexels-photo-640947.jpeg\";\n\n        Downloader load = new Downloader(url, threadNum);\n        load.download();\n    }\n}\n\n```","tags":["项目","多线程","断点续传"],"categories":["项目"]},{"title":"Java线程池与Executor框架","url":"/2019/02/10/Executor框架/","content":"## 为什么要使用线程池\n\n- 降低资源消耗：通过重复利用已创建的线程降低线程创建和销毁造成的消耗。\n- 提高响应速度：当任务到达时，任务可以不需要等到线程创建就能立即执行。\n- 提高线程的可管理性：线程是稀缺资源，使用线程池可以进行统一分配、调优和监控。\n\n<!--more-->\n\n## 线程池的实现原理\n\n![](http://blog.default.nanwulife.com/1787733-248f411a83669fff.webp)\n\n1. 如果当前运行的线程少于`corePoolSize`，则创建新线程来执行任务（这一步需获取全局锁）。\n2. 如果运行的线程等于或多于`corePoolSize`，则将任务加入`BlockingQueue`。\n3. 如果队列已满，则创建新的线程来处理任务（这一步需获取全局锁）。\n4. 如果创建新线程将使当前运行的线程超出`maximumPoolSize`，任务将被拒绝，并使用相关饱和策略进行处理，默认是直接抛出异常。\n\n之所以采用这个步骤，是因为在执行`execute()`方法时，尽可能地避免获取全局锁。在线程池完成预热之后（当前运行的线程数大于等于`corePoolSize`），几乎所有的`execute()`方法调用都是执行步骤2，而步骤2不需要获取全局锁。\n\n## Executor框架\n\nExecutor框架内部使用了线程池机制，它在`java.util.cocurrent`包下，通过该框架来控制线程的启动、执行和关闭，可以简化并发编程的操作。因此，通过`Executor`来启动线程比使用`Thread`的`start()`方法更易管理且效率更好。\n\n## Executor框架的结构与成员\n\n![](http://blog.default.nanwulife.com/6021163-4e29a753826e7d23.webp)\n\n### ThreadPoolExecutor\n\n`ThreadPoolExecutor`是Executor框架的最核心的类，是线程池的实现类，用来执行被提交的任务，通常使用工厂类`Executors`来创建，有以下三种类型：\n- `FixedThreadPool`：线程数固定。适用于为了满足资源管理而需要限制线程数的场景，适用于负载比较重的服务器。\n- `SingleThreadExecutor`：只有一个线程。适用于需要保证顺序地执行各个任务，并且在任意时间点不会有多个线程是活动的场景。\n- `CachedThreadPool`：根据需要创建新线程。空闲线程等待新任务超过60秒就会被终止。适用于执行很多短期异步任务的小程序，或者是负载较轻的服务器。\n\n`FixedThreadPool`和`SingleThreadExecutor`使用无界队列`LinkedBlockingQueue`作为线程池的工作队列。`CachedThreadPool`使用没有容量的`SynchronousQueue`作为线程池的工作队列。\n\n### ScheduledThreadPoolExecutor\n\n`ScheduledThreadPoolExecutor`继承自`ThreadPoolExecutor`，主要用来在给定的延迟之后运行任务，或者定期执行任务。`ScheduledThreadPoolExecutor`的功能与`Timer`类似，但`ScheduledThreadPoolExecutor`功能更强大、更灵活，`Timer`对应的是单个后台线程，而`ScheduledThreadPoolExecutor`可以在构造函数中指定多个对应的后台线程数。\n\n### FutureTask\n\n`Future`接口和实现`Future`接口的`FutureTask`类，代表异步计算的结果。`FutureTask`除了实现`Future`接口外，还实现了`Runnable`接口。可以把`FutureTask`交给`Executor`执行，也可以通过`submit()`方法返回一个`FutureTask`，然后执行`FutureTask.get()`方法。\n\n## 线程池的使用\n\n### 线程池的创建\n\n我们可以通过`ThreadPoolExecutor`来创建一个线程池：\n\n```java\nnew ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, milliseconds,runnableTaskQueue, threadFactory,handler);\n```\n\n当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其它空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小时就不再创建。\n\n### 向线程池提交任务\n\n可以使用`execute()`方法提交任务，但是`execute()`方法没有返回值，所以无法判断任务是否被线程池执行成功。也可以使用`submit()`方法来提交任务，它会返回一个`future`，可以通过这个`future`的`get()`方法来获取返回值，`get()`方法会阻塞直到任务完成。\n\n### 关闭线程池\n\n可以通过调用线程池的`shutdown()`或`shutdownNow()`方法来关闭线程池。\n\n- `shutdown()`先将线程池状态置为`SHUTDOWN`，停止接受外部提交的新任务，而等到正在执行的任务以及队列中等待的任务执行完才真正停止。\n- `shutdownNow()`先将线程池状态置为`STOP`，停止接受外部提交的新任务，忽略队列里等待的任务，使用`interrupt()`方法尝试将正在跑的任务中断，然后返回未执行的任务列表。\n\n注意，如果线程中没有`sleep`、`wait`、`Condition`等应用，`interrupt()`方法是无法中断当前的线程的。所以，`shutdownNow()`并不代表线程池一定立即就能退出，它也可能必须要等待所有正在执行的任务都执行完成了才能退出。\n\n\n## 参考资料\n\n- [聊聊并发（三）Java线程池的分析和使用](http://ifeve.com/java-threadpool/)","tags":["并发","Executor","线程池"],"categories":["并发"]},{"title":"Java中的并发工具类","url":"/2019/02/10/Java中的并发工具类/","content":"## CountdownLatch\n\n`CountDownLatch`是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程的操作执行完后再执行。例如，应用程序的主线程希望在负责启动框架服务的线程已经启动所有的框架服务之后再执行。\n\n<!--more-->\n\n`CountDownLatch`是通过一个计数器来实现的，计数器的初始值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就会减1。当计数器值到达0时，它表示所有的线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务。例如：\n\n```java\npublic class CountDownLatchTest{\n    static CountDownLatch c = new CountDownLatch(2);\n\n    public static void main(String[] args){\n        new Thread(new Runnable(){\n            @Override\n            public void run(){\n                System.out.println(1);\n                c.countDown();\n                System.out.println(2);\n                c.countDown();\n            }\n        }).start();\n\n        try {\n            c.await();\n        } catch (InterruptedException e) {\n        }\n        System.out.println(3);\n    }\n}\n```\n\n还可以通过创建一个初始计数为1的`CountDownLatch`，并让所有线程都在这个锁上等待，随后调用`countDown()`方法来同时启动多个线程。\n\n## CyclicBarrier\n\n同步屏障`CyclicBarrier`可以让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。例如：\n\n```java\npublic class CyclicBarrierTest {\n    static CyclicBarrier c = new CyclicBarrier(2);\n\n    public static void main(String[] args) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try{\n                    c.await();\n                } catch (Exception e){\n                }\n                System.out.println(1);\n            }\n        }).start();\n\n        try{\n            c.await();\n        }catch (Exception e){\n        }\n        System.out.println(2);\n    }\n}\n```\n\n## CyclicBarrier和CountDownLatch的区别\n\n`CountDownLatch`的计数器只能使用一次，而`CyclicBarrier`的计数器可以使用`reset()`方法重置。所以`CyclicBarrier`能处理更为复杂的业务场景。例如，如果计算发生错误，可以重置计数器，并让线程重新执行一次。\n\n## Semaphore\n\n\n`Semaphore`是用来控制同时访问特定资源的线程数量，它通过协调各个线程，以保证合理的使用公共资源。`Semaphore`的构造方法接受一个整型的数字，表示可用的许可证数量，线程使用`acquire()`方法获取一个许可证，如果没有许可证能够获得则被阻塞，使用完后调用`release()`方法归还许可证。还可以使用`tryAcquire()`方法尝试获取许可证，若获取成功，则立即返回true，若获取失败，则立即返回false。\n\n`Semaphore`可以用于流量控制，特别是公用资源有限的应用场景，比如数据库连接。如果线程数有几十个，而数据库的连接只有十个，那么就可以使用`Semaphore`控制同时获取数据库连接的个数。\n\n## 参考资料\n\n- 《Java并发编程的艺术》\n- [什么时候使用CountDownLatch](http://www.importnew.com/15731.html)","tags":["并发"],"categories":["并发"]},{"title":"Java并发编程基础","url":"/2019/02/09/Java并发编程基础/","content":"## 线程状态\n\nJava线程在运行的生命周期中可能处于以下6种不同的状态：\n\n| 状态名称 | 说明 |\n|:------ :|: ------ :|\n| NEW | 初始状态，线程被构建，但是还没调用`start()`方法 |\n| RUNNABLE | 运行状态，Java线程将操作系统中的就绪和运行两种状态笼统地称作“运行中” |\n| BLOCKED | 阻塞状态，表示线程阻塞于锁 |\n| WAITING | 无限期等待状态，进入该状态表示当前线程需要等待其它线程做出一些特定动作（通知或中断） |\n| TIME_WAITING | 限期等待状态，可以在指定的时间自行返回 |\n| TERMINATED | 终止状态，表示当前线程已经执行完毕 |\n\n<!--more-->\n\n![](http://blog.default.nanwulife.com/212748_11NT_1789589.jpg)\n\nJava将操作系统中的运行和就绪两个状态合并称为运行状态。阻塞状态是线程阻塞在进入`synchronized`关键字修饰的方法或代码块（获取锁）时的状态，但是阻塞在`Lock`接口的线程状态是等待状态。\n\n## Daemon线程\n\n用户线程是我们平常创建的普通线程，而守护线程则是用来服务于用户线程的一种支持型线程。当一个Java虚拟机中只存在守护线程的时候，Java虚拟机将会退出。可以在启动线程之前通过调用`Thread.setDaemon(true)`将该线程设置为守护线程。\n\n守护线程可用于实时监控和管理系统中的可回收资源。例如，Java垃圾回收线程就是一个典型的守护线程，当我们的程序中不再有任何运行中的Thread，程序就不会再产生垃圾，垃圾回收器也就无事可做，所以当垃圾回收线程是Java虚拟机上仅剩的线程时，Java虚拟机会自动退出。\n\n## 使用线程\n\n有三种使用线程的方法：\n1. 实现`Runnable`接口；\n2. 实现`Callable`接口；\n3. 继承`Thread`类。\n\n\n实现`Runnable`和`Callable`接口的类只能当做一个可以在线程中运行的任务，不是真正意义上的线程，因此最后还需要通过`Thread`来调用。可以说任务是通过线程驱动从而执行的。\n\n### 实现Runnable接口\n\n需要实现`run()`方法。通过`Thread`调用`start()`方法来启动线程。\n\n```java\npublic class MyRunnable implements Runnable {\n    public void run() {\n        // ...\n    }\n}\n\npublic static void main(String[] args) {\n    MyRunnable instance = new MyRunnable();\n    Thread thread = new Thread(instance);\n    thread.start();\n}\n```\n\n### 实现Callable接口\n\n与`Runnable`相比，`Callable`可以有返回值，返回值通过`FutureTask`进行封装。\n\n```java\npublic class MyCallable implements Callable<Integer> {\n    public Integer call() {\n        return 123;\n    }\n}\n\npublic static void main(String[] args) throws ExecutionException, InterruptedException {\n    MyCallable mc = new MyCallable();\n    FutureTask<Integer> ft = new FutureTask<>(mc);\n    Thread thread = new Thread(ft);\n    thread.start();\n    System.out.println(ft.get());\n}\n```\n\n### 继承Thread类\n\n同样也是需要实现`run()`方法，因为`Thread`类也实现了`Runable`接口。\n\n当调用`start()`方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待被调度，当一个线程被调度时会执行该线程的`run()`方法。\n\n```java\npublic class MyThread extends Thread {\n    public void run() {\n        // ...\n    }\n}\n\npublic static void main(String[] args) {\n    MyThread mt = new MyThread();\n    mt.start();\n}\n```\n\n### 对比\n\n实现接口会更好一些，因为：\n\n- Java不支持多重继承，因此继承了`Thread`类就无法继承其它类，但是可以实现多个接口。\n- 类可能只要求可执行就行，继承整个`Thread`类开销过大。\n\n## 等待/通知机制\n\n等待/通知机制是指一个线程A调用了对象O的`wait()`方法进入等待状态，而另一个线程B调用了对象O的`notify()`或者`notifyAll()`方法，线程A收到通知后从对象O的`wait()`方法返回，进而执行后续操作。以下为等待/通知的经典范式：\n\n```java\n//等待方\nsynchronized(对象){\n\twhile(条件不满足){\n    对象.wait();\n   }\n   对应的处理逻辑;\n}\n\n//通知方\nsynchronized(对象){\n\t改变条件\n   对象.notifyAll();\n}\n```\n\n`wait()`，`notify()`，`notifyAll()`方法只能用在同步方法或者同步控制块中使用，否则会在运行时抛出`IllegalMonitorStateException`。使用`wait()`挂起期间，线程会释放锁，这是因为如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行`notify()`或者`notifyAll()`来唤醒挂起的线程，造成死锁。\n\n注意，`wait()`是`Object`的方法，而`sleep()`是`Thread`的静态方法；`wait()`会释放锁，`sleep()`不会。\n\n## 线程之间的协作\n\n### Thread.join()\n\n在线程中调用另一个线程的`join()`方法，会将当前线程挂起，而不是忙等待，直到目标线程结束。\n\n### await() signal() signalAll()\n\n`java.util.concurrent`类库中提供了`Condition`类来实现线程之间的协调，可以在`Condition`上调用`await()`方法使线程等待，其它线程调用`signal()`或`signalAll()`方法唤醒等待的线程。\n\n相比于`wait()`这种等待方式，`await()`可以指定等待的条件，因此更加灵活。\n\n```java\npublic class AwaitSignalExample {\n\n    private Lock lock = new ReentrantLock();\n    private Condition condition = lock.newCondition();\n\n    public void before() {\n        lock.lock();\n        try {\n            System.out.println(\"before\");\n            condition.signalAll();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void after() {\n        lock.lock();\n        try {\n            condition.await();\n            System.out.println(\"after\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n    \n    public static void main(String[] args) {\n      ExecutorService executorService = Executors.newCachedThreadPool();\n      AwaitSignalExample example = new AwaitSignalExample();\n      executorService.execute(() -> example.after());\n      executorService.execute(() -> example.before());\n\t }\n\n}\n\n```\n\n## ThreadLocal\n\n`ThreadLocal`即线程变量，是一个以`ThreadLocal`对象为键、任意对象为值的存储结构。这个结构被附带在线程上，也就是说一个线程可以根据一个`ThreadLocal`对象查询到绑定在这个线程上的一个值。可以通过`set(T)`方法来设置一个值，在当前线程下再通过`get()`方法获取到原先设置的值。\n\n## 参考资料\n\n- 《Java并发编程的艺术》\n- [CS-Notes](https://cyc2018.github.io/CS-Notes/#/notes/Java%20%E5%B9%B6%E5%8F%91?id=%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B)","tags":["并发"],"categories":["并发"]},{"title":"final域的内存语义","url":"/2019/02/09/深入分析final关键字/","content":"\n对于`final`域，编译器和处理器要遵守两个重排序规则。\n\n1. 在构造函数内对一个`final`域的写入，与随后把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。\n2. 初次读一个包含`final`域的对象的引用，与随后初次读这个`final`域，这两个操作之间不能重排序。\n\n<!--more-->\n\n以上规则保证只要对象是正确构造的，那么不需要使用同步（指lock和volatile的使用）就可以保证任意线程都能看到这个`final`域在构造函数中被初始化之后的值。要实现这个效果，还需要保证在构造函数内部，不能让这个被构造对象的引用为其它线程所见，也就是对象引用不能在构造函数中“逸出”，因为此时的`final`域由于重排序等原因可能还没被初始化。","tags":["并发","final"],"categories":["并发"]},{"title":"顺序一致性模型与happens-before原则","url":"/2019/02/09/顺序一致性模型与happens-before规则/","content":"## 顺序一致性模型\n\n顺序一致性内存模型是一个理论参考模型，在设计的时候，处理器的内存模型和编程语言的内存模型都会以顺序一致性内存模型作为参考。顺序一致性内存模型有两大特性：\n- 一个线程中的所有操作必须按照程序的顺序来执行。\n- 不管程序是否同步，所有线程都只能看到一个单一的操作执行顺序。在顺序一致性内存模型中，每个操作都必须原子执行并且立刻对所有线程可见。\n\nJMM保证如果程序是正确同步的，程序的执行将具有顺序一致性，即程序的执行结果与该程序在顺序一致性内存模型中的执行结果相同。\n\n<!--more-->\n\n而对于未同步或未正确同步的多线程程序，JMM只提供最小安全性：线程执行时读取到的值要么是之前某个线程写入的值，要么是默认值（0，null，false），JMM保证线程读操作读取到的值不会无中生有的冒出来。为了实现最小安全性，JVM在堆上分配内存时，首先会对内存空间进行清零，然后才会在上面分配对象（JVM内部会同步这两个操作）。\n\n注意：对于未同步程序，JMM不保证对64位的long型和double型变量的写操作具有原子性。\n\n## happens-before\n\nhappens-before原则定义如下：\n\n1. 如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。\n2. 两个操作之间存在happens-before关系，并不意味着Java平台的具体实现一定要按照happens-before原则制定的顺序来执行。如果重排序之后的执行结果与按照happens-before关系来执行的结果一致，那么这种重排序并不非法。\n\n## 参考资料\n\n- 《Java并发编程的艺术》\n\n","tags":["并发","happens-before"],"categories":["并发"]},{"title":"深入分析synchronized关键字","url":"/2019/02/08/深入分析synchronized关键字/","content":"## 简介\n\n`synchronized`是Java中的关键字，是一种同步锁，可作用于一段代码或方法，既可以保证可见性，又能够保证原子性。Java中的每一个对象都可以作为锁：\n- 对于同步方法，锁是当前实例对象。\n- 对于静态同步方法，锁是当前对象的Class对象。\n- 对于同步方法块，锁是Synchonized括号里配置的对象。\n\n当一个线程试图访问同步代码时，它首先必须得到锁，退出或抛出异常时必须释放锁，而没获取到锁的线程将被阻塞。\n\n<!--more-->\n\n## synchronized实现原理\n\n每个对象有一个监视器锁（monitor），当monitor被占用时就会处于锁定状态。\n\n代码块同步是使用`monitorenter`和`monitorexit`指令实现的，线程执行`monitorenter`指令时尝试获取monitor的所有权，过程如下：\n1. 如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者。\n2. 如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1.\n3. 如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权。\n\n而对于`monitorexit`指令，指令执行时monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者。其他被这个monitor阻塞的线程可以尝试去获取这个monitor的所有权。 \n\n方法同步不是使用`monitorenter`和`monitorexit`指令来完成，但同样是基于进入和退出monitor对象来实现，在方法执行期间，其他任何线程都无法再获得同一个monitor对象。\n\n## 锁的升级\n\nJDK1.6为了减少获得锁和释放锁所带来的性能消耗，引入了“偏向锁”和“轻量级锁”，所以在JDK1.6里锁一共有四种状态，无锁状态，偏向锁状态，轻量级锁状态和重量级锁状态，它会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。\n\n### 偏向锁\n\n引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的加锁解锁开销，因为轻量级锁的获取及释放依赖多次CAS操作，而偏向锁只需要在置换线程ID的时候依赖一次CAS操作。\n\n**偏向锁获取过程：**\n1. 访问Mark Word中偏向锁的标识是否设置成1，锁标志位是否为01，以此确认为可偏向状态。\n2. 如果为可偏向状态，则测试线程ID是否指向当前线程，如果是，进入步骤（5），否则进入步骤（3）。\n3. 如果线程ID并未指向当前线程，则通过CAS操作获取锁。如果获取成功，则将Mark Word中线程ID设置为当前线程ID，然后执行（5）；如果获取失败，执行（4）。\n4. 如果CAS获取偏向锁失败，则表示有竞争。当到达全局安全点时获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码。\n5. 执行同步代码。\n\n线程不会主动去释放偏向锁，只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。\n\n### 轻量级锁\n\n**轻量级锁的加锁过程：**\n\n1. 在代码进入同步块的时候，如果同步对象锁状态为无锁状态，虚拟机首先将在当前线程的栈帧中建立一个名为锁记录的空间，拷贝对象头中的Mark Word到锁记录中，官方称之为Displaced Mark Word。\n2. 拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向锁记录的指针，并将锁记录里的owner指针指向object mark word。如果更新成功，则执行步骤（3），否则执行步骤（4）。\n3. 如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，即表示此对象处于轻量级锁定状态。\n4. 如果这个更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行。否则说明多个线程竞争锁，轻量级锁就要膨胀为重量级锁，锁标志的状态值变为“10”，Mark Word中存储的就是指向重量级锁的指针，后面等待锁的线程也要进入阻塞状态，而当前线程便尝试使用自旋来获取锁。\n\n在最后一步线程获取轻量级锁的过程中执行CAS操作失败时，是要通过自旋来获取重量级锁的，由于自旋是需要消耗CPU的，如果一直获取不到锁的话，那该线程就一直处在自旋状态，白白浪费CPU资源。JDK采用适应性自旋的方式解决这个问题，指定自旋的次数，如果超过次数如果还没获取到锁就进入阻塞状态。线程如果自旋成功了，则下次自旋的次数会更多，如果自旋失败了，则自旋的次数就会减少。\n\n**轻量级锁的解锁过程：**\n\n1. 通过CAS操作尝试把线程中复制的Displaced Mark Word对象替换当前的Mark Word。\n2. 如果替换成功，整个同步过程就完成了。\n3. 如果替换失败，说明有其他线程尝试过获取该锁（此时锁已膨胀），那就要在释放锁的同时，唤醒被挂起的线程。\n\n## 锁的对比\n\n| 锁     |    优点 | 缺点  | 适用场景  |\n| :--------: | :--------: | :--: | :--: |\n| 偏向锁  | 加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距。 |  如果线程间存在锁竞争，会带来额外的锁撤销的消耗。   | 只有一个线程执行同步块。 |\n| 轻量级锁  | 竞争的线程不会阻塞，提高了程序的响应速度。 |  如果始终得不到锁竞争的线程使用自旋会消耗CPU。   | 多个线程交替执行同步块。  |\n| 重量级锁  | \t线程竞争不使用自旋，不会消耗CPU。 |  线程阻塞，响应时间缓慢。   | \t多个线程同时执行同步块。 |\n\n## 参考资料\n\n- [聊聊并发（二）Java SE1.6中的Synchronized](http://ifeve.com/java-synchronized/)\n- [Java并发编程：Synchronized及其实现原理](https://www.cnblogs.com/paddix/p/5367116.html)\n- [Java并发编程：Synchronized底层优化（偏向锁、轻量级锁）](https://www.cnblogs.com/paddix/p/5405678.html)","tags":["并发","synchronized","锁"],"categories":["并发"]},{"title":"深入分析volatile关键字","url":"/2019/02/08/深入分析volatile关键字/","content":"## 简介\n\n`volatile`是轻量级的`synchronized`，如果使用恰当的话，它会比`synchronized`的使用成本更低，因为它不会引起线程上下文的切换和调度。如果一个字段被声明成`volatile`，它将具有以下两个特性：\n- 可见性：对一个`volatile`变量的读，总是能看到任意线程对这个`volatile`变量最后的写入。\n- 原子性：对任意单个`volatile`变量的读/写具有原子性，但类似于`volatile++`这种复合操作不具有原子性。\n\n<!--more-->\n\n## volatile的实现原理\n\n如果对声明了`volatile`的变量进行写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。\n\n简单来说就是Lock前缀指令会引起处理器缓存回写到内存，而一个处理器的缓存回写到内存会导致其它处理器的缓存无效。\n\n## volatile的内存语义\n\n- `volatile`写的内存语义：当写一个`volatile`变量时，JMM会把该线程对应的本地内存中的共享变量值刷新到主内存。\n- `volatile`读的内存语义：当读一个`volatile`变量时，JMM会把该线程对应的本地内存设置为无效。线程接下来将从主内存中读取共享变量。\n\n为了实现`volatile`内存语义，JMM会分别限制编译器重排序和处理器重排序。\n\n对于编译器，JMM的编译器重排序规则会禁止特定类型的编译器重排序。以下是针对编译器制定的重排序规则：\n\n- 当第二个操作是`volatile`写时，不管第一个操作是什么，都不能重排序。\n- 当第一个操作是`volatile`读时，不管第二个操作是什么，都不能重排序。\n- 当第一个操作是`volatile`写，第二个操作是`volatile`读时，都不能重排序。\n\n对于处理器，JMM的处理器重排序规则会要求编译器在生成字节码时，在指令序列中插入内存屏障来禁止特定类型的处理器重排序。以下是基于保守策略的JVM内存屏障插入策略：\n- 在每个`volatile`写操作的前面插入一个`StoreStore`屏障。\n- 在每个`volatile`写操作的后面插入一个`StoreLoad`屏障。\n- 在每个`volatile`读操作的后面插入一个`LoadLoad`屏障。\n- 在每个`volatile`读操作的后面插入一个`LoadStore`屏障。\n\n此策略可以保证在任意处理器平台，任意程序中都能得到正确的`volatile`内存语义。\n\n## 参考资料\n\n- [聊聊并发（一）深入分析Volatile的实现原理](http://ifeve.com/volatile/)","tags":["并发","volatile"],"categories":["并发"]},{"title":"支付宝的支付流程（当面付）","url":"/2019/02/07/支付宝对接流程/","content":"由于在之前的项目中使用到了用支付宝完成订单支付这一功能，因此在此篇文章中对支付宝的整个支付流程以及背后的细节做一个简单的总结。具体接入指南以及开发文档参考[蚂蚁金服 扫码支付接入指引](https://docs.open.alipay.com/194/106078/) 。\n\n<!--more-->\n\n## 前期准备\n\n整体来说前期准备工作有下面两步：\n\n1. 创建应用并获取APPID\n2. 配置密钥\n\n其中配置密钥需要交换双方的公钥，在交易过程中会对交易数据进行双方校验。我们知道公钥加密过的内容只有私钥才可以解密，同样，私钥加签过的内容也只有公钥才能验签。商户系统在发起支付时会使用自己的私钥进行加签，由于私钥只有自己持有（因此要妥善保管），支付宝就可以确认支付是由商户系统发起的而非他人；同样支付宝也会使用自己的私钥对支付结果进行加签，这样商户系统使用支付宝的公钥验签后也就能确定该结果是支付宝返回的了。\n\n![](http://blog.default.nanwulife.com/LB1VVMbOFXXXXbKXXXXXXXXXXXX.png)\n\n## 支付流程\n\n1. 用户选中购物车的商品，创建一个待支付订单，商户系统生成唯一订单号。\n2. 用户点击支付，商户系统调用支付宝的预下单接口发送订单信息，接口返回一个二维码串。\n3. 商户系统通过二维码串自行生成订单二维码并显示给用户。\n4. 用户扫描二维码并付款。\n5. 支付成功后，支付宝根据预先配置的回调接口将支付结果异步通知给商户系统。\n6. 商户系统收到支付结果，验签确保是支付宝发出后，告知用户支付完成并更新相关数据库表。\n\n![](http://blog.default.nanwulife.com/LB1QKdBLXXXXXcvXXXXXXXXXXXX.jpg)","tags":["支付宝"],"categories":["项目"]},{"title":"Spring框架知识点总结","url":"/2019/02/06/Spring框架知识点总结/","content":"# Spring概述\n\n\nSpring框架是一个为Java应用程序的开发提供了综合、广泛的基础性支持的Java平台。Spring帮助开发者解决了开发中基础性的问题，使得开发人员可以专注于应用程序的开发。Spring框架本身亦是按照设计模式精心打造，这使得我们可以在开发环境中安心的集成Spring框架，不必担心Spring是如何在后台进行工作的。\n\n<!--more-->\n\nSpring框架至今已集成了20多个模块。这些模块主要被分如下图所示的核心容器、数据访问/集成,、Web、AOP（面向切面编程）、工具、消息和测试模块。\n\n![](http://blog.default.nanwulife.com/3d0f7edba3a9b3689a28e9243f052ab5.png)\n\n使用Spring的好处有以下几点：\n\n- Spring是轻量的，基本的版本大约2MB。\n- Spring通过控制反转实现了松散耦合。\n- Spring支持面向切面编程，把应用业务逻辑和系统服务分开。\n- Spring包含并管理应用中对象的生命周期和配置。\n- Spring的Web框架是一个精心设计的Web MVC框架，是其它WEB框架的很好的替代品。\n- Spring提供了一个便捷的事务管理接口，适用于小型的本地事物处理（比如在单DB的环境下）和复杂的共同事物处理（比如利用JTA的复杂DB环境）。\n\n# IOC\n\nSpring框架的核心就是IoC容器，要掌握Spring框架，就必须要理解控制反转的思想以及依赖注入的实现方式。\n\n## DI与IOC\n\n控制反转（Inversion of Control）就是将原本在程序中手动创建对象的控制权，交由Spring框架管理，根据配置文件在运行时动态的去创建对象，并调用对象的方法。作用是实现了程序的解耦合。\n\n依赖注入（Dependency Injection）就是将实例变量传入到一个对象中去，非自己主动初始化依赖，而是通过外部来传入依赖。比如以前可能会在构造函数中自己`new`一个对象赋给成员变量，依赖注入则是将已经初始化好的对象作为构造函数的一个参数传入。Spring的依赖注入有3种方式：\n- setter方法注入。\n- 构造函数注入。\n- 注解方式注入。\n\n控制反转与依赖注入有着本质的不同：\n- 控制反转是一种思想。\n- 依赖注入是一种实现方式。\n\nIoC容器使用依赖注入作为实现控制反转的方式，但是控制反转还有其他的实现方式，例如说`ServiceLocator`，所以不能将控制反转和依赖注入等同。\n\n## BeanFactory和ApplicationContext\n\n`BeanFactory`是Spring框架最核心、最底层的接口，是Spring IoC容器的具体实现。`BeanFactory`负责读取bean配置文件实例化Bean并建立Bean之间的依赖关系，提供Bean实例缓存、生命周期管理等服务。\n\n`ApplicationContext`建立在`BeanFactory`基础之上，称为应用上下文，提供了更多面向应用的功能。例如提供了支持国际化的文本消息、统一的资源文件读取方式和框架事件体系等，更易于创建实际应用。以下是三种较常见的`ApplicationContext`实现方式：\n- `FileSystemXmlApplicationContext`：由文件系统中的XML配置文件中读取上下文。\n- `ClassPathXmlApplicationContext`：由类路径的XML配置文件中读取上下文。\n- `WebXmlApplicationContext`：由Web应用的XML文件读取上下文。\n\n除了以上的区别外，`BeanFactroy`采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时（调用`getBean()`），才对该Bean进行加载实例化，这样我们就不能发现一些存在的Spring的配置问题。而`ApplicationContext`则相反，它是在容器启动时一次性创建了所有的Bean，这样在容器启动时我们就可以发现Spring中存在的配置错误。\n\n## Spring Beans\n\nSpring beans是那些形成Spring应用的主干java对象。它们被Spring IOC容器初始化，装配和管理。这些beans通过容器中配置的元数据创建，比如以XML文件中`<bean/>`的形式定义。装配Bean总共有三种方式：\n- XML配置文件。\n- 基于java的配置。\n- 基于注解的配置。\n\n### Bean的作用域\n\n当定义一个`<bean>`时，我们能通过定义中的`scope`属性来给这个bean声明一个作用域。Spring框架支持以下五种bean的作用域：\n- `singleton` : bean在每个Spring Ioc 容器中只有一个实例。\n- `prototype`：一个bean的定义可以有多个实例。\n- `request`：每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。\n- `session`：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。\n- `global-session`：在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。\n\n其中，单例bean不是线程安全的，Spring框架并没有对单例bean进行任何多线程的封装处理，关于单例bean的线程安全和并发问题需要开发者自行去搞定。\n\n### Bean的生命周期\n\n在一个bean实例被初始化时，需要执行一系列的初始化操作以达到可用的状态。同样的，当一个bean不再被调用时需要进行相关的析构操作，并从bean容器中移除。\n\n![](http://blog.default.nanwulife.com/Spring-bean-life-cycle.png)\n\n- Spring容器从XML文件中读取bean的定义并实例化bean。\n- Spring根据bean的定义填充所有的属性。\n- 调用`BeanNameAware`的`setBeanName`方法。\n- 调用`BeanFactoryAware`的`setBeanFactory`方法。\n- 调用`BeanPostProcessor`的`postProcesserBeforeInitialization`方法。\n- 调用`InitializingBean`的`afterPropertiesSet`方法。\n- 调用`<bean>`的`init-method`属性指定的初始化方法。\n- 调用`BeanPostProcessor`的`postProcesserAfterInitialization`方法。\n- 容器初始化成功，程序执行，业务逻辑调用后，下面销毁容器。\n- 调用`DisposableBean`的`destroy`方法。\n- 调用`<bean>`的`destroy-method`属性指定的销毁方法。\n\n`<bean>`有两个重要的属性`init-method`和`destroy-method`用来定制初始化和注销方法，它们也有相应的注解`@PostConstruct`和`@PreDestroy`。\n\n### Inner Bean\n\n当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean，内部bean通常是匿名的，它们的作用域一般是`prototype`。\n\n### Bean的自动装配\n\nSpring引入自动装配机制就是为了解决`<bean>`标签下`<property>`标签过多导致可维护性差的问题，Spring容器能够自动装配相互合作的bean，这意味着容器不需要`<constructor-arg>`和`<property>`配置，能通过`BeanFactory`自动处理bean之间的依赖关系。在Spring框架中共有以下5种自动装配：\n- no：这是Spring框架的默认设置，在该设置下自动装配是关闭的，开发者需要自行在bean定义中用标签明确的设置依赖关系。\n- byName：该选项可以根据bean名称设置依赖关系。当向一个bean中自动装配一个属性时，容器将根据bean的名称自动在在配置文件中查询一个匹配的bean。如果找到的话，就装配这个属性，如果没找到的话就报错。\n- byType：该选项可以根据bean类型设置依赖关系。当向一个bean中自动装配一个属性时，容器将根据bean的类型自动在在配置文件中查询一个匹配的bean。如果找到的话，就装配这个属性，如果没找到或找到多个相同类型的话就报错。\n- constructor：构造器的自动装配和byType模式类似，但是仅仅适用于与有构造器相同参数的bean，如果在容器中没有找到与构造器参数类型一致的bean，那么将会抛出异常。\n- autodetect：该模式自动探测使用构造器自动装配或者byType自动装配。首先会尝试找合适的带参数的构造器，如果找到的话就是用构造器自动装配，如果在bean内部没有找到相应的构造器或者是无参构造器，容器就会自动选择byTpe的自动装配方式。\n\n# AOP\n\n面向切面编程（AOP）就是在运行时，动态地将代码切入到类的指定方法、指定位置上的一种编程思想。\n\n## 通知（Advice）\n\n就是想要的功能，也就是上说的安全、事物、日子等。你给先定义好，然后再想用的地方用一下。Spring可以应用五种类型的通知：\n- before：前置通知，在一个方法执行前被调用。\n- after：在方法执行之后调用的通知，无论方法执行是否成功。\n- after-returning：仅当方法成功完成后执行的通知。\n- after-throwing：在方法抛出异常退出时执行的通知。\n- around：在方法执行之前和之后调用的通知。\n\n## 连接点（JoinPoint）\n\n就是Spring允许是通知（Advice）的地方，基本每个方法的前、后（两者都有也行），或抛出异常时都可以是连接点，Spring只支持方法连接点。\n\n## 切入点（Pointcut）\n\n上面说的连接点的基础上，来定义切入点，你的一个类里，有15个方法，那就有十几个连接点了对吧，但是你并不想在所有方法附件都使用通知（使用叫织入，下面再说），你只是想让其中几个，在调用这几个方法之前、之后或者抛出异常时干点什么，那么就用切入点来定义这几个方法，让切入点来筛选连接点，选中那几个你想要的方法。\n\n## 切面（Aspect）\n\n切面是通知和切入点的结合。通知说明了干什么和什么时候干（什么时候通过方法名中的befor，after，around等就能知道），二切入点说明了在哪干（指定到底是哪个方法），这就是一个完整的切面定义。\n\n## 织入（weaving）\n\n把切面应用到目标对象来创建新的代理对象的过程。\n\n## 引入（introduction）\n\n允许我们在已存在的类中增加新的方法和属性。\n\n## 代理（proxy）\n\n通知目标对象后创建的对象。从客户端的角度看，代理对象和目标对象是一样的。\n\n# Spring MVC\n\nSpring MVC是一个基于MVC架构的用来简化web应用程序开发的应用开发框架，它是Spring的一个模块。在web模型中，MVC是一种很流行的架构，通过把Model，View，Controller分离，把较为复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。\n\n## 执行流程\n\n![](http://blog.default.nanwulife.com/20180708224853769.png)\n\n1. 用户发送请求至前端控制器DispatcherServlet；\n2. DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handle；\n3. 处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet；\n4. DispatcherServlet通过HandlerAdapter处理器适配器调用处理器；\n5. 执行处理器(Handler，也叫后端控制器)；\n6. Handler执行完成返回ModelAndView；\n7. HandlerAdapter将Handler执行结果ModelAndView返回给DispatcherServlet；\n8. DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析；\n9. ViewResolver解析后返回具体View；\n10. DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）\n11. DispatcherServlet响应用户。\n\n## SpringMVC如何和AJAX相互调用\n\n通过Jackson框架就可以把Java里面的对象直接转化成js可以识别的Json对象。具体步骤如下 ：\n1. 加入`Jackson.jar`\n2. 在配置文件中配置json的映射\n3. 在方法前面要加上`@ResponseBody`注解。\n\n\n# Spring注解\n\n- `@Required`：该注解表明bean的属性必须在配置的时候设置，若@Required注解的bean属性未被设置，容器将抛出`BeanInitializationException`。注意@Required只能设置在setter方法上。\n\n- `@Autowired`：该注解可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作，默认是按类型进行装配。在类成员变量上加上该注解时，就可以去掉相应的getter和setter方法了，Spring将直接采用Java反射机制对成员变量进行自动注入。\n\n- `@Qualifier`：当有多个相同类型的bean却只有一个需要自动装配时，将`@Qualifier`注解和`@Autowired`注解结合使用以消除这种混淆，指定需要装配的确切的bean。\n\n- `@Resource`：与`@Autowired`不同的是该注解默认按照名称装配，当找不到与名称匹配的bean时才会按照类型装配。注意如果没有指定name属性，并且按照默认的名称仍然找不到依赖的对象时候，会回退到按照类型装配，但一旦指定了name属性，就只能按照名称 装配了。\n\n# 其它\n\n## Spring框架中都用到了哪些设计模式？\n\n待更。。。","tags":["Spring","IOC","AOP"],"categories":["Spring"]},{"title":"电商项目优化实践","url":"/2019/02/05/mmall电商项目优化日志/","content":"本篇日志将记录之前做过的mmall项目的一些优化过程，主要包括JVM调优和数据库优化两个方面，通过不断动手实践并总结心得，希望能在此积累起许多经验，为以后能更得心应手的写出高效而又稳健的代码打好基础。\n\n<!--more-->\n\n## 商品表的优化\n\n在实际应用中我们往往都会遇到根据名称来查询某个商品或者根据昵称查询某个用户，如果返回的行数较多则要使用分页，而之前项目一直都是使用的PageHelper这个框架来完成分页功能的，这么做自然简单方便，但是当数据量达到几十万甚至百万时就会遇到性能瓶颈，尽管能够使用一些索引进行优化，但一个查询仍然需要十几二十秒才能完成，显然还远不能达标。在阅读PageHelper源码后可以发现，之所以会发生这种情况是因为PageHelper主要是通过拼接`LIMIT`语句来实现分页功能的，我们知道`LIMIT`在偏移量很大的时候会扫描很多不必要的行，因此需要对查询进行改进才能更好的应用在数据量比较大的场景下。\n\n我们先建立一张商品表，还未在上面建立任何索引（除主键外）：\n\n```SQL\nDROP TABLE IF EXISTS `mmall_product`;\nCREATE TABLE `mmall_product` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '商品id',\n  `category_id` int(11) NOT NULL COMMENT '分类id,对应mmall_category表的主键',\n  `name` varchar(100) NOT NULL COMMENT '商品名称',\n  `subtitle` varchar(200) DEFAULT NULL COMMENT '商品副标题',\n  `main_image` varchar(500) DEFAULT NULL COMMENT '产品主图,url相对地址',\n  `sub_images` text COMMENT '图片地址,json格式,扩展用',\n  `detail` text COMMENT '商品详情',\n  `price` decimal(20,2) NOT NULL COMMENT '价格,单位-元保留两位小数',\n  `stock` int(11) NOT NULL COMMENT '库存数量',\n  `status` int(6) DEFAULT '1' COMMENT '商品状态.1-在售 2-下架 3-删除',\n  `create_time` datetime DEFAULT NULL COMMENT '创建时间',\n  `update_time` datetime DEFAULT NULL COMMENT '更新时间',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8;\n```\n\n接着使用存储过程往里面插入100万条数据，为了提高插入时的速度，需要先修改`my.ini`配置文件的以下两处：\n\n```\ninnodb_flush_log_at_trx_commit=0\nmax_allowed_packet=100M\n```\n重启MySQL后再执行以下代码：\n\n```SQL\ndrop procedure if exists product_insert;\nDELIMITER ;; \nCREATE PROCEDURE product_insert() \nBEGIN \nDECLARE y INT DEFAULT 1;\nWHILE y < 100000\nDO\ninsert into mmall_product(category_id, name, subtitle, main_image, sub_images, detail, price, stock, status, create_time, update_time) \nvalues(y%30+100001, 'ab', substring(MD5(RAND()),15,20), \n'241997c4-9e62-4824-b7f0-7425c3c28917.jpeg', \n'241997c4-9e62-4824-b7f0-7425c3c28917.jpeg,b6c56eb0-1748-49a9-98dc-bcc4b9788a54.jpeg,92f17532-1527-4563-aa1d-ed01baa0f7b2.jpeg,3adbe4f7-e374-4533-aa79-cc4a98c529bf.jpeg', \n'<p><img alt=\"miaoshu.jpg\" src=\"http://img.happymmall.com/9c5c74e6-6615-4aa0-b1fc-c17a1eff6027.jpg\" width=\"790\" height=\"444\"><br></p><p><img alt=\"miaoshu2.jpg\" src=\"http://img.happymmall.com/31dc1a94-f354-48b8-a170-1a1a6de8751b.jpg\" width=\"790\" height=\"1441\"><img alt=\"miaoshu3.jpg\" src=\"http://img.happymmall.com/7862594b-3063-4b52-b7d4-cea980c604e0.jpg\" width=\"790\" height=\"1442\"><img alt=\"miaoshu4.jpg\" src=\"http://img.happymmall.com/9a650563-dc85-44d6-b174-d6960cfb1d6a.jpg\" width=\"790\" height=\"1441\"><br></p>',\nRAND() * 10000,\nRAND() * 100,\n1, now(), now()); \nSET y=y+1; \nEND WHILE ; \ncommit; \nEND;; \nCALL product_insert();\n```\n\n这里的商品名、子标题等都使用的随机字符串，没有太多考究。此时就可以根据商品名`name`按价格`price`排序后进行查询了：\n\n```SQL\nSELECT * FROM mmall_product WHERE name = 'ab' ORDER BY price LIMIT 100, 10;\n\nSELECT * FROM mmall_product WHERE name = 'ab' ORDER BY price LIMIT 1000, 10;\n\nSELECT * FROM mmall_product WHERE name = 'ab' ORDER BY price LIMIT 10000, 10;\n```\n\n执行时间如下：\n\n![](http://blog.default.nanwulife.com/3%29G5S7ZTBRINMZQEQ_%29ZLZH.png)\n\n可以看出，在不断增大`LIMIT`的偏移量后，查询时间着实吓人，通过`EXPLAIN`分析执行计划发现`type`那列显示`ALL`，说明要全表扫描一百多万行，并且还有`Using filesort`。我们先根据`WHERE`语句和`ORDER BY`语句建立如下组合索引：\n\n```SQL\nALTER TABLE mmall_product ADD INDEX index_name_price (name, price);\n```\n\n执行`SHOW INDEX FROM mmall_product;`查看索引是否添加如下：\n\n![](http://blog.default.nanwulife.com/%288R%5D%29J%5BT2B16EP87J6%60%7D%289V.png)\n\n这时在初步优化后分析执行计划可以看到查询不再是全表扫描，而是使用到了上面的索引，效率有所提升，但此时增大偏移量后查询依然会变得十分缓慢，还需要进一步优化。这里就可以用到“延迟关联”的技巧，由于LIMIT每扫描一行时都要去主索引拿到许多不必要的数据再丢弃，那么可以让其先在二级索引覆盖扫描得到满足条件的id，然后再与原表关联得到最终结果，代码如下：\n\n```SQL\nSELECT * FROM mmall_product \nINNER JOIN (SELECT id FROM mmall_product WHERE name = 'ab' ORDER BY price LIMIT 100000, 10) AS mmall_product_id USING(id);\n```\n\n此时，就算偏移量为一百万时，查询也可以很轻松的在0.5S内完成，效果还是令人满意的。\n\n![](http://blog.default.nanwulife.com/%7D6%7BS@%25E2MGMXK_%29%29~JPZ6BT.png)\n\n> PageHelper原理：PageHelper实现了MyBatis提供的`Interceptor`接口得到分页拦截器`PageInterceptor`，使用分页查询的时候，先调用`PageHelper.startPage`在当前线程上下文中设置一个`ThreadLocal`变量，分页拦截器拦截到SQL后会从`ThreadLocal`中拿到分页的信息，拼接分页语句并进行分页查询，最后再把`ThreadLocal`中的东西清除掉。\n\n## GC调优\n\n看了《深入理解Java虚拟机》也有一段时间了，书本的知识虽然都能理解，但实际的优化却从来没试过，这方面可以说是毫无经验。都说读万卷书不如行万里路，在网上看了一些GC优化的实际案例后，决定亲自动手在这个项目中尝试一下。\n\n这次实践使用的垃圾收集器为ParNew+CMS（CMS失败时Serial Old替补）。首先通过以下参数设置垃圾收集器并打开GC日志：\n```\n-XX:+UseConcMarkSweepGC\n-XX:+UseParNewGC\n-XX:+PrintGC\n-Xloggc:C:\\Users\\canjie\\Desktop\\gc.log\n-XX:+PrintHeapAtGC\n-XX:+PrintGCDateStamps\n```\n\n然后使用jmeter工具模拟多用户持续请求接口的场景，这里设置的一分钟的用户数5000人。jemeter的聚合报告显示如下，主要关注TP99这一指标：\n\n![](http://blog.default.nanwulife.com/GB44HLUCJSFK~%28HS%290%60M%7B9E.png)\n\n请求结束后分析GC日志发现Minor GC执行的十分频繁，而Major GC仅仅五分钟内就执行了好几次，每次耗时约0.2s，频繁且耗时的STW对接口响应时间造成了很大的影响，对于追求低延时的服务来说肯定是不可取的。要想优化就必须得先知其原因，首先JVM的默认内存为64M，这肯定是不够的，其次频繁的Major GC主要是因为老年代的空间不够，那接下来就是通过调整总堆大小以及年轻代和老年代的比例来减少GC的频率和STW的时间。当然，这里的内存不是调的越大越好，调的过小会导致GC频率过高，而调的过大虽然GC频率降低了，但每次GC的耗时也会变长。\n\n先通过GC日志得到活跃数据的大小（活跃数据的大小是指Full GC后堆中老年代占用空间的大小），然后通过以下策略设置基本参数：\n\n| 空间 | 倍数 |\n| :--: | :--: |\n| 总堆 | 3-4 倍活跃数据的大小 |\n| 新生代 | \t1-1.5 活跃数据的大小 |\n| 老年代 | 2-3 倍活跃数据的大小 |\n| 永久代 | 1.2-1.5 倍Full GC后的永久代空间占用 |\n \n我在这个例子中经过计算后设置的参数如下：\n \n ```\n-Xmx640m\n-Xms640m\n-XX:NewSize=240m\n-XX:MaxNewSize=240m\n ```\n\n此时再启动项目并用jmeter模拟真实环境进行测试，可以发现调大总堆大小并设置合适的年轻代与老年代的比例后，Minor GC每分钟的频率已经降到了70-80次，而Major GC十分钟才会出现一次，每次的耗时在100ms以下，TP95下降了约10ms，TP99下降了约100ms。\n\n![](http://blog.default.nanwulife.com/0Y%5D$ZI%60U6X6J052%25CSB2VTU.png)","tags":["MySQL","项目"],"categories":["项目"]},{"title":"Java阻塞队列实现生产者-消费者模型","url":"/2019/02/03/Java实现生产者-消费者模型/","content":"## 简介\n\n阻塞队列（BlockingQueue）是一个支持阻塞的插入和移除的队列。阻塞插入即当队列满时，队列会阻塞插入元素的线程，直到队列不满；阻塞移除即当队列为空时，获取元素的线程会等待队列变为非空。\n\n阻塞队列提供了四种处理方法：\n\n| 方法\\处理方式 | 抛出异常 | 返回特殊值  | 一直阻塞 | 超时退出 |\n| :------: | :------:| :-----: | :-----: | :-----: |\n| 插入方法  | add(e) | offer(e) | put(e)| offer(e,time,unit) | \n| 移除方法  | remove() |  poll()  |  take() | poll(time,unit) | \n| 检查方法  | element() |  peek()  | 不可用 | 不可用 | \n\n<!--more-->\n\n\n## 分类\n\n- ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列。\n- LinkedBlockingQueue：一个由链表结构组成的有界阻塞队列。\n- PriorityBlockingQueue：一个支持优先级排序的无界阻塞队列。\n- DelayQueue：一个支持延时获取元素的无界阻塞队列。队列使用PriorityQueue来实现，队列中的元素必须实现Delayed接口，在创建元素时可以指定多久才能从队列中获取当前元素，只有在延迟期满时才能从队列中提取元素。可以用于设计缓存系统和定时任务调度。\n- SynchronousQueue：一个不存储元素的阻塞队列。每一个put操作必须等待一个take操作，否则不能继续添加元素。\n- LinkedBlockingDeque：LinkedBlockingDeque是一个由链表结构组成的双向阻塞队列。\n\n## 实现\n\nJDK是使用通知模式（`await()`/`signal()`）实现的阻塞队列：当生产者往满的队列里添加元素时会阻塞住生产者，当消费者消费了一个队列中的元素后，会通知生产者当前队列可用。下面是`ArrayBlockingQueue`的部分源码：\n\n```java\n  private final Condition notFull;\n  private final Condition notEmpty;\n\n  public ArrayBlockingQueue(int capacity, boolean fair) {\n          //省略其他代码\n          notEmpty = lock.newCondition();\n          notFull =  lock.newCondition();\n      }\n\n  public void put(E e) throws InterruptedException {\n          checkNotNull(e);\n          final ReentrantLock lock = this.lock;\n          lock.lockInterruptibly();\n          try {\n              while (count == items.length)\n                  notFull.await();\n              insert(e);\n          } finally {\n              lock.unlock();\n          }\n  }\n\n  public E take() throws InterruptedException {\n          final ReentrantLock lock = this.lock;\n          lock.lockInterruptibly();\n          try {\n              while (count == 0)\n                  notEmpty.await();\n              return extract();\n    } finally {\n              lock.unlock();\n          }\n  }\n\n  private void insert(E x) {\n          items[putIndex] = x;\n          putIndex = inc(putIndex);\n          ++count;\n          notEmpty.signal();\n  }\n```\n\n## 生产者-消费者模式\n\n下面通过阻塞队列来实现一个经典的生产者-消费者模式，由于已经将底层封装的很好了，所以代码十分简洁：\n\n```java\npublic class ProducerConsumer {\n    private static BlockingQueue<Task> queue = new ArrayBlockingQueue<>(5);\n    private static AtomicInteger increTaskNo = new AtomicInteger(0);\n\n    private static class Producer implements Runnable{\n        @Override\n        public void run() {\n            Task task = new Task(increTaskNo.getAndIncrement());\n            try {\n                queue.put(task);\n                System.out.println(\"produce: \" + task.no);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class Consumer implements Runnable{\n        @Override\n        public void run(){\n            try {\n                Task task = queue.take();\n                System.out.println(\"consume: \" + task.no);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class Task{\n        public int no;\n        public Task(int no) {\n            this.no = no;\n        }\n    }\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 5; i++) {\n            new Thread(new Producer()).start();\n        }\n        for (int i = 0; i < 5; i++) {\n            new Thread(new Consumer()).start();\n        }\n    }\n}\n```\n\n这里要注意，`put()`与`take()`方法与输出语句不是原子的，这会导致日志的输出顺序与实际任务的入队/出队顺序不一定匹配。\n\n## 参考资料\n\n- [聊聊并发（七）——Java中的阻塞队列](http://ifeve.com/java-blocking-queue/)","tags":["并发"],"categories":["并发"]},{"title":"Fork/join框架分析与实战","url":"/2019/02/02/Fork-join框架分析与实战/","content":"## 简介\n\nFork/Join框架是Java7提供了的一个用于并行执行任务的框架，是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。Fork就是把一个大任务切分为若干子任务并行的执行，Join就是合并这些子任务的执行结果，最后得到这个大任务的结果。\n\n<!--more-->\n\n## 工作窃取算法\n\n工作窃取算法（work-stealing）是指当一个队列所对应的线程先执行完队列中的所有任务后，从其他线程的队列里窃取一个任务来执行。为了减少竞争，通常会使用双端队列，被窃取任务线程永远从双端队列的头部拿任务执行，而窃取任务的线程永远从双端队列的尾部拿任务执行。\n\n## Fork/join的使用\n\n- `ForkJoinTask`：我们要使用Fork/Join框架，必须首先创建一个ForkJoin任务。它提供在任务中执行`fork()`和`join()`操作的机制，通常情况下我们不需要直接继承`ForkJoinTask`类，而只需要继承它的子类，Fork/Join框架提供了以下两个子类：\n\t- `RecursiveAction`：用于没有返回结果的任务。\n\t- `RecursiveTask` ：用于有返回结果的任务。\n\n- `ForkJoinPool` ：`ForkJoinTask`需要通过`ForkJoinPool`来执行，任务分割出的子任务会添加到当前工作线程所维护的双端队列中，进入队列的头部。当一个工作线程的队列里暂时没有任务时，它会随机从其他工作线程的队列的尾部获取一个任务。\n\n接下来我们看一个问题：如何充分利用多核 CPU 计算很大 List 中所有整数的和？\n\n这里就可以用到Fork/join框架将求和任务分成许多子任务来完成，再将子任务的计算结果相加即可，代码如下：\n\n```java\npublic class ForkJoinLargeListSum {\n    public static void main(String[] args) {\n        int[] array = new int[100000000];\n        // 初始化\n        for(int i = 0; i < array.length; i++){\n            array[i] = i + 1;\n        }\n        ForkJoinPool forkJoinPool = new ForkJoinPool();\n        long begintime = System.currentTimeMillis();\n        CountSumTask task = new CountSumTask(100000, 0, array.length-1, array);\n        Future<Long> future = forkJoinPool.submit(task);\n        try {\n            System.out.println(\"计算结果为：\" + future.get());\n            long endtime=System.currentTimeMillis();\n            System.out.println(\"耗时：\" + (endtime - begintime) + \"ms\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n\n    static class CountSumTask extends RecursiveTask<Long> {\n        private int threshold;\n        private int hi, lo;\n        private int[] array;\n\n        public CountSumTask(int threshold, int lo, int hi, int[] array) {\n            this.threshold = threshold;\n            this.hi = hi;\n            this.lo = lo;\n            this.array = array;\n        }\n\n        @Override\n        protected Long compute() {\n            long sum = 0L;\n\n            //如果任务足够小就计算任务\n            boolean canCompute = (hi - lo) <= threshold;\n            if(canCompute){\n                for(int i = lo; i <= hi; i++){\n                    sum += array[i];\n                }\n            } else{\n                //如果任务大于阈值，就分裂成两个子任务计算\n                int middle = lo + (hi - lo) / 2;\n                CountSumTask leftTask = new CountSumTask(threshold, lo, middle, array);\n                CountSumTask rightTask = new CountSumTask(threshold, middle+1, hi, array);\n                //执行子任务\n                leftTask.fork();\n                rightTask.fork();\n                //等待子任务执行完，并得到结果\n                long leftResult = leftTask.join();\n                long rightResult = rightTask.join();\n                //合并子任务\n                sum = leftResult + rightResult;\n            }\n            return sum;\n        }\n    }\n}\n```\n\n此时输出：\n\n```\n计算结果为：5000000050000000\n耗时：69ms\n```\n\n当我们调大阈值`threshold`时，意味着分割任务的次数减少，直接计算的次数增多，此时计算的效率也有可能降低。例如，当把阈值增大为100000000时，输出结果为：\n\n```\n计算结果为：5000000050000000\n耗时：110ms\n```\n\n\n## 参考资料\n\n- [聊聊并发（八）——Fork/Join框架介绍](http://ifeve.com/talk-concurrency-forkjoin/)\n- [重做一道Java面试题（Fork/Join）](https://juejin.im/post/59be875e5188257e6b6d91c1)","tags":["并发","Fork/join"],"categories":["并发"]},{"title":"ConcurrentHashMap源码分析","url":"/2019/02/01/ConcurrentHashMap源码分析/","content":"## 为什么要使用ConcurrentHashMap\n\n- HashMap线程不安全。在JDK1.8之前的版本中，HashMap的实现在并发执行put操作时会导致HashMap的`Entry`链表形成环形数据结构，`Entry`的`next`节点永远不为空，就会产生死循环获取`Entry`。在之后的版本中这个死循环的问题不再发生，但仍然无法保证并发环境下的线程安全。\n\n- HashTable使用`synchronized`来保证线程安全，因此当一个线程访问HashTable的同步方法时，其它线程也访问同步方法就会被阻塞，在线程竞争激烈时效率很低。\n\n基于以上两点，我们在并发环境中应该选择线程安全且高效的`ConcurrentHashMap`。\n\n<!--more-->\n\n## 版本演进\n\n\n- jdk1.7采用分段锁技术，整个哈希表被分成多个段，每个段中会对应一个Segment段锁，段与段之间可以并发访问，但是多线程想要操作同一个段是需要获取锁的。所有的put，get，remove等方法都是根据键的哈希值对应到相应的段中，然后尝试获取锁进行访问。\n\n- jdk1.8取消了基于Segment的分段锁思想，改用CAS + synchronized控制并发操作，在某些方面提升了性能。并且追随1.8版本的 HashMap 底层实现，使用数组+链表+红黑树进行数据存储。\n\n## JDK1.8分析\n\n\n### 属性\n\n\n```java\ntransient volatile Node<K,V>[] table;\t//哈希表，第一次put时才进行初始化\n\nprivate transient volatile Node<K,V>[] nextTable;\t//扩容时新生成的数组，其大小为原数组的两倍。\n\nprivate transient volatile long baseCount;\t//哈希表中存储的所有的结点的个数总和\n\n/**\n * 用来控制table的初始化和扩容操作，默认为0。\n * 当为-1时代表table正在初始化，-N代表N-1个线程正在进行扩容操作，其余情况：\n * 如果table未初始化，表示table需要初始化的大小。\n * 如果table初始化完成，表示table的容量。\n */\nprivate transient volatile int sizeCtl;\n\n```\n\n### ForwardingNode\n\n这是一个特殊的`Node`节点，用来占位表示扩容时该桶的所有节点已完成迁移，hash值为-1，`key`和`value`都为null，并且内部存储着扩容后的表`nextTable`的引用。\n\n```java\nfinal class ForwardingNode<K,V> extends Node<K,V> {\n    final Node<K,V>[] nextTable;\n    ForwardingNode(Node<K,V>[] tab) {\n        super(MOVED, null, null, null);\n        this.nextTable = tab;\n    }\n}\n```\n\n### put()\n\n1. 在计算键所对应的哈希值后，如果哈希表还未初始化，那么初始化它。此时只允许一个线程对表进行初始化，如果不巧有其他线程进来了，那么会让其他线程交出CPU等待下次系统调度。\n\n2. 初始化完后，获取table中对应索引的元素f，如果f为null，说明table中这个位置第一次插入元素，利用`Unsafe.compareAndSwapObject`方法插入Node节点。如果CAS成功，说明Node节点已经插入，随后`addCount()`方法会检查当前容量是否需要进行扩容。如果CAS失败，说明有其它线程提前插入了节点，自旋重新尝试在这个位置插入节点。\n\n3. 如果f的hash值等于`MOVED`也就是-1时，说明当前f是`ForwardingNode`节点，意味着有其它线程正在扩容，于是调用`helpTransfer()`方法让当前线程去协助扩容。\n\n4. 其余情况把新的Node节点按链表或红黑树的方式插入到合适的位置，这个过程采用同步内置锁实现并发。\n\n### transfer()\n\nConcurrentHashMap的扩容是高度并发的，执行逻辑如下：\n\n1. 通过计算CPU核心数和Map数组的长度得到每个线程要帮助处理多少个桶，并且这里每个线程处理都是平均的。默认每个线程处理16个桶，因此，当长度是16的时候，扩容的时候只会有一个线程扩容。\n\n2. 初始化`nextTable`，将其在原有基础上扩容两倍。\n\n3. 进入一个while循环，每个线程会先领取自己的任务区间，然后开始`--i`来遍历自己的任务区间，对每个桶进行处理。\n\n4. 如果遇到桶的头结点是空的，那么使用`ForwardingNode`标识该桶已经被处理完成了。如果遇到已经处理完成的桶，直接跳过进行下一个桶的处理。如果是正常的桶，对桶首节点加锁，正常的迁移即可，迁移结束后依然会将原表的该位置标识位已经处理。\n\n5. `finnish`如果为true 则说明整张表的迁移操作已经全部完成了，我们只需要重置table的引用并将nextTable赋为空即可。否则，CAS式的将`sizeCtl`减一，表示当前线程已经完成了任务，退出扩容操作。\n\n### addCount()\n\n当我们成功的添加完成一个结点，最后是需要判断添加操作后是否会导致哈希表达到它的阈值，并针对不同情况决定是否需要进行扩容，还有CAS式更新哈希表实际存储的键值对数量，这些操作都封装在`addCount`这个方法中，当然`putVal`方法的最后必然会调用该方法进行处理。该方法主要做两个事情：一是更新 `baseCount`，二是判断是否需要扩容。\n\n### remove()\n\nConcurrentHashMap的并发删除过程：首先遍历整张表的桶结点，如果表还未初始化或者无法根据参数的哈希值定位到桶结点，那么将返回null。如果定位到的桶结点类型是`ForwardingNode`结点，调用`helpTransfer`协助扩容。否则给桶加锁，删除一个节点，最后调用`addCount()`方法CAS式更新`baseCount`的值。\n\n\n## 参考资料\n\n- [为并发而生的 ConcurrentHashMap（Java 8）](https://www.cnblogs.com/yangming1996/p/8031199.html)\n- [深入浅出ConcurrentHashMap1.8](https://www.jianshu.com/p/c0642afe03e0)\n- [并发编程——ConcurrentHashMap#transfer() 扩容逐行分析](https://juejin.im/post/5b00160151882565bd2582e0)","tags":["ConcurrentHashMap","JDK"],"categories":["JDK"]},{"title":"设计模式","url":"/2019/01/29/设计模式/","content":"# 七大设计原则\n\n## 开闭原则\n\n定义：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。\n\n用抽象构建框架，用实现扩展细节。\n\n## 依赖倒置原则\n\n定义：高层模块不应该依赖低层模块，二者都应该依赖其抽象。\n\n做到针对接口编程，不要针对实现编程。\n\n<!--more-->\n\n## 单一职责原则\n\n定义：不要存在多于一个导致类变更的原因。一个类/接口/方法只负责一项职责。\n\n## 接口隔离原则\n\n定义：用多个专门的接口，而不使用单一的总接口，客户端不应该依赖它不需要的接口。\n\n建立单一接口，不要建立庞大臃肿的接口；尽量细化接口，接口中的方法尽量少；接口中不要存在子类用不到却必须实现的方法。\n\n## 迪米特法则\n\n定义：一个对象应该对其它对象保持最少的了解。又叫最少知道原则。\n\n只与朋友说话，而不和陌生人说话。这里的朋友指的是出现在成员变量，方法输入、输出参数中的类，而出现在方法体内部的不属于朋友。\n\n## 里氏替换原则\n\n定义：如果对每一个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都替换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。\n\n- 子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法\n- 子类中可以增加自己特有的方法\n- 当子类的方法重载（注意不是覆盖）父类的方法时，方法的前置条件（即方法的输入/入参）要比父类方法的输入参数更宽松\n- 当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的输出/返回值）要比父类更严格或相等\n\n## 合成复用原则\n\n定义：尽量使用对象组合/聚合，而不是继承关系达到软件复用的目的。\n\n# 创建型\n\n## 简单工厂（Simple Factory）\n\n**简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例，而不向客户暴露内部细节。**\n\n简单工厂不属于23种设计模式，但是之后的工厂方法模式、抽象工厂模式都是由其演化而来，并且在实际场景中也有应用，因此有必要了解。\n\n适用场景：工厂类负责创建的对象比较少。\n\n### 优缺点\n\n优点：只需要传入一个正确的参数，就可以获取所需要的对象而无须知道其创建细节。\n\n缺点：工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，违背开闭原则。\n\n### 应用场景\n\n创建五个类：Video、JavaVideo、PythonVideo、VideoFactory、Test：\n\n![UML](http://blog.designpattern.nanwulife.com/simplefactory.png)\n\n抽象产品类`Video`：\n```java\npublic abstract class Video {\n    public abstract void produce();\n}\n```\n\n具体产品类`JavaVideo`、`PythonVideo`：\n```java\npublic class JavaVideo extends Video {\n    @Override\n    public void produce() {\n        System.out.println(\"录制Java课程视频\");\n    }\n}\n\npublic class PythonVideo extends Video {\n    @Override\n    public void produce() {\n        System.out.println(\"录制Python课程视频\");\n    }\n}\n```\n\n客户端类`Test`，这里可以传入字符串参数或者Class类参数：\n```java\npublic class Test {\n    public static void main(String[] args) {\n        VideoFactory videoFactory = new VideoFactory();\n        Video video = videoFactory.getVideo(\"java\");\n        if(video == null){\n            return;\n        }\n        video.produce();\n\n        VideoFactory videoFactory2 = new VideoFactory();\n        Video video2 = videoFactory2.getVideo(JavaVideo.class);\n        if(video2 == null){\n            return;\n        }\n        video2.produce();\n    }\n}\n```\n\n在简单工厂中，客户端不应该直接创建出具体的产品类，而应交给工厂类去创建，下面看看工厂类`VideoFactory`，使用了if-else判断参数或者使用使用反射技术从而决定创建哪个具体子类：\n```java\npublic class VideoFactory {\n    public Video getVideo(Class c){\n        Video video = null;\n        try {\n            video = (Video) Class.forName(c.getName()).newInstance();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return video;\n    }\n\n    public Video getVideo(String type){\n        if(\"java\".equalsIgnoreCase(type)){\n            return new JavaVideo();\n        } else if(\"python\".equalsIgnoreCase(type)){\n            return new PythonVideo();\n        }\n        return null;\n    }\n}\n\n```\n\n通过简单工厂，客户端类就不需要自己去实例化具体的产品类，做到了客户端类和产品类的解耦。\n\n### Calendar类的应用\n\njava.util下的`Calendar`类是一个抽象类，我们看看其中的`getInstance`方法：\n\n```java\n    public static Calendar getInstance(TimeZone zone,\n                                       Locale aLocale)\n    {\n        return createCalendar(zone, aLocale);\n    }\n\n    private static Calendar createCalendar(TimeZone zone,\n                                           Locale aLocale)\n    {\n        CalendarProvider provider =\n            LocaleProviderAdapter.getAdapter(CalendarProvider.class, aLocale)\n                                 .getCalendarProvider();\n        if (provider != null) {\n            try {\n                return provider.getInstance(zone, aLocale);\n            } catch (IllegalArgumentException iae) {\n                // fall back to the default instantiation\n            }\n        }\n\n        Calendar cal = null;\n\n        if (aLocale.hasExtensions()) {\n            String caltype = aLocale.getUnicodeLocaleType(\"ca\");\n            if (caltype != null) {\n                switch (caltype) {\n                case \"buddhist\":\n                cal = new BuddhistCalendar(zone, aLocale);\n                    break;\n                case \"japanese\":\n                    cal = new JapaneseImperialCalendar(zone, aLocale);\n                    break;\n                case \"gregory\":\n                    cal = new GregorianCalendar(zone, aLocale);\n                    break;\n                }\n            }\n        }\n        if (cal == null) {\n            if (aLocale.getLanguage() == \"th\" && aLocale.getCountry() == \"TH\") {\n                cal = new BuddhistCalendar(zone, aLocale);\n            } else if (aLocale.getVariant() == \"JP\" && aLocale.getLanguage() == \"ja\"\n                       && aLocale.getCountry() == \"JP\") {\n                cal = new JapaneseImperialCalendar(zone, aLocale);\n            } else {\n                cal = new GregorianCalendar(zone, aLocale);\n            }\n        }\n        return cal;\n    }\n```\n\n在后半段中可以看出其根据参数通过`switch`和`if-else`创建了相应的具体子类对象，与之前的应用场景十分类似。在这里，`Calendar`既作为抽象产品类，也作为一个工厂类。\n\n## 工厂方法（Factory Method）\n\n定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类，**工厂方法让类的实例化推迟到子类中进行**。\n\n适用场景：\n- 创建对象需要大量重复的代码\n- 客户端不依赖于产品类示例如何被创建、实现等细节\n- 一个类通过其子类来指定创建哪个对象\n\n### 优缺点\n\n优点：用户只需要关心所需产品对应的工厂，无需关心创建细节；加入新产品符合开闭原则，提高可扩展性。\n\n缺点：类的个数容易过多，增加复杂度。\n\n### 应用场景\n\n![UML](http://blog.designpattern.nanwulife.com/factorymethod.png)\n\n抽象产品类`Video`：\n\n```java\npublic abstract class Video {\n    public abstract void produce();\n\n}\n```\n\n具体产品类`JavaVideo`、`PythonVideo`：\n\n```java\npublic class JavaVideo extends Video {\n    @Override\n    public void produce() {\n        System.out.println(\"录制Java课程视频\");\n    }\n}\n\npublic class PythonVideo extends Video {\n    @Override\n    public void produce() {\n        System.out.println(\"录制Python课程视频\");\n    }\n}\n```\n\n抽象工厂类`VideoFactory`：\n\n```java\npublic abstract class VideoFactory {\n    public abstract Video getVideo();\n}\n```\n\n具体工厂类`JavaVideoFactory`、`PythonVideo`：\n\n```java\npublic class JavaVideoFactory extends VideoFactory {\n    @Override\n    public Video getVideo() {\n        return new JavaVideo();\n    }\n}\n\npublic class PythonVideoFactory extends VideoFactory {\n    @Override\n    public Video getVideo() {\n        return new PythonVideo();\n    }\n}\n```\n\n客户端类`Test`：\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        VideoFactory videoFactory = new PythonVideoFactory();\n        VideoFactory videoFactory2 = new JavaVideoFactory();\n        Video video = videoFactory.getVideo();\n        video.produce();\n    }\n}\n```\n\n![UML](http://blog.designpattern.nanwulife.com/factorymethod2.png)\n\n这时如果需要增加一个新的产品时，只需要添加一个新的具体产品类和具体工厂类，而无需像简单工厂一样修改工厂类里面的判断逻辑，即满足了开闭原则。\n\n例如，如果要增加新产品FEVideo，我们需要先加入一个具体产品类：\n\n```java\npublic class FEVideo extends Video {\n    @Override\n    public void produce() {\n        System.out.println(\"录制FE课程视频\");\n    }\n}\n```\n\n再增加这个具体产品所对应的具体工厂类：\n\n```java\npublic class FEVideoFactory extends VideoFactory{\n    @Override\n    public Video getVideo() {\n        return new FEVideo();\n    }\n}\n```\n\n之后在应用层就可以直接使用了：\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        VideoFactory videoFactory = new PythonVideoFactory();\n        VideoFactory videoFactory2 = new JavaVideoFactory();\n        VideoFactory videoFactory3 = new FEVideoFactory();\n        Video video = videoFactory.getVideo();\n        video.produce();\n\n    }\n}\n```\n\n此时的UML类图：\n\n![UML](http://blog.designpattern.nanwulife.com/factorymethod3.png)\n\n\n### Java集合接口Collection中的应用\n\n`java.util.Collection`接口下的`iterator()`方法：\n```java\npublic interface Collection<E> extends Iterable<E> {\n\t//...\n    Iterator<E> iterator();\n    //...\n```\n\n查看该接口的其中一个实现类`ArrayList`：\n\n```java\n    public Iterator<E> iterator() {\n        return new Itr();\n    }\n    \n    private class Itr implements Iterator<E> {\n\t\t//...\n        public boolean hasNext() {\n            return cursor != size;\n        }\n        @SuppressWarnings(\"unchecked\")\n        public E next() {\n\t\t\t//...\n        }\n        public void remove() {\n\t        //...\n        }\n        @Override\n        @SuppressWarnings(\"unchecked\")\n        public void forEachRemaining(Consumer<? super E> consumer) {\n            //...\n        }\n        //...\n    }\n```\n\n在这里，`Collection`相当于一个抽象工厂，而`ArrayList`相当于一个具体工厂，这个具体工厂实现了工厂方法`iterator()`实例化具体产品`Itr`，而这个具体产品实现了抽象产品`Iterator`。\n\n### logback中的应用\n\n\n![UML](http://blog.designpattern.nanwulife.com/ILoggerFactory.png)\n\n由UML可以看出`ILoggerFactory`作为抽象的工厂类，实现有三个具体的工厂类，以其中的`NOPLoggerFactory`为例，实现了抽象方法`getLogger`来实例化具体产品类：\n\n```java\npublic class NOPLoggerFactory implements ILoggerFactory {\n    public NOPLoggerFactory() {\n    }\n\n    public Logger getLogger(String name) {\n        return NOPLogger.NOP_LOGGER;\n    }\n}\n```\n\n## 抽象工厂（Abstract Factory）\n\n**抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口**。\n\n抽象工厂是面向产品族的，而工厂方法是面向产品等级结构的，这是两者的主要区别。\n\n适用场景：\n- 客户端不依赖于产品类实例如何被创建、实现等细节\n- 强调一系列相关的产品对象（属于同一产品族）一起使用创建对象时需要大量重复的代码\n- 提供一个产品类的库，所有的产品以同样的接口出现\n\n### 优缺点\n\n优点：具体产品在应用层代码隔离，无须关心创建细节；将一个系列的产品族统一到一起创建。\n\n缺点：规定了所有可能被创建的产品集合，产品族中扩展新的产品困难，需要修改抽象工厂的接口。\n\n### 应用场景\n\n对于一个课程，既包含课程视频，也包含课程笔记：\n\n![UML](http://blog.designpattern.nanwulife.com/abstractfactory.png)\n\n抽象视频产品`Video`:\n\n```java\npublic abstract class Video {\n    public abstract void produce();\n}\n```\n\n具体视频产品`JavaVideo`、`PythonVideo`：\n\n```java\npublic class JavaVideo extends Video {\n    @Override\n    public void produce() {\n        System.out.println(\"录制Java课程视频\");\n    }\n}\n\npublic class PythonVideo extends  Video{\n    @Override\n    public void produce() {\n        System.out.println(\"录制Python课程视频\");\n    }\n}\n```\n\n同样，也有抽象笔记产品`Article`和具体笔记产品`JavaArticle`、`PythonArticle`：\n\n```java\npublic abstract class Artical {\n    public abstract void produce();\n}\n\npublic class JavaArticle extends Artical {\n    @Override\n    public void produce() {\n        System.out.println(\"编写Java课程手记\");\n    }\n}\n\npublic class PythonArticle extends  Artical{\n    @Override\n    public void produce() {\n        System.out.println(\"编写Python课程手记\");\n    }\n}\n```\n\n课程的抽象工厂`CourseFactory`，生产视频和笔记两类产品：\n\n```java\npublic interface CourseFactory {\n    Video getVideo();\n    Artical getArtical();\n}\n```\n\nJava课程的具体工厂`JavaCourseFactory `：\n\n```java\npublic class JavaCourseFactory implements CourseFactory {\n    public Video getVideo() {\n        return new JavaVideo();\n    }\n\n    public Artical getArtical() {\n        return new JavaArticle();\n    }\n}\n```\n\nPython课程的具体工厂`PythonCourseFactory `：\n\n```java\npublic class PythonCourseFactory implements CourseFactory {\n    public Video getVideo() {\n        return new PythonVideo();\n    }\n\n    public Artical getArtical() {\n        return new PythonArticle();\n    }\n}\n```\n\n客户端`Test`：\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        CourseFactory courseFactory = new JavaCourseFactory();\n        Video video = courseFactory.getVideo();\n        Artical artical = courseFactory.getArtical();\n        video.produce();\n        artical.produce();\n    }\n}\n```\n\n可以看出，每一个具体工厂中都只会生产同一产品族下的产品。如果要扩展新的产品族，例如要添加一个算法课程，则添加一个`AlgorithmCourseFactory`工厂类即可，十分简单；但是如果要增加新的产品等级，比如在课程中除了视频和笔记外还要添加源码，那么就要修改抽象工厂中的实现，并且每一个具体工厂的实现也都要修改，抽象工厂模式在这种场景下就不适用了。\n\n![UML](http://blog.designpattern.nanwulife.com/abstractfactory2.png)\n\n### Connection中的应用\n\n`java.sql.Connection`接口定义了与指定数据库的连接：\n\n```java\npublic interface Connection  extends Wrapper, AutoCloseable {\n\t//...\n\tStatement createStatement() throws SQLException;\n\tPreparedStatement prepareStatement(String sql) throws SQLException;\n\t//...\n}\n```\n\n其中，`Statement`、`PreparedStatement`等也都为接口。我们查看`Connection`的其中一个实现类`ConnectionImpl`：\n\n```java\npublic class ConnectionImpl extends ConnectionPropertiesImpl implements Connection {\n\t//...\n\t\n    public Statement createStatement() throws SQLException {\n        return this.createStatement(1003, 1007);\n    }\n\n\tpublic Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {\n        this.checkClosed();\n        StatementImpl stmt = new StatementImpl(this, this.database);\n        stmt.setResultSetType(resultSetType);\n        stmt.setResultSetConcurrency(resultSetConcurrency);\n        return stmt;\n    }\n    \n    //...\n}\n```\n\n在`createStatement`方法中实例化了`Statement`接口的一个具体实现类，也就是`com.mysql.jdbc.StatementImpl`。\n\n由此可见，在这个场景中`Connection`相当于一个抽象工厂，而`ConnectionImpl`是一个具体工厂，抽象产品为`Statement`，具体产品为`StatementImpl`。在这个例子中，mysql产品族的工厂只会生产mysql的Statement、PreparedStatement等产品。\n\n## 建造者（Builder）\n\n**将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。**\n\n工厂方法模式注重的是整体对象的创建方法，而建造者模式注重的是部件构建的过程，旨在通过一步一步地精确构造创建出一个复杂的对象。\n\n适用场景：\n- 如果一个对象有非常复杂的内部结构（很多属性）\n- 想把复杂对象的创建和使用分离\n\n### 优缺点\n\n优点：封装性好，创建和使用分离；扩展性好、建造类之间独立、一定程度上解耦。\n\n缺点：产生多余的Builder对象；产品内部发生变化，建造者都要修改，成本较大。\n\n### 应用场景\n\n`CourseBuilder`作为抽象建造者类，`CourseActualBuilder`作为具体建造者类，`Coach`作为教练类根据传入的建造者类安排复杂对象的建造次序（非必需），而`Course`作为产品类。\n\n![UML](http://blog.designpattern.nanwulife.com/builder2.png)\n\n抽象建造者`CourseBuilder`：\n\n```java\npublic abstract class CourseBuilder {\n    public abstract void buildCourseName(String courseName);\n    public abstract void buildCoursePPT(String coursePPT);\n    public abstract void buildCourseVideo(String courseVideo);\n    public abstract void buildCourseArticle(String courseArticle);\n    public abstract void buildCourseQA(String courseQA);\n\n    public abstract Course makeCourse();\n}\n```\n\n具体建造者`CourseActualBuilder`：\n\n```java\npublic class CourseActualBuilder extends CourseBuilder {\n\n    private Course course = new Course();\n\n    @Override\n    public void buildCourseName(String courseName) {\n        course.setCourseName(courseName);\n    }\n\n    @Override\n    public void buildCoursePPT(String coursePPT) {\n        course.setCoursePPT(coursePPT);\n    }\n\n    @Override\n    public void buildCourseVideo(String courseVideo) {\n        course.setCourseVideo(courseVideo);\n    }\n\n    @Override\n    public void buildCourseArticle(String courseArticle) {\n        course.setCourseArticle(courseArticle);\n    }\n\n    @Override\n    public void buildCourseQA(String courseQA) {\n        course.setCourseQA(courseQA);\n    }\n\n    @Override\n    public Course makeCourse() {\n        return course;\n    }\n}\n```\n\n教练`Coach`：\n\n```java\npublic abstract class CourseBuilder {\n    public abstract void buildCourseName(String courseName);\n    public abstract void buildCoursePPT(String coursePPT);\n    public abstract void buildCourseVideo(String courseVideo);\n    public abstract void buildCourseArticle(String courseArticle);\n    public abstract void buildCourseQA(String courseQA);\n\n    public abstract Course makeCourse();\n}\n```\n\n产品`Course`：\n\n```java\npublic class Course {\n    private String courseName;\n    private String coursePPT;\n    private String courseVideo;\n    private String courseArticle;\n    private String courseQA;    //question & answer\n\n    public String getCourseName() {\n        return courseName;\n    }\n\n    public void setCourseName(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public String getCoursePPT() {\n        return coursePPT;\n    }\n\n    public void setCoursePPT(String coursePPT) {\n        this.coursePPT = coursePPT;\n    }\n\n    public String getCourseVideo() {\n        return courseVideo;\n    }\n\n    public void setCourseVideo(String courseVideo) {\n        this.courseVideo = courseVideo;\n    }\n\n    public String getCourseArticle() {\n        return courseArticle;\n    }\n\n    public void setCourseArticle(String courseArticle) {\n        this.courseArticle = courseArticle;\n    }\n\n    public String getCourseQA() {\n        return courseQA;\n    }\n\n    public void setCourseQA(String courseQA) {\n        this.courseQA = courseQA;\n    }\n\n    @Override\n    public String toString() {\n        return \"Course{\" +\n                \"courseName='\" + courseName + '\\'' +\n                \", coursePPT='\" + coursePPT + '\\'' +\n                \", courseVideo='\" + courseVideo + '\\'' +\n                \", courseArticle='\" + courseArticle + '\\'' +\n                \", courseQA='\" + courseQA + '\\'' +\n                '}';\n    }\n}\n```\n\n客户端`Test`:\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        CourseBuilder courseBuilder = new CourseActualBuilder();\n        Coach coach = new Coach();\n        coach.setCourseBuilder(courseBuilder);\n        Course course = coach.makeCourse(\"Java设计模式\", \"Java设计模式PPT\",\n                \"Java设计模式视频\", \"Java设计模式笔记\", \"Java设计模式问答\");\n        System.out.println(course);\n    }\n}\n```\n\n客户端创建了一个建造者和一个教练，并将这个建造者作为参数传给教练，之后直接通过教练进行产品的创建，而对客户端隐藏了具体的创建细节。在教练内部，实际上是通过建造者一步步构造出复杂的产品的。\n\n![UML](http://blog.designpattern.nanwulife.com/builder.png)\n\n我们对以上的场景做进一步演化，省略了教练类，并且将建造者放在产品类的内部。这种做法在实际场景中更为常见，利于维护与扩展，并且支持链式调用。\n\n产品类`Course`以及作为建造者的内部类`CourseBuilder`：\n\n```java\npublic class Course {\n    private String courseName;\n    private String coursePPT;\n    private String courseVideo;\n    private String courseArticle;\n    private String courseQA;    //question & answer\n\n    public Course(CourseBuilder courseBuilder) {\n        this.courseName = courseBuilder.courseName;\n        this.coursePPT = courseBuilder.coursePPT;\n        this.courseVideo = courseBuilder.courseVideo;\n        this.courseArticle = courseBuilder.courseArticle;\n        this.courseQA = courseBuilder.courseQA;\n    }\n\n    @Override\n    public String toString() {\n        return \"Course{\" +\n                \"courseName='\" + courseName + '\\'' +\n                \", coursePPT='\" + coursePPT + '\\'' +\n                \", courseVideo='\" + courseVideo + '\\'' +\n                \", courseArticle='\" + courseArticle + '\\'' +\n                \", courseQA='\" + courseQA + '\\'' +\n                '}';\n    }\n\n    public static class CourseBuilder{\n        private String courseName;\n        private String coursePPT;\n        private String courseVideo;\n        private String courseArticle;\n        private String courseQA;    //question & answer\n\n        public CourseBuilder buildCourseName(String courseName){\n            this.courseName = courseName;\n            return this;\n        }\n\n        public CourseBuilder buildCoursePPT(String coursePPT) {\n            this.coursePPT = coursePPT;\n            return this;\n        }\n\n        public CourseBuilder buildCourseVideo(String courseVideo) {\n            this.courseVideo = courseVideo;\n            return this;\n        }\n\n        public CourseBuilder buildCourseArticle(String courseArticle) {\n            this.courseArticle = courseArticle;\n            return this;\n        }\n\n        public CourseBuilder buildCourseQA(String courseQA) {\n            this.courseQA = courseQA;\n            return this;\n        }\n\n        public Course build(){\n            return new Course(this);\n        }\n    }\n}\n```\n\n`CourseBuilder`中的每一个构建方法都返回对象自身，使得其支持链式调用，而`build()`方法将建造者作为参数传给产品类的构造函数，其根据建造者初始化产品各属性值，并将构建完毕的产品返回。\n\n客户端`Test`：\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Course course = new Course.CourseBuilder().buildCourseName(\"Java设计模式\").buildCoursePPT(\"Java设计模式PPT\").\n                buildCourseVideo(\"Java设计模式视频\").build();\n        System.out.println(course);\n    }\n}\n```\n\n可以看出，演进之后的建造过程更为简洁明了。\n\n![UML](http://blog.designpattern.nanwulife.com/builder3.png)\n\n### StringBuilder中的应用\n\n`Java.util.StringBuilder`类下的`append`方法：\n\n```java\npublic final class StringBuilder\n    extends AbstractStringBuilder\n    implements java.io.Serializable, CharSequence\n{\n\t//...\n\n    public StringBuilder append(String str) {\n        super.append(str);\n        return this;\n    }\n\n    public StringBuilder append(StringBuffer sb) {\n        super.append(sb);\n        return this;\n    }\n    \n    public StringBuilder append(CharSequence s) {\n        super.append(s);\n        return this;\n    }\n\n    public StringBuilder append(CharSequence s, int start, int end) {\n        super.append(s, start, end);\n        return this;\n    }\n\n\t//...\n```\n\n可以看出，这里使用了建造者模式，`append`方法总是返回建造者自身。`StringBuilder`既担任建造者，又担任产品，而建造方法的实现由父类`AbstractStringBuilder`完成。\n\n`StringBuffer`的实现与上面类似，区别在于`StringBuffer`中的`append`方法加了`synchronized`关键字，因而是线程安全的。\n\n### mybatis中的应用\n\n查看`org.apache.ibatis.session`包下的`SqlSessionFactoryBuilder`：\n\n```java\npublic class SqlSessionFactoryBuilder {\n\t//...\n\n    public SqlSessionFactory build(Reader reader) {\n        return this.build((Reader)reader, (String)null, (Properties)null);\n    }\n\n    public SqlSessionFactory build(Reader reader, String environment) {\n        return this.build((Reader)reader, environment, (Properties)null);\n    }\n\n    public SqlSessionFactory build(Reader reader, Properties properties) {\n        return this.build((Reader)reader, (String)null, properties);\n    }\n\n    public SqlSessionFactory build(Reader reader, String environment, Properties properties) {\n        SqlSessionFactory var5;\n        try {\n            XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties);\n            var5 = this.build(parser.parse());\n        } catch (Exception var14) {\n            throw ExceptionFactory.wrapException(\"Error building SqlSession.\", var14);\n        } finally {\n            ErrorContext.instance().reset();\n\n            try {\n                reader.close();\n            } catch (IOException var13) {\n                ;\n            }\n\n        }\n\n        return var5;\n    }\n\n\t//...\n\n    public SqlSessionFactory build(Configuration config) {\n        return new DefaultSqlSessionFactory(config);\n    }\n```\n\n这里面两个参数的`build`方法大多直接调用后面三个参数的`build`方法，返回值都为`SqlSessionFactory`，而这个方法中又有另一个建造者`XMLConfigBuilder`构建出一个`Configuration`对象，我们查看`XMLConfigBuilder`中的相关方法：\n\n```java\n    public Configuration parse() {\n        if (this.parsed) {\n            throw new BuilderException(\"Each XMLConfigBuilder can only be used once.\");\n        } else {\n            this.parsed = true;\n            this.parseConfiguration(this.parser.evalNode(\"/configuration\"));\n            return this.configuration;\n        }\n    }\n\n    private void parseConfiguration(XNode root) {\n        try {\n            Properties settings = this.settingsAsPropertiess(root.evalNode(\"settings\"));\n            this.propertiesElement(root.evalNode(\"properties\"));\n            this.loadCustomVfs(settings);\n            this.typeAliasesElement(root.evalNode(\"typeAliases\"));\n            this.pluginElement(root.evalNode(\"plugins\"));\n            this.objectFactoryElement(root.evalNode(\"objectFactory\"));\n            this.objectWrapperFactoryElement(root.evalNode(\"objectWrapperFactory\"));\n            this.reflectorFactoryElement(root.evalNode(\"reflectorFactory\"));\n            this.settingsElement(settings);\n            this.environmentsElement(root.evalNode(\"environments\"));\n            this.databaseIdProviderElement(root.evalNode(\"databaseIdProvider\"));\n            this.typeHandlerElement(root.evalNode(\"typeHandlers\"));\n            this.mapperElement(root.evalNode(\"mappers\"));\n        } catch (Exception var3) {\n            throw new BuilderException(\"Error parsing SQL Mapper Configuration. Cause: \" + var3, var3);\n        }\n    }\n```\n\n构建出一个`Configuration`对象的过程都在`parseConfiguration`方法中，而`parse`方法主要用来标记是否已经parse过并且返回构建好的`Configuration`对象。\n\n## 单例模式（Singleton）\n\n**保证一个类仅有一个实例，并提供一个全局访问点**\n\n适用场景：想确保任何情况下都绝对只有一个实例。\n\n### 优缺点\n\n优点：在内存里只有一个实例，减少了内存开销；可以避免对资源的多重占用；设置全局访问点，严格控制访问。\n\n缺点：可扩展性较差。\n\n### 重点\n- 私有构造器\n- 线程安全\n- 延迟加载\n- 序列化和反序列化\n- 反射\n\n### 懒汉式实现\n\n#### 线程不安全\n\n以下实现中延迟了lazySingleton的实例化，因此如果没有使用该类，那么就不会实例化lazySingleton，从而节约了资源。\n\n但这种实现是线程不安全的，在多线程的环境下多个线程有可能同时判断`if(lazySingleton == null)`为`true`而进行实例化，导致多次实例化lazySingleton。\n\n```java\npublic class LazySingleton {\n    private static LazySingleton lazySingleton = null;\n    \n    private LazySingleton(){\n    }\n    \n    public static LazySingleton getInstance(){\n        if(lazySingleton == null){\n            lazySingleton = new LazySingleton();\n        }\n        return lazySingleton;\n    }\n}\n```\n\n#### synchronized关键字\n\n要想其变为线程安全的，第一种方式是在`getInstance()`方法加上`synchronized`关键字，使这个方法变为同步方法：\n\n```java\n    public synchronized static LazySingleton getInstance(){\n        if(lazySingleton == null){\n            lazySingleton = new LazySingleton();\n        }\n        return lazySingleton;\n    }\n```\n\n由于这个方法是静态方法，因此这个锁将锁住这个类，等效于以下代码：\n\n```java\n    public static LazySingleton getInstance(){\n\t    synchronized (LazySingleton.class){\n\t        if(lazySingleton == null){\n\t            lazySingleton = new LazySingleton();\n            }\n        }\n        return lazySingleton;\n    }\n```\n\n通过这种方式，虽然解决了懒汉式在多线程环境下的同步问题，但由于同步锁消耗的资源较多，且锁的范围较大，对性能有一定影响，因此还需要进行演进。\n\n#### 双重校验锁\n\n当lazyDoubleCheckSingleton就算没有被实例化时，`synchronized `关键字也保证了不会出现同步问题，例如，如果两个线程同时判断第一个`if(lazyDoubleCheckSingleton == null)`为`true`，其中一个线程会进入到第二个`if(lazyDoubleCheckSingleton == null)`并开始实例化lazyDoubleCheckSingleton，而另一个线程则被阻塞直到前一个进程释放锁。一旦前一个线程实例化完并释放锁，被阻塞的线程将进入第二个`if(lazyDoubleCheckSingleton == null)`且判断为`false`。之后，由于lazyDoubleCheckSingleton已经被实例化过，再有线程调用此方法都会在第一个`if(lazyDoubleCheckSingleton == null)`就判断为`false`，不会再进行加锁操作。\n\n```java\npublic class LazyDoubleCheckSingleton {\n    private static LazyDoubleCheckSingleton lazyDoubleCheckSingleton = null;\n    \n    private LazyDoubleCheckSingleton(){\n    }\n    \n    public static LazyDoubleCheckSingleton getInstance(){\n        if(lazyDoubleCheckSingleton == null){\n            synchronized (LazyDoubleCheckSingleton.class) {\n                if (lazyDoubleCheckSingleton == null) {\n                    lazyDoubleCheckSingleton = new LazyDoubleCheckSingleton();\n                }\n            }\n        }\n        return lazyDoubleCheckSingleton;\n    }\n}\n```\n\n这种实现依然存在问题，对于`lazyDoubleCheckSingleton = new LazyDoubleCheckSingleton();`这一行代码其实是分为以下三步执行的：\n1. 分配内存给这个对象\n2. 初始化对象\n3. 设置lazyDoubleCheckSingleton指向刚分配的内存地址\n\n但是JVM为了优化指令，提高程序运行效率，会进行指令重排序，指令顺序有可能由1->2->3变为1->3->2，这在单线程下不会出现问题，但是在多线程下会导致一个线程获得还没有被初始化的实例。例如，一个线程已经执行到了`lazyDoubleCheckSingleton = new LazyDoubleCheckSingleton();`这一行，且完成了1->3这两步，即lazyDoubleCheckSingleton已经不为null，但还没有进行初始化，此时另一个线程在第一个`if(lazyDoubleCheckSingleton == null)`判断为`false`后便将还未被初始化的lazyDoubleCheckSingleton返回，从而产生问题。\n\n要解决指令重排序导致的问题，第一种方式是使用`volatile`关键字禁止JVM进行指令重排序：\n\n```java\npublic class LazyDoubleCheckSingleton {\n    private volatile static LazyDoubleCheckSingleton lazyDoubleCheckSingleton = null;\n    \n    private LazyDoubleCheckSingleton(){\n    }\n    \n    public static LazyDoubleCheckSingleton getInstance(){\n        //...\n    }\n}\n```\n\n#### 静态内部类\n\n另一种解决指令重排序所导致的问题的方式是使用静态内部类让其它线程看不到这个线程的指令重排序：\n\n```java\npublic class StaticInnerClassSingleton {\n\n    private static class InnerClass{\n        private static StaticInnerClassSingleton staticInnerClassSingleton = new StaticInnerClassSingleton();\n    }\n    \n    public static StaticInnerClassSingleton getInstance(){\n        return InnerClass.staticInnerClassSingleton;\n    }\n    \n    private StaticInnerClassSingleton(){\n    }\n}\n```\n\n当StaticInnerClassSingleton类加载时，静态内部类InnerClass还不会加载进内存，只有调用`getInstance()`方法使用到了`InnerClass.staticInnerClassSingleton`时才会加载。在多线程环境下，只有一个线程能获得Class对象的初始化锁，从而加载StaticInnerClassSingleton类，也就是这时候完成staticInnerClassSingleton的实例化，另一个线程此时只能在这个Class对象的初始化锁上等待。因此，由于等待的线程是看不见指令重排序的过程的，所以指令重排的顺序不会有任何影响。\n\n### 饿汉式实现\n\n饿汉式即当类加载的时候就完成实例化，避免了同步问题，但同时也因为没有延迟实例化的特性而导致资源的浪费。\n\n```java\npublic class HungrySingleton implements Serializable {\n    private final static HungrySingleton hungrySingleton = new HungrySingleton();\n\n    private HungrySingleton(){\n    }\n    \n    public static HungrySingleton getInstance(){\n        return hungrySingleton;\n    }\n}\n```\n\n以上代码与以下代码等效：\n\n```java\npublic class HungrySingleton implements Serializable {\n    private final static HungrySingleton hungrySingleton;\n\n    static{\n        hungrySingleton = new HungrySingleton();\n    }\n\n    private HungrySingleton(){\n    }\n    \n    public static HungrySingleton getInstance(){\n        return hungrySingleton;\n    }\n}\n```\n\n### 单例模式存在的问题\n\n#### 序列化破坏单例模式\n\n通过对Singleton的序列化与反序列化得到的对象是一个新的对象，这就破坏了Singleton的单例性。\n\n```java\npublic class Test {\n    public static void main(String[] args){\n\t\tHungrySingleton instance = HungrySingleton.getInstance();\n\t\t\n\t\tObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"singleton_file\"));\n        oos.writeObject(instance);\n        File file = new File(\"singleton_file\");\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file));\n        HungrySingleton newInstance = (EnumInstance) ois.readObject();\n        \n        System.out.println(instance);\n        System.out.println(newInstance);\n        System.out.println(instance == newInstance);\n\t}\n}\n```\n\n之所以会如此，是因为序列化会通过反射调用无参数的构造方法创建一个新的对象。要解决这个问题很简单：只要在Singleton类中定义readResolve即可：\n\n```java\npublic class HungrySingleton implements Serializable {\n\t//...\n\t\n\tprivate Object readResolve(){\n        return hungrySingleton;\n    }\n    \n    //...\n}\n```\n\n#### 反射攻击\n\n通过反射可以打开Singleton的构造器权限，由此实例化一个新的对象。\n\n```java\npublic class Test {\n    public static void main(String[] args){\n        Class objectClass = HungrySingleton.class;\n        Class objectClass = LazySingleton.class;\n        Constructor constructor = objectClass.getDeclaredConstructor();\n        constructor.setAccessible(true);\n\n        HungrySingleton instance = HungrySingleton.getInstance();\n        HungrySingleton newInstance = (HungrySingleton) constructor.newInstance();\n\n\t\tSystem.out.println(instance);\n        System.out.println(newInstance);\n        System.out.println(instance == newInstance);\n    }\n}\n```\n\n对于饿汉式，由于是在类加载的时候就实例化对象了，因此要解决反射攻击问题，可以在构造器内部加一个判断用来防御，这样当反射调用构造器的时候hungrySingleton已经存在，不会再进行实例化并抛出异常：\n\n```java\npublic class HungrySingleton implements Serializable {\n\t//...\n\n    private HungrySingleton(){\n        if(hungrySingleton != null){\n            throw new RuntimeException(\"单例构造器禁止反射调用\");\n        }\n    }\n\t\n\t//...\n}\n```\n\n而对于懒汉式，即使加上了上面的防御代码，依然可以通过调整顺序即先使用反射创建实例，再调用`getInstance()`创建实例来得到不止一个该类的对象。\n\n### 枚举实现\n\n枚举类是实现单例的最佳方式，其在多次序列化再进行反序列化之后不会得到多个实例，也可以防御反射攻击。这部分的处理是由`ObjectInputStream`和`Constructor`这两个类实现的。\n\n```java\npublic enum EnumInstance {\n    INSTANCE;\n    private Object data;\n\n    public Object getData() {\n        return data;\n    }\n\n    public void setData(Object data) {\n        this.data = data;\n    }\n\n    public static EnumInstance getInstance(){\n        return INSTANCE;\n    }\n}\n```\n\n### 容器实现\n\n如果系统中单例对象特别多，则可以考虑使用一个容器把所有单例对象统一管理，但是是线程不安全的。\n\n```java\npublic class ContainerSingleton {\n    private static Map<String, Object> singletonMap = new HashMap<String, Object>();\n\n    private ContainerSingleton(){\n    }\n\n    public static void putInstance(String key, Object instance){\n        if(StringUtils.isNotBlank(key) && instance != null){\n            if(!singletonMap.containsKey(key)){\n                singletonMap.put(key, instance);\n            }\n        }\n    }\n\n    public static Object getInstance(String key){\n        return singletonMap.get(key);\n    }\n}\n```\n\n### Runtime中的应用\n\n查看`java.lang`包下的`Runtime`类：\n\n```java\npublic class Runtime {\n    private static Runtime currentRuntime = new Runtime();\n\n    public static Runtime getRuntime() {\n        return currentRuntime;\n    }\n\n\t//...\n}\n```\n\n这里的currentRuntime在类加载的时候就实例化好了，属于饿汉式单例模式。\n\n### Spring中的应用\n\n查看`org.springframework.beans.factory.config`包下的`AbstractFactoryBean`：\n\n```java\npublic abstract class AbstractFactoryBean<T> implements FactoryBean<T>, BeanClassLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean {\n\t//...\n\n    public final T getObject() throws Exception {\n        if (this.isSingleton()) {\n            return this.initialized ? this.singletonInstance : this.getEarlySingletonInstance();\n        } else {\n            return this.createInstance();\n        }\n    }\n\n    private T getEarlySingletonInstance() throws Exception {\n        Class<?>[] ifcs = this.getEarlySingletonInterfaces();\n        if (ifcs == null) {\n            throw new FactoryBeanNotInitializedException(this.getClass().getName() + \" does not support circular references\");\n        } else {\n            if (this.earlySingletonInstance == null) {\n                this.earlySingletonInstance = Proxy.newProxyInstance(this.beanClassLoader, ifcs, new AbstractFactoryBean.EarlySingletonInvocationHandler());\n            }\n\n            return this.earlySingletonInstance;\n        }\n    }\n\n\t//...\n}\n```\n\n在`getObject()`方法中，先判断这个对象是否为单例的，如果不是则直接创建；如果是单例的，那么判断是否被初始化过，如果被初始化了则直接返回，没有的话则调用`getEarlySingletonInstance()`方法获取早期的单例对象，如果早期的单例对象不存在，则通过代理来获取。\n\n# 结构型\n\n## 外观（Facade）\n\n外观模式又叫门面模式，**提供了一个统一的接口，用来访问子系统中的一群接口。**\n\n外观模式定义了一个高层接口，让子系统更容易使用。\n\n适用场景：\n- 子系统越来越复杂，增加外观模式提供简单调用接口\n- 构建多层系统接口，利用外观对象作为每层的入口，简化层间调用\n\n### 优缺点\n\n优点：简化了调用过程，无需了解子系统，防止带来风险；减少系统依赖、松散耦合；更好的划分访问层次；符合迪米特法则，即最少知道原则。\n\n缺点：增加子系统、扩展子系统行为容易引入风险，不符合开闭原则。\n\n### 应用场景\n\n我们考虑一个用积分兑换礼物的场景，积分兑换礼物需要校验积分是否符合资格、扣减积分以及对接物流系统三个模块，这三个模块也可以理解为三个子系统。\n\n校验资格子系统：\n\n```java\npublic class QualifyService {\n    public boolean isAvailable(PointsGift pointsGift){\n        System.out.println(\"校验\" + pointsGift.getName() + \" 积分资格通过，库存通过\");\n        return true;\n    }\n}\n```\n\n扣减积分子系统：\n\n```java\npublic class PointsPaymentService {\n    public boolean pay(PointsGift pointsGift){\n        //扣减积分\n        System.out.println(\"支付\" + pointsGift.getName() + \" 积分成功\");\n        return true;\n    }\n}\n```\n\n对接物流系统的子系统：\n\n```java\npublic class ShippingService {\n    public String shipGift(PointsGift pointsGift){\n        //物流系统的对接逻辑\n        System.out.println(pointsGift.getName() + \"进入物流系统\");\n        String shippingOrderNo = \"666\";\n        return shippingOrderNo;\n    }\n}\n```\n\n积分礼物类：\n\n```java\npublic class PointsGift {\n    private String name;\n\n    public PointsGift(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n\n外观类：\n\n```java\npublic class GiftExchangeService {\n    private QualifyService qualifyService = new QualifyService();\n    private PointsPaymentService pointsPaymentService = new PointsPaymentService();\n    private ShippingService shippingService = new ShippingService();\n\n    public QualifyService getQualifyService() {\n        return qualifyService;\n    }\n\n    public void setQualifyService(QualifyService qualifyService) {\n        this.qualifyService = qualifyService;\n    }\n\n    public PointsPaymentService getPointsPaymentService() {\n        return pointsPaymentService;\n    }\n\n    public void setPointsPaymentService(PointsPaymentService pointsPaymentService) {\n        this.pointsPaymentService = pointsPaymentService;\n    }\n\n    public ShippingService getShippingService() {\n        return shippingService;\n    }\n\n    public void setShippingService(ShippingService shippingService) {\n        this.shippingService = shippingService;\n    }\n\n    public void giftExchange(PointsGift pointsGift){\n        if(qualifyService.isAvailable(pointsGift)){\n            //资格校验通过\n            if(pointsPaymentService.pay(pointsGift)){\n                //如果支付积分成功\n                String shippingOrderNo = shippingService.shipGift(pointsGift);\n                System.out.println(\"物流系统下单成功，订单号是：\"+shippingOrderNo);\n            }\n        }\n    }\n}\n```\n\n客户端类：\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        PointsGift pointsGift = new PointsGift(\"衣服\");\n        GiftExchangeService giftExchangeService = new GiftExchangeService();\n        giftExchangeService.giftExchange(pointsGift);\n    }\n}\n```\n\n输出：\n\n```\n校验衣服 积分资格通过，库存通过\n支付衣服 积分成功\n衣服进入物流系统\n物流系统下单成功，订单号是：666\n```\n\n客户端创建一个衣服作为积分商品，然后使用积分兑换系统来完成积分兑换，这个积分兑换系统作为一个外观类整合了各个子系统，而客户端无需知道具体的子系统。\n\n![外观类](http://blog.designpattern.nanwulife.com/Package%20facade.png)\n\n### Spring中的应用\n\n查看`org.springframework.jdbc.support`下的`JdbcUtils`：\n\n```java\npublic abstract class JdbcUtils {\n\tpublic static void closeConnection(Connection con) {\n\t\tif (con != null) {\n\t\t\ttry {\n\t\t\t\tcon.close();\n\t\t\t}\n\t\t\tcatch (SQLException ex) {\n\t\t\t\tlogger.debug(\"Could not close JDBC Connection\", ex);\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\t// We don't trust the JDBC driver: It might throw RuntimeException or Error.\n\t\t\t\tlogger.debug(\"Unexpected exception on closing JDBC Connection\", ex);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static Object getResultSetValue(ResultSet rs, int index, Class<?> requiredType) throws SQLException {\n\t\tif (requiredType == null) {\n\t\t\treturn getResultSetValue(rs, index);\n\t\t}\n\n\t\tObject value = null;\n\t\tboolean wasNullCheck = false;\n\n\t\t// Explicitly extract typed value, as far as possible.\n\t\tif (String.class.equals(requiredType)) {\n\t\t\tvalue = rs.getString(index);\n\t\t}\n\t\telse if (boolean.class.equals(requiredType) || Boolean.class.equals(requiredType)) {\n\t\t\tvalue = rs.getBoolean(index);\n\t\t\twasNullCheck = true;\n\t\t}\n\t\telse if (byte.class.equals(requiredType) || Byte.class.equals(requiredType)) {\n\t\t\tvalue = rs.getByte(index);\n\t\t\twasNullCheck = true;\n\t\t}\n\t\telse if (short.class.equals(requiredType) || Short.class.equals(requiredType)) {\n\t\t\tvalue = rs.getShort(index);\n\t\t\twasNullCheck = true;\n\t\t}\n\t\telse if (int.class.equals(requiredType) || Integer.class.equals(requiredType)) {\n\t\t\tvalue = rs.getInt(index);\n\t\t\twasNullCheck = true;\n\t\t}\n\t\telse if (long.class.equals(requiredType) || Long.class.equals(requiredType)) {\n\t\t\tvalue = rs.getLong(index);\n\t\t\twasNullCheck = true;\n\t\t}\n\t\telse if (float.class.equals(requiredType) || Float.class.equals(requiredType)) {\n\t\t\tvalue = rs.getFloat(index);\n\t\t\twasNullCheck = true;\n\t\t}\n\t\telse if (double.class.equals(requiredType) || Double.class.equals(requiredType) ||\n\t\t\t\tNumber.class.equals(requiredType)) {\n\t\t\tvalue = rs.getDouble(index);\n\t\t\twasNullCheck = true;\n\t\t}\n\t\telse if (byte[].class.equals(requiredType)) {\n\t\t\tvalue = rs.getBytes(index);\n\t\t}\n\t\telse if (java.sql.Date.class.equals(requiredType)) {\n\t\t\tvalue = rs.getDate(index);\n\t\t}\n\t\telse if (java.sql.Time.class.equals(requiredType)) {\n\t\t\tvalue = rs.getTime(index);\n\t\t}\n\t\telse if (java.sql.Timestamp.class.equals(requiredType) || java.util.Date.class.equals(requiredType)) {\n\t\t\tvalue = rs.getTimestamp(index);\n\t\t}\n\t\telse if (BigDecimal.class.equals(requiredType)) {\n\t\t\tvalue = rs.getBigDecimal(index);\n\t\t}\n\t\telse if (Blob.class.equals(requiredType)) {\n\t\t\tvalue = rs.getBlob(index);\n\t\t}\n\t\telse if (Clob.class.equals(requiredType)) {\n\t\t\tvalue = rs.getClob(index);\n\t\t}\n\t\telse {\n\t\t\t// Some unknown type desired -> rely on getObject.\n\t\t\tvalue = getResultSetValue(rs, index);\n\t\t}\n\n\t\t// Perform was-null check if demanded (for results that the\n\t\t// JDBC driver returns as primitives).\n\t\tif (wasNullCheck && value != null && rs.wasNull()) {\n\t\t\tvalue = null;\n\t\t}\n\t\treturn value;\n\t}\n```\n\n可以看出，该工具类主要是对jdbc的封装，向外提供一个隐藏了具体实现细节的接口，对访问屏蔽复杂的子系统调用。\n\n### SLF4J中的应用\n\nSLF4J是简单的日志外观模式框架，抽象了各种日志框架例如Logback、Log4j、Commons-logging和JDK自带的logging实现接口。它使得用户可以在部署时使用自己想要的日志框架。\n\nSLF4J没有替代任何日志框架，它仅仅是标准日志框架的外观模式。如果在类路径下除了SLF4J再没有任何日志框架，那么默认状态是在控制台输出日志。\n\n\n## 适配器（Adapter）\n\n**将一个类的接口转换成客户期望的另一个接口。**\n\n适配器模式使原本接口不兼容的类可以一起工作。根据适配器类与适配者类的关系不同，适配器模式可分为对象适配器和类适配器两种，在对象适配器模式中，适配器与适配者之间是组合关系，使用的是委托机制；在类适配器模式中，适配器与适配者之间是继承（或实现）关系。\n\n适用场景：\n- 已经存在的类，它的方法和需求不匹配时（方法结果相同或相似）。\n- 不是软件设计阶段考虑的设计模式，是随着软件维护，由于不同产品、不同厂家造功能类似而接口不相同情况下的解决方案。\n\n### 优缺点\n\n优点：能提高类的透明性和复用；目标类和适配器类解耦，提高程序扩展性；符合开闭原则。\n\n缺点：增加了系统的复杂性；增加系统代码可读的难度。\n\n### 应用场景\n\n#### 类适配器模式\n\n被适配者类：\n\n```java\npublic class Adaptee {\n    public void adapteeRequest(){\n        System.out.println(\"被适配者的方法\");\n    }\n}\n```\n\n目标接口：\n\n```java\npublic interface Target {\n    void request();\n}\n```\n\n目标接口实现（非必需的，只是待会用来做对比）：\n\n```java\npublic class ConcreteTarget implements Target {\n    public void request() {\n        System.out.println(\"concreteTarget目标方法\");\n    }\n}\n```\n\n适配器类，既实现了目标接口又继承了被适配者类，因此直接在实现的`request()`中调用父类的`adapteeRequest()`方法即可：\n\n```java\npublic class Adapter extends Adaptee implements Target{\n    public void request() {\n        super.adapteeRequest();\n    }\n}\n```\n\n客户端类：\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Target target = new ConcreteTarget();\n        target.request();\n\n        Target adapterTarget = new Adapter();\n        adapterTarget.request();\n    }\n}\n```\n\n通过适配器，我们就将被适配者类`Adaptee`的`adapteeRequest()`方法适配成了目标接口`Target`的`request()`方法。\n\n![adapter](http://blog.designpattern.nanwulife.com/Package%20classadapter.png)\n\n#### 对象适配器模式\n\n在对象适配器模式中，被适配者类`Adaptee`、目标接口与实现类`Target` `ConcreteTarget`、客户端类`Test` 都不需要改变，唯一需要改变的就是适配器类`Adapter`。\n\n```java\npublic class Adapter implements Target {\n    private Adaptee adaptee = new Adaptee();\n\n    public void request() {\n        adaptee.adapteeRequest();\n    }\n}\n```\n\n可以看出，对象适配器与类适配器不同之处在于类适配器是通过继承来完成适配，而对象适配器则组合被适配者并将请求委托给被适配者来完成。\n\n![adapter](http://blog.designpattern.nanwulife.com/Package%20objectadapter.png)\n\n#### 变压器的例子\n\n这里考虑一个生活中常见的变压器的场景，我们把220V交流电压适配成5V直流电压，其中220V交流电压就是被适配者类，而5V直流电压则是目标接口，我们需要一个适配器来完成这个变压操作。\n\n被适配者类（220V交流电压）：\n\n```java\npublic class AC220 {\n    public int outputAC220V(){\n        int output = 220;\n        System.out.println(\"输出交流电\" + output + \"V\");\n        return output;\n    }\n}\n```\n\n目标接口（5V直流电压）：\n\n```java\npublic interface DC5 {\n    int outputDC5V();\n}\n```\n\n适配器类，这里使用的是对象适配器模式：\n\n```java\npublic class PowerAdapter implements DC5 {\n    private AC220 ac220 = new AC220();\n\n    public int outputDC5V() {\n\t    //将220V交流电压作为输入电压\n        int adapterInput = ac220.outputAC220V();\n\n        //模拟变压器，得到5V直流电压\n        int adapterOutput = adapterInput / 44;\n\n        System.out.println(\"使用PowerAdapter输入AC：\" + adapterInput +\"V \" + \"输出DC：\" + adapterOutput + \"V\");\n        return adapterOutput;\n    }\n}\n```\n\n客户端类：\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        DC5 dc5 = new PowerAdapter();\n        dc5.outputDC5V();\n    }\n}\n```\n\n通过适配器将220V交流电压转换成了5V直流电压，此时输出：\n```\n输出交流电220V\n使用PowerAdapter输入AC：220V 输出DC：5V\n```\n\n### Spring AOP中的应用\n\n在Spring的AOP中，使用的`Advice (通知)`来增强被代理类的功能。`Advice`的类型有：`MethodBeforeAdvice`、`AfterReturningAdvice`、`ThrowsAdvice`，而每个类型的`Advice`都有对应的拦截器`MethodBeforeAdviceInterceptor`、`AfterReturningAdviceInterceptor`、`ThrowsAdviceInterceptor`。\n\nSpring需要将每个`Advice`都封装成对应的拦截器类型，返回给容器，所以需要使用适配器模式对 `Advice`进行转换。\n\n三个适配者类：\n\n```java\npublic interface MethodBeforeAdvice extends BeforeAdvice {\n    void before(Method var1, Object[] var2, @Nullable Object var3) throws Throwable;\n}\n\npublic interface AfterReturningAdvice extends AfterAdvice {\n    void afterReturning(@Nullable Object var1, Method var2, Object[] var3, @Nullable Object var4) throws Throwable;\n}\n\npublic interface ThrowsAdvice extends AfterAdvice {\n}\n```\n\n适配器接口，其中`supportsAdvice`方法判断`Advice`类型是否匹配，另一个是创建对应的拦截器的工厂方法：\n\n```java\npublic interface AdvisorAdapter {\n    boolean supportsAdvice(Advice var1);\n\n    MethodInterceptor getInterceptor(Advisor var1);\n}\n```\n\n三个适配器类：\n\n```java\nclass MethodBeforeAdviceAdapter implements AdvisorAdapter, Serializable {\n\t@Override\n\tpublic boolean supportsAdvice(Advice advice) {\n\t\treturn (advice instanceof MethodBeforeAdvice);\n\t}\n\n\t@Override\n\tpublic MethodInterceptor getInterceptor(Advisor advisor) {\n\t\tMethodBeforeAdvice advice = (MethodBeforeAdvice) advisor.getAdvice();\n\t\treturn new MethodBeforeAdviceInterceptor(advice);\n\t}\n}\n\nclass AfterReturningAdviceAdapter implements AdvisorAdapter, Serializable {\n\t@Override\n\tpublic boolean supportsAdvice(Advice advice) {\n\t\treturn (advice instanceof AfterReturningAdvice);\n\t}\n\t@Override\n\tpublic MethodInterceptor getInterceptor(Advisor advisor) {\n\t\tAfterReturningAdvice advice = (AfterReturningAdvice) advisor.getAdvice();\n\t\treturn new AfterReturningAdviceInterceptor(advice);\n\t}\n}\n\nclass ThrowsAdviceAdapter implements AdvisorAdapter, Serializable {\n\t@Override\n\tpublic boolean supportsAdvice(Advice advice) {\n\t\treturn (advice instanceof ThrowsAdvice);\n\t}\n\t@Override\n\tpublic MethodInterceptor getInterceptor(Advisor advisor) {\n\t\treturn new ThrowsAdviceInterceptor(advisor.getAdvice());\n\t}\n}\n```\n\n客户端类：\n\n```java\npublic class DefaultAdvisorAdapterRegistry implements AdvisorAdapterRegistry, Serializable {\n    private final List<AdvisorAdapter> adapters = new ArrayList(3);\n\n    public DefaultAdvisorAdapterRegistry() {\n        // 这里注册了适配器\n        this.registerAdvisorAdapter(new MethodBeforeAdviceAdapter());\n        this.registerAdvisorAdapter(new AfterReturningAdviceAdapter());\n        this.registerAdvisorAdapter(new ThrowsAdviceAdapter());\n    }\n    \n    public MethodInterceptor[] getInterceptors(Advisor advisor) throws UnknownAdviceTypeException {\n        List<MethodInterceptor> interceptors = new ArrayList(3);\n        Advice advice = advisor.getAdvice();\n        if (advice instanceof MethodInterceptor) {\n            interceptors.add((MethodInterceptor)advice);\n        }\n\n        Iterator var4 = this.adapters.iterator();\n\n        while(var4.hasNext()) {\n            AdvisorAdapter adapter = (AdvisorAdapter)var4.next();\n            if (adapter.supportsAdvice(advice)) {   // 这里调用适配器方法\n                interceptors.add(adapter.getInterceptor(advisor));  // 这里调用适配器方法\n            }\n        }\n\n        if (interceptors.isEmpty()) {\n            throw new UnknownAdviceTypeException(advisor.getAdvice());\n        } else {\n            return (MethodInterceptor[])interceptors.toArray(new MethodInterceptor[0]);\n        }\n    }\n    // ...\n}    \n```\n\n上面的代码在while循环里逐个取出注册的适配器，调用`supportsAdvice()`方法来判断`Advice`对应的类型，然后调用 getInterceptor() 创建对应类型的拦截器。\n\n![advice](http://blog.designpattern.nanwulife.com/20180919_2217.jpg)\n\n这里应该属于对象适配器模式，不过这里的`Advice`对象是从外部传进来，而不是成员属性。\n\n\n## 组合（Composite）\n\n**将对象组合成树形结构来表示“整体-部分”层次关系，允许用户以相同的方式处理单独对象和组合对象。**\n\n适用场景：\n- 希望客户端可以忽略组合对象与单个对象的差异时。\n- 处理一个树形结构时。\n\n### 优缺点\n\n优点：客户端不必关心处理的是单个对象还是整个组合结构，简化了客户端代码；增加新的构件无须对现有类库进行任何修改，符合开闭原则。\n\n缺点：限制类型时会较为复杂；使设计变得更加抽象。\n\n### 应用场景\n\n一个在线学习网站下有许多目录以及学习视频，而目录下可能还会存在子目录，这里就可以使用组合模式。\n\n抽象构件：\n\n```java\npublic abstract class CatalogComponent {\n    public void add(CatalogComponent catalogComponent){\n        throw new UnsupportedOperationException(\"不支持添加操作\");\n    }\n\n    public void remove(CatalogComponent catalogComponent){\n        throw new UnsupportedOperationException(\"不支持删除操作\");\n    }\n\n    public String getName(CatalogComponent catalogComponent){\n        throw new UnsupportedOperationException(\"不支持获取名称操作\");\n    }\n\n    public double getPrice(CatalogComponent catalogComponent){\n        throw new UnsupportedOperationException(\"不支持获取价格操作\");\n    }\n\n    public void print(){\n        throw new UnsupportedOperationException(\"不支持打印操作\");\n    }\n}\n```\n\n叶子构件（课程视频）：\n\n```java\npublic class Course extends CatalogComponent{\n    private String name;\n    private double price;\n\n    public Course(String name, double price) {\n        this.name = name;\n        this.price = price;\n    }\n\n    @Override\n    public String getName(CatalogComponent catalogComponent) {\n        return this.name;\n    }\n\n    @Override\n    public double getPrice(CatalogComponent catalogComponent) {\n        return this.price;\n    }\n\n    @Override\n    public void print() {\n        System.out.println(\"Course Name: \" + name + \" Price: \" + price);\n    }\n}\n```\n\n容器构件（课程目录）：\n\n```java\npublic class CourseCatalog extends  CatalogComponent {\n    private List<CatalogComponent> items = new ArrayList<CatalogComponent>();\n    private String name;\n    private Integer level;\n\n    public CourseCatalog(String name, Integer level) {\n        this.name = name;\n        this.level = level;\n    }\n\n    @Override\n    public String getName(CatalogComponent catalogComponent) {\n        return this.name;\n    }\n\n    @Override\n    public void add(CatalogComponent catalogComponent) {\n        items.add(catalogComponent);\n    }\n\n    @Override\n    public void remove(CatalogComponent catalogComponent) {\n        items.remove(catalogComponent);\n    }\n\n    @Override\n    public void print() {\n        System.out.println(this.name);\n        for(CatalogComponent catalogComponent : items){\n            if(this.level != null){\n                for(int i = 0; i < this.level; i++)\n                    System.out.print(\"  \");\n            }\n            catalogComponent.print();\n        }\n    }\n}\n```\n\n客户端类：\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        CatalogComponent linuxCourse = new Course(\"linux课程\", 11);\n        CatalogComponent windowsCourse = new Course(\"Windows课程\", 11);\n\n        CatalogComponent javaCourseCatalog = new CourseCatalog(\"Java课程目录\", 2);\n\n        CatalogComponent mallCourse1 = new Course(\"Java电商一期\", 55);\n        CatalogComponent mallCourse2 = new Course(\"Java电商二期\", 66);\n        CatalogComponent designPattern = new Course(\"Java设计模式\", 77);\n\n        javaCourseCatalog.add(mallCourse1);\n        javaCourseCatalog.add(mallCourse2);\n        javaCourseCatalog.add(designPattern);\n\n        CatalogComponent mainCourseCatalog = new CourseCatalog(\"课程主目录\", 1);\n        mainCourseCatalog.add(linuxCourse);\n        mainCourseCatalog.add(windowsCourse);\n        mainCourseCatalog.add(javaCourseCatalog);\n        mainCourseCatalog.print();\n    }\n}\n```\n\n组合模式的关键是定义了一个抽象构件类，它既可以代表叶子，又可以代表容器，而客户端针对该抽象构件类进行编程，无须知道它到底表示的是叶子还是容器，可以对其进行统一处理。同时容器对象与抽象构件类之间还建立一个聚合关系，在容器对象中既可以包含叶子，也可以包含容器，以此实现递归组合，形成一个树形结构。\n\n![compo](http://blog.designpattern.nanwulife.com/Package%20composite.png)\n\n\n## 装饰者（Decorator）\n\n**在不改变原有对象的基础之上，将功能附加到对象上。**\n\n提供了比继承更有弹性的替代方案（扩展原有对象功能）。\n\n适用场景：\n- 扩展一个类的功能或给一个类添加附加职责。\n- 动态的给一个对象添加功能，这些功能可以再动态的撤销。\n\n### 优缺点\n\n优点：继承的有力补充，比继承灵活，不改变原有对象的情况下给一个对象扩展功能；通过使用不同装饰类以及这些装饰类的排列组合，可以实现不同效果；符合开闭原则。\n\n缺点：会出现更多的代码，更多的类，增加程序复杂性；动态装饰时、多层装饰时会更复杂。\n\n### 应用场景\n\n我们考虑一个买煎饼的例子，人们可以自由地选择是否要在煎饼上加鸡蛋或者火腿，每次要加多少个，而总共价格是多少。\n\n煎饼抽象类：\n\n```java\npublic abstract class ABattercake {\n    protected abstract String getDesc();\n    protected abstract int cost();\n}\n```\n\n煎饼类：\n\n```java\npublic class Battercake extends ABattercake {\n    @Override\n    protected String getDesc() {\n        return \"煎饼\";\n    }\n\n    @Override\n    protected int cost() {\n        return 8;\n    }\n}\n```\n\n抽象装饰类（并不是真正的抽象类，因为这个场景中不需要抽象方法），这个类将抽象煎饼类作为成员属性，并且也继承了抽象煎饼类：\n\n```java\npublic class AbstractDecorator extends ABattercake {\n    private ABattercake aBattercake;\n\n    public AbstractDecorator(ABattercake aBattercake) {\n        this.aBattercake = aBattercake;\n    }\n\n    @Override\n    protected String getDesc() {\n        return this.aBattercake.getDesc();\n    }\n\n    @Override\n    protected int cost() {\n        return this.aBattercake.cost();\n    }\n}\n```\n\n加鸡蛋的装饰类，继承了抽象装饰类：\n\n```java\npublic class EggDecorator extends AbstractDecorator {\n    public EggDecorator(ABattercake aBattercake) {\n        super(aBattercake);\n    }\n\n    @Override\n    protected String getDesc() {\n        return super.getDesc() + \" 加一个鸡蛋\";\n    }\n\n    @Override\n    protected int cost() {\n        return super.cost()+1;\n    }\n}\n```\n\n加火腿的装饰类，继承了抽象装饰类：\n\n```java\npublic class SausageDecorator extends AbstractDecorator {\n    public SausageDecorator(ABattercake aBattercake) {\n        super(aBattercake);\n    }\n\n    @Override\n    protected String getDesc() {\n        return super.getDesc() + \" 加一根香肠\";\n    }\n\n    @Override\n    protected int cost() {\n        return super.cost()+2;\n    }\n}\n```\n\n客户端类：\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        ABattercake aBattercake;\n        aBattercake = new Battercake();\n        aBattercake = new EggDecorator(aBattercake);\n        aBattercake = new EggDecorator(aBattercake);\n        aBattercake = new SausageDecorator(aBattercake);\n\n        System.out.println(aBattercake.getDesc() + \" 销售价格：\" + aBattercake.cost());\n    }\n}\n```\n\n输出：\n\n```\n煎饼 加一个鸡蛋 加一个鸡蛋 加一根香肠 销售价格：12\n```\n\n装饰类和具体组件类都继承了抽象组件类。所谓装饰，就是把这个装饰者套在被装饰者之上，从而动态扩展被装饰者的功能，装饰者的方法有一部分是自己的，这属于它的功能，然后调用被装饰者的方法实现，从而也保留了被装饰者的功能。\n\n\n![装饰者](http://blog.designpattern.nanwulife.com/Package%20v2.png)\n\n### Java I/O中的应用\n\n在Java中应用程序通过输入流（InputStream）的Read方法从源地址处读取字节，然后通过输出流（OutputStream）的Write方法将流写入到目的地址。\n\n流的来源主要有三种：本地的文件（File）、控制台、通过socket实现的网络通信。\n\n![Java I/O中的应用](http://blog.designpattern.nanwulife.com/java-io-flow.png)\n\n下面查看其中InputStream的类图，而关于OutputStream、Reader、Writer等都与此类似：\n\n![InputStream](http://blog.designpattern.nanwulife.com/20180918InputStream.png)\n\n由上图可以看出只要继承了FilterInputStream的类就是装饰者类，可以用于包装其他的流，装饰者类还可以对装饰者和类进行再包装。以下是对其中部分类的简要介绍：\n\n| 流名称 | 简介 |\n|--|--|\n| ByteArrayInputStream  | 字节数组输入流在内存中创建一个字节数组缓冲区，从输入流读取的数据保存在该字节数组缓冲区中 |\n| PipedInputStream | 访问管道，主要在线程中使用，一个线程通过管道输出流发送数据，而另一个线程通过管道输入流读取数据，这样可实现两个线程间的通讯 |\n| FileInputStream | 访问文件，把一个文件作为 InputStream ，实现对文件的读取操作 |\n| PushBackInputStream | 推回输入流，可以把读取进来的某些数据重新回退到输入流的缓冲区之中 |\n| BufferedInputStream | 带缓冲的输入流一次读很多字节先放到内存中，等缓冲区满的时候一次性写入磁盘，这种方式可以减少磁盘操作次数，因此效率很高 |\n| DataInputStream | 允许应用程序以与机器无关方式从底层输入流中读取基本Java数据类型 |\n\n\n### Spring中的应用\n\n查看`org.springframework.cache.transaction`下的`TransactionAwareCacheDecorator `：\n\n![Cache](http://blog.designpattern.nanwulife.com/20180918Cache.png)\n\n该类实现了`Cache`接口，同时将`Cache`组合到类中成为了成员属性，所以可以大胆猜测`TransactionAwareCacheDecorator`是一个装饰类，不过这里并没有抽象装饰类，且`TransactionAwareCacheDecorator`没有子类，这里的装饰类关系并没有Java I/O中的装饰关系那么复杂。\n\n实际上，Spring cache是对缓存使用的抽象，通过它我们可以在不侵入业务代码的基础上让现有代码即刻支持缓存。通过Spring的`TransactionSynchronizationManager`将其缓存操作与Spring管理的事务同步，仅在成功事务的提交之后执行实际的缓存操作。\n\n### MyBatis中的应用\n\n查看包`org.apache.ibatis.cache`：\n\n![cache](http://blog.designpattern.nanwulife.com/20180918Cache.png)\n\n\n## 代理（Proxy）\n\n**代理模式为其它对象提供一种代理，以控制对这个对象的访问**，代理对象在客户端和目标对象之间起到中介的作用。\n\n我们有多种不同的方式来实现代理。如果按照代理创建的时期来进行分类的话， 可以分为两种：静态代理、动态代理。静态代理是由程序员创建或特定工具自动生成源代码，再对其编译，在运行之前，代理类.class文件就已经被创建了。动态代理是在程序运行时通过反射机制动态创建的。\n\n适用场景：\n- 保护目标对象\n- 增强目标对象\n\n### 优缺点\n\n优点：能将代理对象与真实被调用的目标对象分离；保护目标对象；增强目标对象。\n\n缺点：会造成系统设计中类的数目增加；在客户端和目标对象增加一个代理对象，会造成请求处理速度变慢；增加系统的复杂度。\n\n### 应用场景\n\n#### 静态代理\n\n使用静态代理可以做到在符合开闭原则的情况下对目标对象进行功能扩展，但我们得为每一个服务都创建代理类，工作量太大，不易管理。\n\n服务接口：\n\n```java\npublic interface BuyHouse {\n    void buyHosue();\n}\n```\n\n实现服务接口：\n\n```java\npublic class BuyHouseImpl implements BuyHouse {\n\n    @Override\n    public void buyHosue() {\n        System.out.println(\"我要买房\");\n    }\n}\n```\n\n代理类：\n\n```java\npublic class BuyHouseProxy implements BuyHouse {\n\n    private BuyHouse buyHouse;\n\n    public BuyHouseProxy(BuyHouse buyHouse) {\n        this.buyHouse = buyHouse;\n    }\n\n    @Override\n    public void buyHosue() {\n        beforeMethod();\n        buyHouse.buyHosue();\n        afterMethod();\n\n    }\n\n\tprivate void beforeMethod(){\n\t\tSystem.out.println(\"买房前准备\");\n\t}\n\t\n\tprivate void afterMethod(){\n\t\tSystem.out.println(\"买房后装修\");\n\t}\n}\n```\n\n客户端类：\n\n```java\npublic class Test{\n    public static void main(String[] args) {\n        BuyHouse buyHouse = new BuyHouseImpl();\n        buyHouse.buyHosue();\n        BuyHouseProxy buyHouseProxy = new BuyHouseProxy(buyHouse);\n        buyHouseProxy.buyHosue();\n    }\n}\n```\n\n#### 动态代理\n\n在动态代理中我们不再需要手动的创建代理类，我们只需要编写一个动态处理器就可以了。真正的代理对象由JDK再运行时为我们动态的来创建。\n\n动态处理器，实现了`InvocationHandler`接口：\n\n```java\npublic class DynamicProxyHandler implements InvocationHandler {\n\n    private Object object;\n\n    public DynamicProxyHandler(final Object object) {\n        this.object = object;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        beforeMethod();\n        Object result = method.invoke(object, args);\n        afterMethod();\n        return result;\n    }\n    \n\tprivate void beforeMethod(){\n\t\tSystem.out.println(\"买房前准备\");\n\t}\n\t\n\tprivate void afterMethod(){\n\t\tSystem.out.println(\"买房后装修\");\n\t}\n}\n```\n\n客户端类：\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        BuyHouse buyHouse = new BuyHouseImpl();\n        BuyHouse proxyBuyHouse = (BuyHouse) Proxy.newProxyInstance(buyHouse .getClass().getClassLoader(), buyHouse.getClass().getInterfaces(), new DynamicProxyHandler(buyHouse));\n        proxyBuyHouse.buyHosue();\n    }\n}\n```\n\n其中`Proxy.newProxyInstance()`方法接受三个参数：\n\n- `ClassLoader loader`：指定当前目标对象使用的类加载器，获取加载器的方法是固定的\n- `Class<?>[] interfaces`：指定目标对象实现的接口的类型，使用泛型方式确认类型\n- `InvocationHandler`：指定动态处理器，执行目标对象的方法时，会触发事件处理器的方法\n\n动态代理虽然不需要自己手动实现代理类和目标方法，但动态代理目标对象必须有接口，没有接口不能实现JDK版动态代理。\n\n#### CGLIB代理\n\nJDK实现动态代理需要实现类通过接口定义业务方法，对于没有接口的类，如何实现动态代理呢，这就需要CGLib了。CGLib采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。但因为采用的是继承，所以不能对final修饰的类进行代理。JDK动态代理与CGLib动态代理均是实现Spring AOP的基础。\n\nCGLIB创建的动态代理对象比JDK创建的动态代理对象的性能更高，但是CGLIB创建代理对象时所花费的时间却比JDK多得多。所以对于单例的对象，因为无需频繁创建对象，用CGLIB合适，反之使用JDK方式要更为合适一些。\n\n### Spring的代理选择\n\n- 当Bean有实现接口时，Spring就会用JDK的动态代理。\n- 当Bean没有实现接口时，Spring使用CGlib。\n- 可以强制使用CGLib。\n\n## 桥接（Bridge）\n\n**将抽象部分与它的具体实现部分分离，使它们都可以独立地变化。**\n\n通过组合的方式建立两个类之间联系，而不是继承。\n\n适用场景：\n- 抽象和具体实现之间增加更多的灵活性。\n- 一个类存在两个（或多个）独立变化的维度，且这两个（或多个）维度都需要独立进行扩展。\n- 不希望使用继承，或因为多层继承导致系统类的个数剧增。\n\n### 优缺点\n\n优点：分离抽象部分及其具体实现部分；提高了系统的可扩展性；符合开闭原则与合成复用原则。\n\n缺点：增加了系统的设计难度；需要正确地识别出系统中两个独立变化的维度。\n\n### 应用场景\n\n画图时可以画正方形、长方形、圆形三种形状，而每种形状又可以画白色、灰色、黑色三种颜色，因此我们可以很自然地想出以下的继承关系：\n\n![1](http://blog.designpattern.nanwulife.com/5IX6B62T02RYYGFSX.png)\n\n对于这种方案，假如我们要添加一个椭圆形状，我们又要增加三种颜色，也就是白椭圆、灰椭圆和黑椭圆。假如我们要添加一个绿色，我们就要增加绿正方形、绿椭圆和绿长方形。每次增加都会增加若干个类（如果增加颜色则会增加形状个数个类，若增加形状则会增加颜色个数个类），这会导致系统类的个数剧增，且不利于系统的扩展。\n\n对于这种有几个变化维度的场景，我们就可以使用桥接模式来减少系统中的类个数。这里提供两个父类一个是颜色、一个形状，颜色父类和形状父类两个类都包含了相应的子类，然后根据需要对颜色和形状进行组合：\n\n![2](http://blog.designpattern.nanwulife.com/3YEN8T28SWN5CC6.png)\n\n形状抽象类，将颜色接口设为其成员变量：\n\n```java\n\npublic abstract class Shape {\n    Color color;\n\n    public void setColor(Color color) {\n        this.color = color;\n    }\n    \n    public abstract void draw();\n}\n```\n\n具体形状类：\n\n```java\npublic class Circle extends Shape{\n    public void draw() {\n        color.bepaint(\"圆形\");\n    }\n}\n\npublic class Rectangle extends Shape{\n    public void draw() {\n        color.bepaint(\"长方形\");\n    }\n}\n\npublic class Square extends Shape{\n    public void draw() {\n        color.bepaint(\"正方形\");\n    }\n}\n```\n\n颜色接口：\n\n```java\npublic interface Color {\n    public void bepaint(String shape);\n}\n```\n\n具体颜色类：\n\n```java\npublic class White implements Color{\n    public void bepaint(String shape) {\n        System.out.println(\"白色的\" + shape);\n    }\n}\n\npublic class Gray implements Color{\n    public void bepaint(String shape) {\n        System.out.println(\"灰色的\" + shape);\n    }\n}\n\npublic class Black implements Color{\n    public void bepaint(String shape) {\n        System.out.println(\"黑色的\" + shape);\n    }\n}\n```\n\n客户端类：\n\n```java\npublic class Test{\n    public static void main(String[] args) {\n        //白色\n        Color white = new White();\n        //正方形\n        Shape square = new Square();\n        //白色的正方形\n        square.setColor(white);\n        square.draw();\n        \n        //长方形\n        Shape rectange = new Rectangle();\n        rectange.setColor(white);\n        rectange.draw();\n    }\n}\n```\n\n这里在实现时要注意，抽象类的方法要调用组合的实现类的方法（如类`Square `中的`color.bepaint(\"正方形\")`这行代码），这样才能体现出桥接的意义。\n\n### JDBC的应用\n\njdbc的类族设计是由sun公司设计了一套接口，再由各个数据库公司实现接口，我们在调用的过程中只需要使用接口去定义，然后在加载Driver的过程中底层代码会给我们选择好接口真正的实现类，以此来实现真正的数据库连接，此后所有的方法，包括获取statement等等，都是由接口声明调用，但是底层返回的是接口实现类。用这种桥接的模式，我们可以很轻松地在不同的数据库连接中进行转化，只需要修改Driver加载的类，如果把加载类的声明放入配置文件中，更是不需要重新去编译，可以很方便地在不同数据库间进行转化。\n\n## 享元（Flyweight）\n\n**享元模式提供了减少对象数量从而改善应用所需的对象结构的方式。**\n\n适用场景：\n- 常常应用于系统底层的开发，以便解决系统的性能问题。\n- 系统有大量相似对象、需要缓冲池的场景。\n\n### 优缺点\n\n优点：减少对象的创建，降低内存中对象的数量，降低系统的内存，提高效率；减少内存之外的其它资源占用（比如创建对象所需的时间）。\n\n缺点：关注内外部状态以及线程安全问题；使系统的逻辑复杂化。\n\n### 应用场景\n\n在年底的时候公司的老总、副总等许多高层经常需要将部门经理叫去办公室汇报工作，而汇报的往往都是同样的内容，部门经理没有必要每次汇报前都准备一份全新的相同报告，而可以直接使用之前的报告，在这里可以应用享元模式。\n\n雇员接口：\n\n```java\npublic interface Employee {\n    void report();\n}\n```\n\n部门经理类，在创建部门经理的时候需要指定部门`department`，这个部门就是外部状态，而职位`title`是固定设为`部门经理`的，因此就是内部状态：\n\n```java\npublic class Manager implements Employee {\n    public void report() {\n        System.out.println(reportContent);\n    }\n\n    private String title = \"部门经理\";\n    private String department;\n    private String reportContent;\n\n    public void setReportContent(String reportContent) {\n        this.reportContent = reportContent;\n    }\n\n    public Manager(String department) {\n        this.department = department;\n    }\n}\n```\n\n雇员工厂类，用于创建并管理享元对象。这里使用了一个`HashMap`作为缓存池，如果某个部门经理没有做过汇报，那么就创建这个部门经理，并且设置汇报内容，然后将其加入到缓存池中。如果以后再叫到了这个部门经理，就直接从缓存池中取出而不必再创建一遍了：\n\n```java\npublic class EmployeeFactory {\n    private static final Map<String, Employee> EMPLOYEE_MAP = new HashMap<String, Employee>();\n\n    public static Employee getManager(String department){\n        Manager manager = (Manager) EMPLOYEE_MAP.get(department);\n        if(manager == null){\n            manager = new Manager(department);\n            System.out.print(\"创建部门经理: \" + department);\n            String repportContent = department + \"部门汇报: 此次报告的主要内容是...\";\n            manager.setReportContent(repportContent);\n            System.out.println(\" 创建报告: \" + repportContent);\n            EMPLOYEE_MAP.put(department, manager);\n        }\n        return manager;\n    }\n}\n```\n\n客户端类，随机取出一个部门的部门经理做汇报：\n\n```java\npublic class Test {\n    private static final String departments[] = {\"RD\", \"QA\", \"PM\", \"BD\"};\n\n    public static void main(String[] args) {\n        for(int i = 0; i < 10; i++){\n            String department = departments[(int) (Math.random() * departments.length)];\n            Manager manager = (Manager) EmployeeFactory.getManager(department);\n            manager.report();\n        }\n    }\n}\n```\n\n输出：\n\n```\n创建部门经理: BD 创建报告: BD部门汇报: 此次报告的主要内容是...\nBD部门汇报: 此次报告的主要内容是...\nBD部门汇报: 此次报告的主要内容是...\n创建部门经理: QA 创建报告: QA部门汇报: 此次报告的主要内容是...\nQA部门汇报: 此次报告的主要内容是...\nQA部门汇报: 此次报告的主要内容是...\n创建部门经理: RD 创建报告: RD部门汇报: 此次报告的主要内容是...\nRD部门汇报: 此次报告的主要内容是...\nBD部门汇报: 此次报告的主要内容是...\nRD部门汇报: 此次报告的主要内容是...\nRD部门汇报: 此次报告的主要内容是...\n创建部门经理: PM 创建报告: PM部门汇报: 此次报告的主要内容是...\nPM部门汇报: 此次报告的主要内容是...\nQA部门汇报: 此次报告的主要内容是...\n```\n\n可以发现每个部门经理只创建过一次报告，之后都使用的同一份报告做汇报。\n\n### Integer中的应用\n\n我们查看jdk中`Integer`类下的`valueOf`方法：\n\n```java\n\t//...\n\n    public static Integer valueOf(int i) {\n        if (i >= IntegerCache.low && i <= IntegerCache.high)\n            return IntegerCache.cache[i + (-IntegerCache.low)];\n        return new Integer(i);\n    }\n\n    private static class IntegerCache {\n        static final int low = -128;\n        static final int high;\n        static final Integer cache[];\n\n        static {\n            // high value may be configured by property\n            int h = 127;\n            String integerCacheHighPropValue =\n                sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\");\n            if (integerCacheHighPropValue != null) {\n                try {\n                    int i = parseInt(integerCacheHighPropValue);\n                    i = Math.max(i, 127);\n                    // Maximum array size is Integer.MAX_VALUE\n                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n                } catch( NumberFormatException nfe) {\n                    // If the property cannot be parsed into an int, ignore it.\n                }\n            }\n            high = h;\n\n            cache = new Integer[(high - low) + 1];\n            int j = low;\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n\n            // range [-128, 127] must be interned (JLS7 5.1.7)\n            assert IntegerCache.high >= 127;\n        }\n\n        private IntegerCache() {}\n    }\n\t\n\t//...\n```\n\n可以看出，在使用`valueOf`方法时，如果传入的参数在缓存范围内（这个范围在`IntegerCache`中设置为-128~127），那么直接从缓存中读取并返回，否则就创建一个新的对象返回。\n\n我们可以通过一个实验来加以验证：\n```java\n    public static void main(String[] args) {\n        Integer t1 = new Integer(100);\n        Integer t2 = new Integer(100);\n        System.out.println(t1 == t2);\n\n        Integer t3 = 100;\n        Integer t4 = 100;\n        System.out.println(t3 == t4);\n\n        Integer t5 = 128;\n        Integer t6 = 128;\n        System.out.println(t5 == t6);\n    }\n```\n\n输出：\n\n```\nfalse\ntrue\nfalse\n```\n\n使用new创建的Integer对象用`==`比较的是对象地址，因为对象不同所以地址也不相同，故输出`false`；而像`Integer t = xxx` 这种形式的定义实际会变成`Integer t = Integer.valueOf(xxx)`，先判断是否能直接从缓存中取出，100是在缓存范围内的也加入过缓存，因此可以直接取出；而128超出了缓存范围，所以在`valueOf`方法中会创建一个新的对象返回。\n\n# 行为型\n\n## 模板方法（Template Method）\n\n**定义了一个算法的骨架，并允许子类为一个或多个步骤提供实现**。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些步骤。\n\n适用场景：\n- 一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。\n- 各子类中公共的行为被提取出来并集中到一个公共父类中，从而避免代码重复。\n\n### 优缺点\n\n优点：提高复用性；提高扩展性；符合开闭原则。\n\n缺点：类数目增加，增加了系统实现的复杂度；继承关系自身缺点，即如果父类添加新的抽象方法，所有子类都要改一遍。\n\n### 应用场景\n\n制作一节网课的步骤可以简化为4个步骤：制作PPT；录制视频；编写笔记；提供课程资料。\n\n所有课程都需要制作PPT、录制视频，但不是每个课程都需要编写笔记，而提供的课程资料在每个课程都不尽不同（有些课程需要提供源代码，有些需要提供图片文件等）。\n\n我们可以在抽象父类中确定整个流程的模板，并实现固定不变的步骤，而把不固定的步骤留给子类实现。除此之外，对于类似编写笔记这个不一定有的步骤，我们可以通过一个钩子方法，让子类来决定流程中其执行与否。\n\n抽象父类，由于制作PPT、录制视频对于每节课都是必须且相同的，因此声明为`final`使得子类无法对其修改，而编写笔记虽然可有可无，但是具体的操作对于所有课程也是相同的因此不需要修改，所以也声明为`final`，而提供课程资料(`packageCourse`方法)这一步骤则交由具体子类实现：\n\n```java\npublic abstract class ACourse {\n    protected final void makeCourse(){\n        this.makePPT();\n        this.makeVideo();\n        if(needWriteArticle()){\n            this.writeArticle();\n        }\n        this.packageCourse();\n    }\n\n    final void makePPT(){\n        System.out.println(\"制作PPT\");\n    }\n    final void makeVideo(){\n        System.out.println(\"制作视频\");\n    }\n    final void writeArticle(){\n        System.out.println(\"编写笔记\");\n    }\n    //钩子方法\n    protected boolean needWriteArticle(){\n        return false;\n    }\n    abstract void packageCourse();\n}\n```\n\n前端课程：\n\n```java\npublic class FECourse extends ACourse {\n    @Override\n    void packageCourse() {\n        System.out.println(\"提供课程的前端代码\");\n        System.out.println(\"提供课程的图片等多媒体素材\");\n    }\n}\n```\n\n设计模式课程，覆盖了钩子方法，让其可以编写笔记：\n\n```java\npublic class DesignPatternCourse extends ACourse {\n    @Override\n    void packageCourse() {\n        System.out.println(\"提供课程Java源码\");\n    }\n\n    @Override\n    protected boolean needWriteArticle() {\n        return true;\n    }\n}\n```\n\n客户端类：\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        System.out.println(\"后端设计模式课程start---\");\n        ACourse designPatternCourse = new DesignPatternCourse();\n        designPatternCourse.makeCourse();\n        System.out.println(\"后端设计模式课程end---\");\n\n        System.out.println(\"前端设计模式课程start---\");\n        ACourse feCourse = new FECourse();\n        feCourse.makeCourse();\n        System.out.println(\"前端设计模式课程end---\");\n    }\n}\n```\n\n![templ](http://blog.default.nanwulife.com/Package%20templatemethod.png)\n\n### JDK中的应用\n\n我们查看`java.util`下的`AbstractList`抽象类：\n\n```java\npublic abstract class AbstractList<E> extends AbstractCollection<E> implements List<E> {\n\t//...\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        rangeCheckForAdd(index);\n        boolean modified = false;\n        for (E e : c) {\n            add(index++, e);\n            modified = true;\n        }\n        return modified;\n    }\n\n\t//...\n```\n\n这里面的`addAll`方法就相当于一个模板方法，它定义了这个算法的整体流程，而其具体的步骤如`rangeCheckForAdd`、`add`则交由子类如`ArrayList`等来完成。\n\n### Servlet中的应用\n\nServlet是用Java编写的服务器端程序，主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。\n\n每一个Servlet都必须要实现`Servlet`接口，`GenericServlet`是个通用的、不特定于任何协议的Servlet，它实现了`Servlet`接口，而`HttpServlet`继承于`GenericServlet`，实现了`Servlet`接口，为`Servlet`接口提供了处理HTTP协议的实现，所以我们定义的`Servlet`只需要继承`HttpServlet`即可。\n\n![Servlet](http://blog.default.nanwulife.com/20181010_214703.png)\n\n在`HttpServlet`的`service`方法中，首先获得到请求的方法名，然后根据方法名调用对应的`doXXX`方法，比如说请求方法为GET，那么就去调用`doGet`方法；请求方法为POST，那么就去调用`doPost`方法。\n\n`HttpServlet`相当于定义了一套处理HTTP请求的模板。`service`方法为模板方法，定义了处理HTTP请求的基本流程，`doXXX`等方法为基本步骤，根据请求方法做相应的处理，编写自定义的`Servlet`时可以重写这些方法。\n\n```java\npublic abstract class HttpServlet extends GenericServlet {\n\t//,,,\n\n    protected void service(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException, IOException {\n\n        String method = req.getMethod();\n\n        if (method.equals(METHOD_GET)) {\n            long lastModified = getLastModified(req);\n            if (lastModified == -1) {\n                // servlet doesn't support if-modified-since, no reason\n                // to go through further expensive logic\n                doGet(req, resp);\n            } else {\n                long ifModifiedSince;\n                try {\n                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n                } catch (IllegalArgumentException iae) {\n                    // Invalid date header - proceed as if none was set\n                    ifModifiedSince = -1;\n                }\n                if (ifModifiedSince < (lastModified / 1000 * 1000)) {\n                    // If the servlet mod time is later, call doGet()\n                    // Round down to the nearest second for a proper compare\n                    // A ifModifiedSince of -1 will always be less\n                    maybeSetLastModified(resp, lastModified);\n                    doGet(req, resp);\n                } else {\n                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            }\n\n        } else if (method.equals(METHOD_HEAD)) {\n            long lastModified = getLastModified(req);\n            maybeSetLastModified(resp, lastModified);\n            doHead(req, resp);\n\n        } else if (method.equals(METHOD_POST)) {\n            doPost(req, resp);\n\n        } else if (method.equals(METHOD_PUT)) {\n            doPut(req, resp);\n\n        } else if (method.equals(METHOD_DELETE)) {\n            doDelete(req, resp);\n\n        } else if (method.equals(METHOD_OPTIONS)) {\n            doOptions(req,resp);\n\n        } else if (method.equals(METHOD_TRACE)) {\n            doTrace(req,resp);\n\n        } else {\n            //\n            // Note that this means NO servlet supports whatever\n            // method was requested, anywhere on this server.\n            //\n\n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[1];\n            errArgs[0] = method;\n            errMsg = MessageFormat.format(errMsg, errArgs);\n\n            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n        }\n    }\n\n\t//...\n}\n```\n\n## 策略模式（Strategy）\n\n**定义了算法家族，分别封装起来，让它们之间可以互相替代，此模式让算法的辩护权啊不会影响到使用算法的用户。**\n\n适用场景：\n- 系统有很多类，而他们的区别仅仅在于他们的行为不同。\n- 一个系统需要动态地在几种算法中选择一种。\n\n### 优缺点\n\n- 优点：符合开闭原则；避免使用多重条件转移语句；提高算法的保密性和安全性。\n- 缺点：客户端必须知道所有的策略类，并自行决定使用哪一个策略类。\n\n### 应用场景\n\n在促销期间商家有不同的促销策略：返现、立减和满减。\n\n策略抽象类：\n\n```java\npublic interface PromotionStrategy {\n    void doPromotion();\n}\n```\n\n返现策略：\n\n```java\npublic class FanXianPromotionStrategy implements PromotionStrategy {\n    public void doPromotion() {\n        System.out.println(\"返现促销，返回的金额存放到用户余额中\");\n    }\n}\n```\n\n立减策略：\n\n```java\npublic class LiJianPromotionStrategy implements PromotionStrategy{\n    public void doPromotion() {\n        System.out.println(\"立减促销，课程的价格直接减去配置的价格\");\n    }\n}\n```\n\n满减策略：\n\n```java\npublic class ManJianPromotionStratehy implements PromotionStrategy {\n    public void doPromotion() {\n        System.out.println(\"满减促销，满200-20元\");\n    }\n}\n```\n\n促销活动，将促销策略作为成员变量：\n\n```java\npublic class PromotionActivity {\n    private PromotionStrategy promotionStrategy;\n\n    public PromotionActivity(PromotionStrategy promotionStrategy) {\n        this.promotionStrategy = promotionStrategy;\n    }\n\n    public void executePromotionStrategy(){\n        promotionStrategy.doPromotion();\n    }\n}\n```\n\n客户端类：\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        PromotionActivity promotionActivity618 = new PromotionActivity(new LiJianPromotionStrategy());\n        PromotionActivity promotionActivity1111 = new PromotionActivity(new FanXianPromotionStrategy());\n        promotionActivity618.executePromotionStrategy();\n        promotionActivity1111.executePromotionStrategy();\n    }\n}\n```\n\n每当要新增一个促销策略的时候，直接增加一个策略实现即可，十分方便。\n\n## 观察者模式（Observer）\n\n定义了对象之间的一对多依赖，让多个观察者对象同时监听某一个主题对象，当主题对象发生变化时，它的所有依赖者（观察者）都会收到通知并更新。\n\n### 优缺点\n\n- 优点：观察者和被观察者之间建立一个抽象的耦合；支持广播通信。\n- 缺点：观察者之间有过多的细节依赖、提高时间消耗及程序复杂度。\n\n### 应用场景\n\n每个课程有一名老师，而课程的学生可能提出许多问题，因此创建三个类`Course`、`Question`、`Teacher`。其中课程应该作为被观察者，而老师由于要回答学生们的问题，因此作为观察者时刻观察着。\n\n课程类`Course`：\n```java\npublic class Course extends Observable {\n    private String courseName;\n\n    public Course(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public String getCourseName() {\n        return courseName;\n    }\n\n    public void setCourseName(String courseName) {\n        this.courseName = courseName;\n    }\n\n    public void produceQuestion(Course course, Question question){\n        System.out.println(question.getUserName() + \"在\" + course.getCourseName() + \"提交了一个问题\");\n        setChanged();\n        notifyObservers(question);\n    }\n}\n```\n\n问题类`Question`：\n```java\npublic class Question {\n    private String userName;\n    private String questionContent;\n\n    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    public String getQuestionContent() {\n        return questionContent;\n    }\n\n    public void setQuestionContent(String questionContent) {\n        this.questionContent = questionContent;\n    }\n}\n```\n\n教师类`Teacher`：\n```java\npublic class Teacher implements Observer {\n    private String teacherName;\n\n    public Teacher(String teacherName) {\n        this.teacherName = teacherName;\n    }\n\n    public void update(Observable o, Object arg) {\n        Course course = (Course)o;\n        Question question = (Question) arg;\n        System.out.println(teacherName + \"老师的\" + course.getCourseName() + \"课程接收到一个\" + question.getUserName() + \"提交的问答：\" + question.getQuestionContent());\n    }\n}\n```\n\n可以看出，以上代码通过继承`Observable`类和实现`Observer`接口实现了观察者模式。\n\n`Observable`中有两个方法对`Observer`特别重要，一个是`setChanged()`方法用来设置一个内部标志位表示数据发生了变化，一个是`notifyObservers()`方法会去调用一个列表中所有的`Observer`的`update()`方法，通知它们数据发生了变化。\n\n客户端类`Test`：\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Course course = new Course(\"Java设计模式课程\");\n        Teacher teacher1 = new Teacher(\"Alpha\");\n        Teacher teacher2 = new Teacher(\"Belta\");\n\n        course.addObserver(teacher1);\n        course.addObserver(teacher2);\n        Question question = new Question();\n        question.setUserName(\"cenjie\");\n        question.setQuestionContent(\"Java的主函数如何编写\");\n\n        course.produceQuestion(course, question);\n    }\n}\n```\n\n`Observable`通过`addObserver()`方法把任意多个`Observer`添加到这个列表中。\n\n运行结果：\n\n```\ncenjie在Java设计模式课程提交了一个问题\nBelta老师的Java设计模式课程课程接收到一个cenjie提交的问答：Java的主函数如何编写\nAlpha老师的Java设计模式课程课程接收到一个cenjie提交的问答：Java的主函数如何编写\n```\n\n可以看出，当被观察者`course`对象发生变化时，`teacher1`和`teacher2`这两个观察者都得到了通知。\n\n## 责任链模式（Chain Of Responsibility）\n\n使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链发送该请求，直到有一个对象处理它为止。\n\n### 应用场景\n\n抽象处理器，组合有一个同类型的成员变量：\n\n```java\npublic abstract class Handler {\n\n    protected Handler successor;\n\n    public Handler(Handler successor) {\n        this.successor = successor;\n    }\n\n    protected abstract void handleRequest(Request request);\n}\n```\n\n具体处理器一：\n```java\npublic class ConcreteHandler1 extends Handler {\n\n    public ConcreteHandler1(Handler successor) {\n        super(successor);\n    }\n\n    @Override\n    protected void handleRequest(Request request) {\n        if (request.getType() == RequestType.TYPE1) {\n            System.out.println(request.getName() + \" is handle by ConcreteHandler1\");\n            return;\n        }\n        if (successor != null) {\n            successor.handleRequest(request);\n        }\n    }\n}\n```\n\n具体处理器二：\n```java\npublic class ConcreteHandler2 extends Handler {\n\n    public ConcreteHandler2(Handler successor) {\n        super(successor);\n    }\n\n    @Override\n    protected void handleRequest(Request request) {\n        if (request.getType() == RequestType.TYPE2) {\n            System.out.println(request.getName() + \" is handle by ConcreteHandler2\");\n            return;\n        }\n        if (successor != null) {\n            successor.handleRequest(request);\n        }\n    }\n}\n```\n\n要处理的请求：\n\n```java\npublic class Request {\n\n    private RequestType type;\n    private String name;\n\n    public Request(RequestType type, String name) {\n        this.type = type;\n        this.name = name;\n    }\n\n    public RequestType getType() {\n        return type;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\npublic enum RequestType {\n    TYPE1, TYPE2\n}\n```\n\n客户端：\n```java\npublic class Client {\n\n    public static void main(String[] args) {\n\n        Handler handler1 = new ConcreteHandler1(null);\n        Handler handler2 = new ConcreteHandler2(handler1);\n\n        Request request1 = new Request(RequestType.TYPE1, \"request1\");\n        handler2.handleRequest(request1);\n\n        Request request2 = new Request(RequestType.TYPE2, \"request2\");\n        handler2.handleRequest(request2);\n    }\n}\n```\n\n可以看出，`handler2`中包含了一个`handler1`，当发送一个`request`给`handler2`时，`handler2`可以将`request`继续传递给`handler1`，由`handler1`完成处理并结束。\n\n## 备忘录模式（Memento）\n\n**保存一个对象的某个状态，以便在适当的时候恢复对象。** 为用户提供一种可恢复机制，并对存档信息进行封装，但如果使用不当的话会造成资源的浪费。\n\n### 应用场景\n\n可以通过备忘录模式对用户的文章进行修改保存与回滚。\n\n文章类：\n```java\npublic class Article {\n    private String title;\n    private String content;\n    private String imgs;\n\n    public Article(String title, String content, String imgs) {\n        this.title = title;\n        this.content = content;\n        this.imgs = imgs;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public String getImgs() {\n        return imgs;\n    }\n\n    public void setImgs(String imgs) {\n        this.imgs = imgs;\n    }\n\n    public ArticleMemento saveToMemento() {\n        ArticleMemento articleMemento = new ArticleMemento(this.title,this.content,this.imgs);\n        return articleMemento;\n    }\n\n    public void undoFromMemento(ArticleMemento articleMemento) {\n\n        this.title = articleMemento.getTitle();\n        this.content = articleMemento.getContent();\n        this.imgs = articleMemento.getImgs();\n    }\n\n    @Override\n    public String toString() {\n        return \"Article{\" +\n                \"title='\" + title + '\\'' +\n                \", content='\" + content + '\\'' +\n                \", imgs='\" + imgs + '\\'' +\n                '}';\n    }\n}\n```\n\n文章备忘录，属性与文章类一致，当没有`setter`方法，防止他人的修改：\n```java\npublic class ArticleMemento {\n    private String title;\n    private String content;\n    private String imgs;\n\n    public ArticleMemento(String title, String content, String imgs) {\n        this.title = title;\n        this.content = content;\n        this.imgs = imgs;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public String getImgs() {\n        return imgs;\n    }\n\n    @Override\n    public String toString() {\n        return \"ArticleMemento{\" +\n                \"title='\" + title + '\\'' +\n                \", content='\" + content + '\\'' +\n                \", imgs='\" + imgs + '\\'' +\n                '}';\n    }\n}\n```\n\n文章备忘录管理器，聚合了之前保存的管理器，可以随时调取上一个备忘录，也可以加入一个新的备忘录：\n```java\npublic class ArticleMementoManager {\n    private final Stack<ArticleMemento> ARTICLE_MEMENTO_STACK = new Stack<ArticleMemento>();\n\n    public ArticleMemento getMemento()\n    {\n        ArticleMemento articleMemento= ARTICLE_MEMENTO_STACK.pop();\n        return articleMemento;\n    }\n\n    public void addMemento(ArticleMemento articleMemento)\n    {\n        ARTICLE_MEMENTO_STACK.push(articleMemento);\n    }\n}\n```\n\n客户端：\n```java\npublic class Test {\n    public static void main(String[] args) {\n        ArticleMementoManager articleMementoManager = new ArticleMementoManager();\n\n        Article article= new Article(\"如影随行的设计模式A\",\"手记内容A\",\"手记图片A\");\n\n        ArticleMemento articleMemento = article.saveToMemento();\n\n        articleMementoManager.addMemento(articleMemento);\n        System.out.println(\"标题:\"+article.getTitle()+\" 内容:\"+article.getContent()+\" 图片:\"+article.getImgs()+\" 暂存成功\");\n\n        System.out.println(\"手记完整信息:\"+article);\n\n        System.out.println(\"修改手记start\");\n\n        article.setTitle(\"如影随行的设计模式B\");\n        article.setContent(\"手记内容B\");\n        article.setImgs(\"手记图片B\");\n\n        System.out.println(\"修改手记end\");\n\n        System.out.println(\"手记完整信息:\"+article);\n\n        articleMemento = article.saveToMemento();\n        articleMementoManager.addMemento(articleMemento);\n\n        article.setTitle(\"如影随行的设计模式C\");\n        article.setContent(\"手记内容C\");\n        article.setImgs(\"手记图片C\");\n\n        System.out.println(\"暂存回退start\");\n\n        System.out.println(\"回退出栈1次\");\n        articleMemento = articleMementoManager.getMemento();\n        article.undoFromMemento(articleMemento);\n\n        System.out.println(\"回退出栈2次\");\n        articleMemento = articleMementoManager.getMemento();\n        article.undoFromMemento(articleMemento);\n\n        System.out.println(\"暂存回退end\");\n        System.out.println(\"手记完整信息:\"+article);\n\n    }\n}\n```\n\n## 中介者模式（Mediator）\n\n用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显示的相互引用，从而降低耦合。\n\n### 应用场景\n\n用户（同事类）：\n```java\npublic class User {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public User(String name) {\n        this.name = name;\n    }\n\n    public void sendMessage(String message) {\n        StudyGroup.showMessage(this, message);\n    }\n}\n```\n\n学习小组：\n```java\npublic class StudyGroup {\n\n    public static void showMessage(User user, String message){\n        System.out.println(new Date().toString() + \" [\" + user.getName() + \"] : \" + message);\n    }\n}\n```\n\n客户端：\n```java\npublic class Test {\n    public static void main(String[] args) {\n        User geely = new User(\"Geely\");\n        User tom= new User(\"Tom\");\n\n        geely.sendMessage(\" Hey! Tom! Let's learn Design Pattern\");\n        tom.sendMessage(\"OK! Geely\");\n    }\n}\n\n```\n\n\n# 参考资料\n\n- 弗里曼. Head First 设计模式 [M]. 中国电力出版社, 2007.\n- 慕课网java设计模式精讲 Debug 方式+内存分析\n- [SLF4J和Logback日志框架详解](https://cloud.tencent.com/developer/article/1337162)\n- [设计模式---代理模式](https://www.cnblogs.com/daniels/p/8242592.html)\n- [设计模式读书笔记--桥接模式](https://www.cnblogs.com/chenssy/p/3317866.html)\n- [JDBC源码分析&桥接模式](https://blog.csdn.net/qq_28241149/article/details/78548178)\n- [模板方法模式及典型应用](https://blog.csdn.net/wwwdc1012/article/details/83005717)","tags":["设计模式"],"categories":["设计模式"]},{"title":"《剑指Offer》题解与笔记","url":"/2019/01/29/《剑指Offer》题解与笔记/","content":"## 3.1 找出数组中重复的数字\n\n### 题目描述\n\n在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。\n\n<!--more-->\n\n### 题解\n\n对数组进行移位，判断i下标的数字等于i，如果不等则对其进行交换，eg:\n\n{**1**，**3**，4，6，5，2，5} -->  {3，1，4，6，5，2，5}  //下标为0的数字为1，因此将下标为1的数字即3与1换位，使得1到了其应在的地方\n\n{**3**，1，4，**6**，5，2，5}  --> {6，1，4，3，5，2，5}  //此时下标为0的数字为3，依然不等于其下标，因此找到下标为3的数字6与其交换，使3到了其应在的地方\n\n{**6**，1，4，3，5，2，**5**} --> {5，1，4，3，5，2，6}     //同理\n\n{**5**，1，4，3，5，**2**，6} --> {2，1，4，3，5，5，6} \n\n{**2**，1，**4**，3，5，5，6} --> {4，1，2，3，5，5，6}\n\n{**4**，1，2，3，**5**，5，6} --> {5，1，2，3，4，5，6}\n\n{**5**，1，2，3，4，**5**，6}     //此时，要交换的两个数字相等，则证明该数字重复\n\n可以看出，其时间复杂度为O(n)，且不需要额外分配空间，空间复杂度为O(1)\n\n```java\npublic class Solution {\n    // Parameters:\n    //    numbers:     an array of integers\n    //    length:      the length of array numbers\n    //    duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation;\n    //                  Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++\n    //    这里要特别注意~返回任意重复的一个，赋值duplication[0]\n    // Return value:       true if the input is valid, and there are some duplications in the array number\n    //                     otherwise false\n    public boolean duplicate(int numbers[],int length,int [] duplication) {\n        if(numbers == null){\n        return false;\n        }\n        for(int i = 0; i < length; i++){\n           while(numbers[i] != i){\n               if(numbers[i] == numbers[numbers[i]]){\n                   duplication[0] = numbers[i];\n                   return true;\n               }\n               swap(numbers, numbers[i], i);\n           }\n        }\n        return false;\n    }\n    \n    private void swap(int[] numbers, int a, int b){\n        int temp = numbers[a];\n        numbers[a] = numbers[b];\n        numbers[b] = temp;\n    }\n}\n```\n\n## 3.2 不修改数组找出重复的数字\n\n### 题目描述\n\n在一个长度为n+1的数组里的所有数字都在1~n的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。\n\n### 题解\n\n此道题与上题类似，但有不同的几点：\n\n1、题目要求不能修改输入的数组，因此可能要考虑创建辅助数组，这里的一个思路是将原数组的数字m移动到辅助数组中下标为m的位置，因此当移动时检测到辅助数组该下标已经有数字时，表示此数字重复了。这里的的空间复杂度为O(n)，时间复杂度为O(n)。\n\n2、题目中提到“在一个长度为n+1的数组里的所有数字都在1-n的范围内”，例如，若有个包含5个数的数组，但里面的数字只有1、2、3、4，那么必然有一个是重复的。这时候另一个思路则是在1、2、3、4、5中找出中间数3，以此将数组分割成两块，左半块是1-3（注意不是1-2），右半块是4-5，之后遍历整个数组，若数字在左半边的范围内，则将计数器加一。结束遍历时，若计数器的值大于这边块包含的个数，就说明重复的数字在这边块里，否则其就在右半块。紧接着把范围缩小到其中一边，继续重复以上操作。此操作类似二分查找法，需要的时间为O(nlogn)，空间复杂度为o(1)，相当于以时间换空间。下面给出的代码将根据此种思路。\n\n```java\npublic class Solution {\n    // Parameters:\n    //    numbers:     an array of integers\n    //    length:      the length of array numbers\n    //    duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation;\n    //                  Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++\n    //    这里要特别注意~返回任意重复的一个，赋值duplication[0]\n    // Return value:       true if the input is valid, and there are some duplications in the array number\n    //                     otherwise false\n        public boolean duplicate(int numbers[],int length,int [] duplication) {\n        if(numbers == null){\n            return false;\n        }\n\n        int start = 1;\n        int end = length - 1;\n        while(end >= start){\n            int middle = (end - start) / 2 + start;\n            int count = countRange(numbers, length, start, middle);\n            if(end == start){\n                if(count > 1){\n                    duplication[0] = start;\n                    return true;\n                }\n                break;\n            }\n            if(count > middle - start + 1)\n                end = middle;\n            else\n                start = middle + 1;\n        }\n        return false;\n    }\n    \n    public int countRange(int numbers[],int length, int start, int end){\n        if(numbers == null){\n            return 0;\n        }\n\n        int count = 0;\n        for(int i = 0; i < length; i++){\n            if(numbers[i] >= start && numbers[i] <= end){\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```\n\n## 4.二维数组中的查找\n\n### 题目描述\n\n在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n### 题解\n\n```java\npublic class Solution {\n    public boolean Find(int target, int [][] array) {\n        int len = array.length - 1;\n        int i = 0;\n        while(i < array[0].length && len >= 0){\n            if(array[len][i] > target){\n                len--;\n            } else if(array[len][i] < target){\n                i++;\n            } else{\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\n## 5.替换空格\n\n### 题目描述\n\n请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。\n\n### 题解\n\n先遍历一次字符串，得到空格的总数，然后将字符串的长度设置为字符串的原长度加上空格数的两倍。将原始字符串末尾的值不断复制给新新字符串的末尾，每次遇到空格的时候在新字符串前插入%20。此算法中所有字符都只复制了一次，因此时间复杂度为O(n)。\n\n在合并两个数组时，如果从前往后复制每个数字（或字符）则需要重复移动数字（或字符）多次，那么我们可以考虑从后往前复制，这样就能减少移动的次数，从而提高效率。\n\n```java\npublic class Solution {\n    public String replaceSpace(StringBuffer str) {\n        if(str == null){\n            return null;\n        }\n        \n        int spaceNum = 0;\n        for(int i = 0; i < str.length(); i++){\n            if(str.charAt(i) == ' '){\n                spaceNum++;\n            }\n        }\n        int oldIndex = str.length() - 1;\n        int newLength = str.length() + spaceNum * 2;\n        str.setLength(newLength);\n        int newIndex = newLength - 1;\n        for(; oldIndex >= 0 && oldIndex <= newIndex; oldIndex--){\n            if(str.charAt(oldIndex) == ' ') {\n                str.setCharAt(newIndex--, '0');\n                str.setCharAt(newIndex--, '2');\n                str.setCharAt(newIndex--, '%');\n            }else{\n                str.setCharAt(newIndex--, str.charAt(oldIndex));\n            }\n        }\n        return str.toString();\n    }\n}\n```\n\n## 6.从尾到头打印链表\n\n### 题目描述\n\n输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。\n\n```java\n/**\n*    public class ListNode {\n*        int val;\n*        ListNode next = null;\n*\n*        ListNode(int val) {\n*            this.val = val;\n*        }\n*    }\n*\n*/\n```\n\n### 题解\n\n#### 使用递归\n\n每访问到一个节点的时候，先递归输出它后面的节点，再输出该节点自身。\n\n```java\npublic class Solution {\n    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {\n        ArrayList<Integer> arrayList = new ArrayList<>();\n        if(listNode != null){\n            arrayList.addAll(printListFromTailToHead(listNode.nextNode));\n            arrayList.add(listNode.val);\n        }\n        return arrayList;\n    }\n}\n```\n\n#### 使用栈\n\n利用栈“先进后出”的特性，实现最先入栈的节点值最后输出。\n\n```java\n    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {\n        Stack stack = new Stack();\n        while(listNode != null){\n            stack.push(listNode.val);\n            listNode = listNode.nextNode;\n        }\n        ArrayList<Integer> arrayList = new ArrayList<>();\n        while(!stack.isEmpty()){\n            arrayList.add((Integer) stack.pop());\n        }\n        return arrayList;\n    }\n```\n\n## 7.重建二叉树\n\n### 题目描述\n\n输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。\n\n```\n/**\n * Definition for binary tree\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n```\n\n### 题解\n\n对于前序遍历，第一个数字即为根节点的值；对于中序遍历，根据根节点值将序列划分为左右子树。接下来使用递归分别继续进行如上操作，便可不断构建出左右子树。\n\n```java\npublic class Solution {\n    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {\n        if(pre == null || in == null){\n            return null;\n        }\n        return reConstructBinaryTree(pre, 0, pre.length-1, in, 0, in.length-1);\n    }\n    \n    private TreeNode reConstructBinaryTree(int[] pre, int startPre, int endPre, int[] in, int startIn, int endIn){\n\n        if(startPre > endPre || startIn > endIn)\n            return null;\n        \n        TreeNode root = new TreeNode(pre[startPre]);\n\n        for(int i = startIn; i <= endIn; i++){\n            if(in[i] == pre[startPre]){\n                root.left = reConstructBinaryTree(pre, startPre+1, i-startIn+startPre, in, startIn, i-1);\n                root.right = reConstructBinaryTree(pre, startPre+i-startIn+1, endPre, in, i+1, endIn);\n                break;\n            }\n        }\n        return root;\n    }\n}\n```\n\n## 8.二叉树的下一个节点\n\n### 题目描述\n\n给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。\n\n```\n/*\npublic class TreeLinkNode {\n    int val;\n    TreeLinkNode left = null;\n    TreeLinkNode right = null;\n    TreeLinkNode next = null;\n\n    TreeLinkNode(int val) {\n        this.val = val;\n    }\n}\n*/\n```\n\n### 题解\n\n此题可分为两种情况：一种是一个节点有右子树，那么它的下一个节点就是它的右子树中的最左子节点；另一种是没有右子树，那么就判断它是否为父节点的左节点，如果是，则父结点为其下一个节点，如果不是，则向上遍历其父结点，找到为其祖先节点左节点的父结点，这个祖先节点就是它的下一个节点。\n\n```java\npublic class Solution {\n    public TreeLinkNode GetNext(TreeLinkNode pNode)\n    {\n        //1、一个节点有右子树，那么找到右子树的最左子节点\n        if (pNode.right != null) {\n            TreeLinkNode node = pNode.right;\n            while (node.left != null) {\n                node = node.left;\n            }\n            return node;\n        }\n\n        //2、一个节点没有右子树\n        while (pNode.next != null) {\n            if(pNode.next.left == pNode) return pNode.next;\n            pNode = pNode.next;\n        }\n        return null;\n    }\n}\n```\n\n\n## 9.用两个栈实现队列 \n\n### 题目描述\n\n用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。\n\n### 题解\n\n此题思路较为简单，主要就是利用栈“先入后出”和队列“先入先出”的特性，每次push的时候将值存到栈1中，pop的时候先将栈1的值放入栈2从而实现逆序，然后再对栈2进行pop操作，就实现了队列的“先进先出”。\n\n```java\npublic class Solution {\n    Stack<Integer> stack1 = new Stack<Integer>();\n    Stack<Integer> stack2 = new Stack<Integer>();\n    \n    public void push(int node) {\n        stack1.push(node);\n    }\n    \n    public int pop() {\n        if (stack2.size() <= 0) {\n            while (stack1.size() > 0) {\n                stack2.push(stack1.pop());\n            }\n        }\n        return stack2.pop();\n    }\n}\n```\n\n## 10.1 斐波那契数列\n\n### 题目描述\n\n大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。\n\n### 题解\n\n传统的做法是使用递归：return Fibonacci(n-1)+Fibonacci(n-2)。但是这种做法画出树形图就能看出有许多重复的节点，而且容易导致内存溢出，因而不建议使用。\n\n#### 使用循环\n\n使用循环是一个较好的做法，不仅提高了时间效率，也解决了内存溢出的问题。实际上，任何递归都可以用循环来实现。\n\n```java\npublic class Solution {\n    public int Fibonacci(int n) {\n        if(n == 0)\n            return 0;\n        if(n == 1)\n            return 1;\n        int num = 0;\n        int num1 = 0;\n        int num2 = 1;\n        for(int i = 2; i <= n; i++){\n            num = num1 + num2;\n            num1 = num2;\n            num2 = num;\n        }\n        return num;\n    }\n}\n```\n\n#### 使用尾递归\n\n尾递归是递归的一种特殊形式，本质上和递归没有什么区别，但优化后可以重复利用同一个栈帧，大幅提高效率，具体介绍在我的博客中有介绍：。由于java没有对尾递归进行优化，所以在此题中用java解题时依旧无法解决内存溢出的问题，主要提供一种答题思路。\n\n```\npublic class Solution {\n    public int Fibonacci(int n) {\n        return Fibonacci(n, 0, 1);\n    }\n    \n    private static int Fibonacci(int n, int num1, int num2){\n        if(n == 0)\n            return 0;\n        if(n == 1)\n            return num2;\n        else\n            return Fibonacci(n - 1, num2, num1 + num2);\n    }\n}\n```\n\n## 10.2 跳台阶\n\n### 题目描述\n\n一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。\n\n### 题解\n\n如果只有1级台阶，则只有一种跳法；如果有2级台阶，则可以一次跳两阶，或者一次跳一阶；如果有n级台阶，第一次跳就有两种不同的选择：当第一次只跳一阶时，总的跳法数等于后面n-1级台阶的跳法数，而如果第一次跳两阶的话，总的跳法数就等于后面n-2级台阶的跳法数。根据此规律可以得到以下公式：\n```\nf(n) = 0, 当n=0时\nf(n) = 1, 当n=1时\nf(n) = 2, 当n=2时\nf(n) = f(n-1) + f(n-2), 当n>2时\n```\n\n```java\npublic class Solution {\n    public int JumpFloor(int n) {\n        if(n <= 0)\n            return 0;\n        if(n == 1)\n            return 1;\n        if(n == 2)\n            return 2;\n        int num = 0;\n        int num1 = 1;\n        int num2 = 2;\n        for(int i = 3; i <= n; i++){\n            num = num1 + num2;\n            num1 = num2;\n            num2 = num;\n        }\n        return num;\n    }\n}\n```\n\n## 10.3 变态跳台阶\n\n### 题目描述\n\n一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。\n\n### 题解\n\n#### 思路一\n\n此题和上题类似，但是一次可以跳多级台阶，依旧可以根据“第一次跳多少台阶，则跳法数等于剩下多少台阶的跳法数目”的思路进行分析，因此我们可以如下分析：\n\n```\n如果有1级台阶，则有f(1) = 1 种跳法\n如果有2级台阶，则有f(2) = f(2-1) + f(2-2) = 2 种跳法\n如果有3级台阶，则有f(3) = f(3-1) + f(3-2) + f(3-3) = 4 种跳法\n···\n如果有n级台阶，则有f(n) = f(n-1) + f(n-2) + f(n-3) + ··· + f(0) 种跳法\n              又 f(n-1) = f(n-2) + f(n-3) + f(n-4) + ··· + f(0)\n     进行相减可得，f(n) - f(n-1) = f(n-1)\n              即，f(n) = 2f(n-1)\n              \n由此得出，\nf(n) = 1, 当n=0时\nf(n) = 1, 当n=1时\nf(n) = f(n-1) + f(n-2), 当n>=2时\n```\n\n此题一个比较难理解的部分是，在公式中当n=0时，f(n)应当等于1而不是0。因为如果第一次就跳完了所有台阶，这也算一种跳法，此时f(n-n)=f(0)应当等于1而非0。\n\n```java\npublic class Solution {\n    public int JumpFloorII(int n) {\n        if(n <= 0)\n            return 0;\n        if(n == 1)\n            return 1;\n        int num = 0;\n        int num1 = 1;   //初始值应为1而非0\n        int num2 = 1;\n        for(int i = 2; i <= n; i++){\n            num = num1 + num2;\n            num2 = num1;\n            num1 = num;\n        }\n        return num;\n    }\n}\n```\n\n#### 思路二\n\n在跳台阶的整个过程中，除了最后一阶是必须要跳的，其它每个台阶都有跳或者不跳两种可能性，因此f(n) = 2^(n-1)。\n\n```java\npublic class Solution {\n    public int JumpFloorII(int n) {\n        if(n <= 0)\n            return 0;\n        else\n            return (int)Math.pow(2, n-1);\n    }\n}\n```\n\n## 10.4 矩形覆盖\n\n### 题目描述\n\n我们可以用2 * 1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2 * 1的小矩形无重叠地覆盖一个2 * n的大矩形，总共有多少种方法？\n\n### 题解\n\n```\nf(n) = 1, 当n=0时\nf(n) = 1, 当n=1时\nf(n) = f(n-1) + f(n-2), 当n>=2时\n```\n\n```java\npublic class Solution {\n    public int RectCover(int n) {\n        if(n <= 0)\n            return 0;\n        if(n == 1)\n            return 1;\n        int num = 0;\n        int num1 = 1;\n        int num2 = 1;\n        for(int i = 2; i <= n; i++){\n            num = num1 + num2;\n            num2 = num1;\n            num1 = num;\n        }\n        return num;\n    }\n}\n```\n\n\n## 14 剪绳子\n\n### 题目描述\n\n一根长度为n的绳子，将绳子剪为m段（剪m-1次），每段绳子的长度为k[0] - k[m]；要求k[0] * k[1] * k[2] * ··· * k[m]的乘积为最大。n >1 且 m> 1。\n\n### 题解\n\n这道题可以采用动态规划来做。在剪第一刀的时候，我们有n-1种可能的选择，因此f(n)=max(f(i) * f(n-i))。由于递归会产生很多重复的子问题，因此采用由下而上的循环方式，将每个子问题的最优解放到数组dp里。最终的答案就是dp[n]。\n\n在刚开始看书的时候并不理解为什么要对dp[1], dp[2], [dp3]逐一初始化，后来经过反复调试并思考，发现当n>3时dp[3]也就是当绳子长度为3时，不应该对其进行切割，因为切割后理论应得问题最优解就是2，而它的父问题要想得到最优解，应该直接使用整段未切割绳子也就是3。而当n<=3时，将在方法最开始就进行了一个正确的返回，即当绳子长度为3时，对其进行切割得到最优解为2。\n\n```java\npublic class Solution {\n    public int integerBreak(int n) {\n        if(n < 2)\n            return 0;\n        if(n == 2)\n            return 1;\n        if(n == 3)\n            return 2;\n\n        int []dp = new int[n +1];\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        for(int i = 4; i <= n; i++){\n            //把长度为i的绳子切成若干段\n            int max = 0;\n            for(int j = 1; j <= i/2; j++){\n                int p = dp[j] * dp[i-j];\n                if(max < p)\n                    max = p;\n            }\n            dp[i] = max;\n        }\n        return dp[n];\n    }\n}\n```\n\n## 15 二进制中1的个数\n\n### 题目描述\n\n输入一个整数，输出该数二进制表示中1的个数。\n\n### 题解\n\n#### 常规解法\n\n将输入的数字n与1做与运算，如果得出的结果是1，说明n的最低位是1，从而将计数器加一，并将1左移，进行n的次低位的判断，如此反复。这种做法整数为多少位就要循环多少次。\n\n```java\n\npublic class Solution {\n    public int NumberOf1(int n){\n        int count = 0;\n        int flag = 1;\n        while(flag != 0){\n            if((n & flag) != 0){\n                count++;\n            }\n            flag = flag << 1;\n        }\n        return count;\n    }\n}\n\n```\n\n#### 优化解法\n\n对输入的数字n减1再与自身进行与运算，即(n-1)&n可以将n最低位的1变成0：\n```\nn:       11101100\nn-1:     11101011\nn&(n-1): 11101000\n```\n基于以上，n中有多少个1，就可以进行多少次这样的操作。\n\n```java\npublic class Solution {\n    public int NumberOf1(int n){\n        int count = 0;\n        while(n != 0){\n            count++;\n            n = (n - 1) & n;\n        }\n        return count;\n    }\n}\n```\n\n## 16 数值的整数次方\n\n### 题目描述\n\n给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。\n\n### 题解\n\n此题的关键在于对base、exponent为正数、负数和零的考虑。\n\n#### 循环\n\n```java\n\npublic class Solution {\n    public double Power(double base, int exponent) {\n        boolean isNegative = false;\n        if(exponent < 0){\n            isNegative = true;\n            exponent = -exponent;\n        }\n        double result = 1;\n        for(int i = 1; i <= exponent; i++){\n            result = base * result;\n        }\n        return isNegative ? 1 / result : result;\n    }\n}\n\n```\n\n#### 递归\n\na的n次方可以通过如下公式求解：\n\n```\na^n = a^(n/2) * a^(n/2),              n为偶数\na^n = a^((n-1)/2) * a^((n-1)/2) * a,  n为奇数\n```\n\n每次计算n都会变为原来的1/2，因此通过递归算法可以使时间复杂度降到logn，效率得到提升。除此之外，可以用右移运算和位与运算代替除2和求余运算两个操作，从而得到进一步优化。\n\n```java\npublic class Solution {\n    public double Power(double base, int exponent) {\n        if(exponent == 0)\n            return 1;\n        if(exponent == 1)\n            return base;\n        boolean isNegative = false;\n        if(exponent < 0){\n            isNegative = true;\n            exponent = -exponent;\n        }\n        double result = Power(base, exponent >> 1);\n        result *= result;\n        if((exponent & 0x1) == 1){\n            result *= base;\n        }\n        if(exponent < 0){\n            result = 1 / result;\n        }\n        return isNegative ? 1 / result : result;\n    }\n}\n```\n\n## 17 打印从1到最大的n位数\n\n### 题目描述\n\n输入数字n，按顺序打印出从1到最大的n位十进制数。比如输入3，则打印出1、2、3一直到最大的3位数999。\n\n### 题解\n\n这道题可以使用递归对n位数进行全排列，在每一次递归调用之前都设置好下一位，当index为最后一位时，结束递归并打印。\n\n```java\n\npublic class Solution {\n    public void PrintToMaxOfNDigits(int n){\n        if(n <= 0)\n            return;\n        char[] nums = new char[n];\n        for(int i = 0; i < 10; i++){\n            nums[0] = (char) ('0' + i);\n            PrintToMaxOfNDigits(nums, 0);\n        }\n    }\n\n    public void PrintToMaxOfNDigits(char[] nums, int index){\n        if(index == nums.length - 1){\n            System.out.println(nums);\n            return;\n        }\n\n        for(int i = 0; i < 10; i++){\n            nums[index+1] = (char) ('0' + i);\n            PrintToMaxOfNDigits(nums, index+1);\n        }\n    }\n}\n\n```\n\n## 18.1 在O(1)时间内删除链表节点\n\n### 题目描述\n\n给定单向链表的头指针和一个节点指针，定义一个函数在O(1)时间内删除该节点。\n\n```\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}\n*/\n```\n\n### 题解\n\n对于一个链表：1->2->3->4->5，如果要删除节点4，\n\n首先想到的思路是找到节点4前面的节点（此处也就是节点3），将3的下一个节点重新设置为要删除的节点的下一个节点（此处也就是5），此时链表就变为了1->2->3->5。但由于链表是单向链表，不能从要删除的节点直接得到上一个节点，因此只能从头开始顺序查找，时间复杂度就为O(n)了。\n\n另一种思路则是将要删除的节点的下一个节点的值赋值给要删除的节点，再将要删除的节点的下一个节点重新设置为下下个节点：\n1->2->3->5->5\n1->2->3->5\n此时，时间复杂度就为O(1)了。\n\n但如果要删除的节点为尾节点，则没有下一个节点，此种情况依然要使用顺序查找的方式删除节点。\n\n```java\npublic class Solution {\n\tpublic ListNode deleteNode(ListNode head, ListNode tobeDelete) {\n\t\tif(head == null || tobeDelete == null) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t//要删除的节点不是尾节点\n\t\tif(tobeDelete.next != null) {\n\t\t\ttobeDelete.val = tobeDelete.next.val;\n\t\t\ttobeDelete.next = tobeDelete.next.next;\n\t\t} else {\n\t\t\t//要删除的节点是尾节点\n\t\t\tListNode node = head;\n\t\t\tif(node == tobeDelete) {\n\t\t\t\t//如果链表中只有要删除的这一个节点\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\twhile(node.next != tobeDelete) {\n\t\t\t\tnode = node.next;\n\t\t\t}\n\t\t\tnode.next = null;\n\t\t\t\n\t\t}\n\t\t\n\t\treturn head;\n\t}\n}\n```\n\n## 18.2 删除链表中重复的结点\n\n### 题目描述\n\n在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1->2->3->3->4->4->5 处理后为 1->2->5\n\n```\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}\n*/\n```\n\n### 题解\n\n如果当前节点的值与下一个节点的值相同，那么它们就是重复的节点，都可以被删除。为了保证删除之后的链表仍然是相连的，我们要把当前节点的前一个节点和后面值比当前节点的值大的节点相连。\n\n```java\npublic class Solution {\n    public ListNode deleteDuplication(ListNode pHead)\n    {\n\t\tif(pHead == null) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t//如果链表中只存在一个节点，则不存在重复的节点\n\t\tif(pHead.next == null) {\n\t\t\treturn pHead;\n\t\t}\n\t\t\n\t\tListNode preNode = null;\n\t\tListNode node = pHead;\n\t\t\n\t\twhile(node != null) {\n\t\t\tListNode nextNode = node.next;\n\t\t\tif(nextNode != null && !(nextNode.val == node.val)) {\n\t\t\t\t//当前节点与下一个节点不同\n\t\t\t\tpreNode = node;\n\t\t\t\tnode = nextNode;\n\t\t\t} else {\n\t\t\t\tif(node.next == null) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//当前节点与下一个相同\n\t\t\t\tint value = node.val;\n\t\t\t\tListNode toBeDel = node;\n\t\t\t\twhile(toBeDel != null && toBeDel.val == value) {\n\t\t\t\t\tnextNode = toBeDel.next;\n\t\t\t\t\ttoBeDel = nextNode;\n\t\t\t\t}\n\t\t\t\tif(preNode == null) {\n\t\t\t\t\tpHead = nextNode;\n\t\t\t\t} else {\n\t\t\t\t\tpreNode.next = nextNode;\n\t\t\t\t}\n\t\t\t\tnode = nextNode;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn pHead;\n    }\n}\n```\n\n## 19 正则表达式匹配\n\n### 题目描述\n\n请实现一个函数用来匹配包括'.'和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（包含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串\"aaa\"与模式\"a.a\"和\"ab*ac*a\"匹配，但是与\"aa.a\"和\"ab*a\"均不匹配.\n\n### 题解\n\n```java\npublic class Solution {\n    public boolean match(char[] str, char[] pattern)\n    {\n        if(str == null || pattern == null) {\n        \treturn false;\n        }\n        int strIndex = 0;\n        int patternIndex = 0;\n        return matchCore(str, pattern, strIndex, patternIndex);\n    }\n    \n    public boolean matchCore(char[] str, char[] pattern, int strIndex, int patternIndex) {\n    \t\n    \t//字符串与模式完全匹配\n    \tif(strIndex == str.length && patternIndex == pattern.length) {\n    \t\treturn true;\n    \t}\n    \t\n    \t//字符串未到达末尾，而模式已到达末尾，则匹配失败\n    \tif(strIndex != str.length && patternIndex == pattern.length) {\n    \t\treturn false;\n    \t}\n    \t\n    \tif(patternIndex + 1 < pattern.length && pattern[patternIndex + 1] == '*') {\n    \t\t//模式的第二个字符为*\n    \t\tif(strIndex < str.length && str[strIndex] == pattern[patternIndex] || strIndex < str.length && pattern[patternIndex] == '.') {\n    \t\t\t//*前的字符与字符串中的字符相等时\n    \t\t\t//可能的情况：匹配0位，模式向后移动两位跳过*；匹配一位，模式向后移动两位跳过*；匹配一位，模式不移动，下次继续匹配。\n    \t\t\treturn matchCore(str, pattern, strIndex, patternIndex+2) || matchCore(str, pattern, strIndex+1, patternIndex+2)\n    \t\t\t\t\t|| matchCore(str, pattern, strIndex+1, patternIndex);\n    \t\t} else {\n    \t\t\t//*前的字符与字符串中的字符不相等时，匹配0位，跳过*\n    \t\t\treturn matchCore(str, pattern, strIndex, patternIndex+2);\n    \t\t}\n    \t\t\n    \t} \n    \t\n    \tif(pattern[patternIndex] == '.' && strIndex < str.length || strIndex < str.length && pattern[patternIndex] == str[strIndex]) {\n    \t\t//模式的第二个字符不为*\n    \t\tif(str[strIndex] == pattern[patternIndex] || pattern[patternIndex] == '.') {\n    \t\t\t//如果字符相匹配,则接续操作\n    \t\t\treturn matchCore(str, pattern, strIndex+1, patternIndex+1);\n    \t\t} else {\n    \t\t\t//字符不匹配，直接返回false\n    \t\t\treturn false;\n    \t\t}\n    \t}\n    \t\n    \treturn false;\n    }\n}\n```\n\n## 20 表示数值的字符串\n\n### 题目描述\n\n请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串\"+100\",\"5e2\",\"-123\",\"3.1416\"和\"-1E-16\"都表示数值。 但是\"12e\",\"1a3.14\",\"1.2.3\",\"+-5\"和\"12e+4.3\"都不是。\n\n### 题解\n\n表示数值的字符串遵循模式：A[.[b]][e|EC]或者.B[e|EC]。A和C都可以带有符号'+'或'-'，B则不行，且A、B、C都必须为整数。因此，可以根据模式的顺序去依次匹配A、B、C。如果字符串中包含'.'，则'.'左右至少要有一方有数字，而如果字符串中包含'e'或'E'，则'e'或'E'两方都必须要有数字，且右方必须为整数。\n\n```java\npublic class Solution {\n    private int index = 0;\n    \n    public boolean isNumeric(char[] str) {\n    \tboolean flag;\n    \t\n    \tif(str == null)\n    \t\treturn false;\n    \t\n    \tflag = scanInteger(str);\n    \t\n    \tif(index < str.length && str[index] == '.') {\n    \t\tindex++;\n    \t\tflag = scanUnsignedInteger(str) || flag;\n    \t}\n    \tif(index < str.length && (str[index] == 'e' || str[index] == 'E')) {\n    \t\tindex++;\n    \t\tflag = scanInteger(str) && flag;\n    \t}\n    \t\n        return flag && (index == str.length);\n    }\n    \n    boolean scanUnsignedInteger(char[] str) {\n    \tint before = index;\n    \twhile(index < str.length && str[index] >= '0' && str[index] <= '9') {\n    \t\tindex++;\n    \t}\n    \treturn index > before;\n    }\n    \n    boolean scanInteger(char[] str) {\n    \tif(index < str.length && (str[index] == '+' || str[index] == '-'))\n    \t\tindex++;\n    \treturn scanUnsignedInteger(str);\n    }\n}\n```\n\n## 21 调整数组顺序使奇数位于偶数前面\n\n### 题目描述\n\n输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分（拓展：并保证奇数和奇数，偶数和偶数之间的相对位置不变）。\n\n### 题解\n\n#### 基本解法\n\n一前一后扫描数组，若发现有偶数在前，奇数在后，则交换它们两的位置。此算法的时间复杂度为O(n)，但是算法是不稳定的，也就是没法保证奇数和奇数，偶数和偶数之间的相对位置不变。\n\n```java\npublic class Solution {\n    public void reOrderArray(int [] array) {\n    \tint head = 0;\n    \tint tail = array.length - 1;\n    \twhile(head < tail) {\n    \t\twhile(head < array.length && array[head] % 2 != 0) {\n    \t\t\t//正向遍历不为偶数的时候\n    \t\t\thead++;\n    \t\t}\n    \t\twhile(tail >= 0 && array[tail] % 2 == 0) {\n    \t\t\t//反向遍历不为奇数的时候\n    \t\t\ttail--;\n    \t\t}\n    \t\tif(head < tail) {\n    \t\t\tint temp = array[head];\n    \t\t\tarray[head] = array[tail];\n    \t\t\tarray[tail] = temp;\n    \t\t}\n    \t}\n    }\n}\n```\n\n#### 拓展解法\n\n要保证奇数和奇数，偶数和偶数之间的相对位置不变，则需要使用一个辅助数组，首先计算出奇数的个数，以此作为将偶数插入辅助数组的起始坐标。然后遍历原数组，将奇数放置于辅助数组的奇数起始坐标（也就是0），将偶数放置于辅助数组的偶数起始坐标，最后再将调整完毕的辅助数组中的元素依次放回原数组。此算法的时间复杂度为O(n)，空间复杂度为O(n)，相当于以空间换时间。另一种思路是可以使用插入排序的思想，在此不再阐述。\n\n```java\npublic class Solution {\n    public void reOrderArray(int [] array) {\n        int[] copy = new int[array.length];\n        int index = 0;\n        int count = 0;\n        for(int i = 0; i < array.length; i++) {\n        \t//统计奇数个数\n        \tif(array[i] % 2 != 0) count++;\n        }\n        int odd = 0;\n        int even = count;\n        \n        while(index < array.length) {\n        \tif(array[index] % 2 != 0) {\n        \t\t//如果是奇数\n        \t\tcopy[odd] = array[index];\n        \t\todd++;\n        \t} else {\n        \t\t//如果是偶数\n        \t\tcopy[even] = array[index];\n        \t\teven++;\n        \t}\n        \tindex++;\n        }\n        for(int i = 0; i < array.length; i++) {\n        \tarray[i] = copy[i];\n        }\n    }\n}\n```\n## 22 链表中倒数第K个节点\n\n### 题目描述\n\n输入一个链表，输出该链表中倒数第k个结点。\n\n```\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\n```\n\n### 题解\n\n传统的思路是先遍历一遍链表，计算出节点数n，则倒数第k个节点就是从头开始的第n-k+1个节点。但此种做法要遍历链表两边，效率不高。\n\n另一种思路是定义两个指针，让两个指针之间的距离保持在k-1，则当第一个指针到达链表的尾节点时，第二个指针则指向倒数第k个节点。这种实现只需要遍历链表一次即可。\n\n```java\npublic class Solution {\n    public ListNode FindKthToTail(ListNode head,int k) {\n        if(head == null || k <= 0)\n    \t\treturn null;\n    \t\n    \tListNode node1 = head;\n    \tListNode node2 = head;\n    \t\n    \tfor(int i = 0; i < k-1; i++) {\n    \t\tif(node1.next == null)\n    \t\t\treturn null;\n    \t\tnode1 = node1.next;\n    \t}\n    \twhile(node1.next != null) {\n    \t\tnode1 = node1.next;\n    \t\tnode2 = node2.next;\n    \t}\n    \treturn node2;\n    }\n}\n```\n\n## 23 链表中环的入口节点\n\n### 题目描述\n\n给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。\n\n```\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\n```\n\n### 题解\n\n要找到链表中环的入口节点，整体思路与上一题类似。例如，如果环中有4个节点，则第二个指针要比第一个指针先走四步，然后同时向前走，当两个指针相遇时，所指向的节点就是入口节点。\n\n根据此思路，要解决的问题是：如何计算环的节点数？这里可以先使用一快一慢两个指针，得到相遇时的节点（若第一个指针走到了null，说明链表中没有环，返回null），此节点必然在环内，然后从此节点开始绕环一圈，每走一步计数器加一，当回到原点时便得到了环的节点数。\n\n```java\npublic class Solution {\n\n    public ListNode EntryNodeOfLoop(ListNode head)\n    {\n        if(head == null)\n    \t\treturn null;\n        \n        ListNode meetingNode = MeetingNode(head);\n        \n        if(meetingNode == null)\n        \treturn null;\n        \t\t\t\n        ListNode node1 = head;\n        ListNode node2 = head;\n        ListNode node = meetingNode.next;\n        int count = 1;\n        while(node != meetingNode) {\n        \tcount++;\n        \tnode = node.next;\n        }\n        for(int i = 0; i < count; i++) {\n        \tnode1 = node1.next;\n        }\n        \n        while(node1 != node2) {\n        \tnode1 = node1.next;\n        \tnode2 = node2.next;\n        }\n        return node1;\n    }\n    \n    public ListNode MeetingNode(ListNode head) {\n    \tListNode node1 = head;\n    \tListNode node2 = head;\n    \t\n    \twhile(node1.next != null && node1.next.next != null) {\n    \t\tnode1 = node1.next.next;\n    \t\tnode2 = node2.next;\n    \t\tif(node1 == node2)\n    \t\t\treturn node1;\n    \t}\n    \treturn null;\n    }\n   \n}\n```\n\n## 24 反转链表\n\n### 题目描述\n\n输入一个链表，反转链表后，输出新链表的表头。\n\n```\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\n```\n\n### 题解\n\n定义三个指针分别指向前一个节点，当前节点和后一个节点。\n\n```java\npublic class Solution {\n    public ListNode ReverseList(ListNode head) {\n    \tif(head == null)\n    \t\treturn null;\n    \t\n    \tListNode preNode = null;\n    \tListNode currNode = head;\n    \tListNode nextNode = head.next;\n    \tListNode reNode = null;\n    \t\n    \twhile(currNode != null) {\n    \t\tif(nextNode == null) {\n    \t\t\treNode = currNode;\n    \t\t\tcurrNode.next = preNode;\n    \t\t\tbreak;\n    \t\t}\n    \t\tcurrNode.next = preNode;\n    \t\tpreNode = currNode;\n    \t\tcurrNode = nextNode;\n    \t\tnextNode  = currNode.next;\n    \t}\n    \treturn reNode;\n    }\n}\n```\n\n## 25 合并两个排序的链表\n\n### 题目描述\n\n输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。\n\n```\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\n```\n\n### 题解\n\n```java\npublic class Solution {\n    public ListNode Merge(ListNode list1,ListNode list2) {\n        if(list1 == null)\n        \treturn list2;\n        if(list2 == null)\n        \treturn list1;\n        \n        ListNode head = null;\n        \n        if(list1.val < list2.val) {\n        \thead = list1;\n        \thead.next = Merge(list1.next, list2);\n        }\n        else {\n        \thead = list2;\n        \thead.next = Merge(list1, list2.next);\n        }\n        return head;\n    }\n}\n```\n\n\n## 26 树的子结构\n\n### 题目描述\n\n输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）\n\n```\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n    }\n}\n*/\n```\n\n### 题解\n\n第一步是在树A中查找与根节点的值一样的节点，第二步是判断以此节点为根节点的子树是不是和树B具有相同的结构。此题要特别注意由于计算机表示小数含有误差，不能直接使用==进行double类型的等值判断，而是判断两个小数的差的绝对值是否小于某一个可忽略的数。\n\n```java\npublic class Solution {\n    public boolean HasSubtree(TreeNode root1,TreeNode root2) {\n        boolean result = false;\n        \n        if(root1 != null && root2 != null) {\n        \tif(Equal(root1.val, root2.val))\n        \t\tresult = DoesTree1HaveTree2(root1, root2);\n        \tif(!result)\n        \t\tresult = HasSubtree(root1.left, root2);\n        \tif(!result)\n        \t\tresult = HasSubtree(root1.right, root2);\n        }\n        \n        return result;\n    }\n    \n    public boolean DoesTree1HaveTree2(TreeNode root1, TreeNode root2) {\n    \tif(root2 == null)\n    \t\treturn true;\n    \tif(root1 == null)\n    \t\treturn false;\n    \t\n    \tif(!Equal(root1.val, root2.val))\n    \t\treturn false;\n    \t\n    \treturn DoesTree1HaveTree2(root1.left, root2.left) && DoesTree1HaveTree2(root1.right, root2.right);\n    }\n    \n    public boolean Equal(double num1, double num2) {\n    \tif(num1- num2 > -0.0000001 && num1 - num2 < 0.0000001)\n    \t\treturn true;\n    \treturn false;\n    }\n}\n```\n\n## 27 二叉树的镜像\n\n### 题目描述\n\n操作给定的二叉树，将其变换为源二叉树的镜像。\n\n```\n二叉树的镜像定义：\n\n\t源二叉树 \n    \t    8\n    \t   /  \\\n    \t  6   10\n    \t / \\  / \\\n    \t5  7 9 11\n\t\n    \t镜像二叉树\n    \t    8\n    \t   /  \\\n    \t  10   6\n    \t / \\  / \\\n    \t11 9 7  5\n```\n\n```\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n    }\n}\n*/\n```\n\n### 题解\n\n```java\npublic class Solution {\n    public void Mirror(TreeNode root) {\n        if(root == null)\n    \t\treturn;\n    \tif(root.left == null && root.right == null)\n    \t\treturn;\n    \t\n    \tTreeNode temp;\n    \ttemp = root.left;\n    \troot.left = root.right;\n    \troot.right = temp;\n    \t\n    \tif(root.left != null)\n    \t\tMirror(root.left);\n    \tif(root.right != null)\n    \t\tMirror(root.right);\n    }\n}\n```\n\n## 28 对称的二叉树\n\n### 题目描述\n\n请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。\n\n```\n       对称的二叉树 \n    \t    8\n    \t   /  \\\n    \t  6    6\n    \t / \\  / \\\n    \t5  7 7   5\n\t\n      非对称的二叉树\n    \t    8\n    \t   /  \\\n    \t  6    9\n    \t / \\  / \\\n    \t5  7 7   5\n```\n\n```\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n    }\n}\n*/\n```\n\n### 题解\n\n对于上图的非对称的二叉树，可以发现前序序列为{8, 6, 5, 7, 6, 7, 5}，对称前序序列为{8, 9, 5, 7, 6, 7, 5}。\n而对于对称的二叉树，前序序列与对称前序序列都为{8, 6, 5, 7, 6, 7, 5}。\n因此，通过比较二叉树的前序序列和对称前序序列即可判断出二叉树是否对称。\n\n```java\npublic class Solution {\n    boolean isSymmetrical(TreeNode pRoot)\n    {\n        return isSymmetrical(pRoot, pRoot);\n    }\n    \n    boolean isSymmetrical(TreeNode pRoot1, TreeNode pRoot2) {\n    \tif(pRoot1 == null && pRoot2 == null)\n    \t\treturn true;\n    \tif(pRoot1 == null || pRoot2 == null)\n    \t\treturn false;\n    \tif(pRoot1.val != pRoot2.val)\n    \t\treturn false;\n    \treturn isSymmetrical(pRoot1.left, pRoot2.right) && isSymmetrical(pRoot1.right, pRoot2.left);\n    }\n}\n```\n\n## 29 顺时针打印矩阵\n\n### 题目描述\n\n输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.\n\n### 题解\n\n```java\nimport java.util.ArrayList;\n\npublic class Solution {\n    public ArrayList<Integer> printMatrix(int [][] matrix) {\n        if(matrix == null)\n        \treturn null;\n        \n        int columns = matrix[0].length;\n        int rows = matrix.length;\n        \n        if(columns == 0 || rows == 0)\n        \treturn null;\n        ArrayList<Integer> arr = new ArrayList();\n        int start = 0;\n        \n        while(columns > start*2 && rows > start*2) {\n        \tarr.addAll(PrintMatrixInCircle(matrix, columns, rows, start));\n        \tstart++;\n        }\n        return arr;\n    }\n    \n    public ArrayList<Integer> PrintMatrixInCircle(int [][]matrix, int columns, int rows, int start){\n    \tArrayList<Integer> arr = new ArrayList();\n    \t\n    \tint endX = columns - 1 - start;\n    \tint endY = rows - 1 - start;\n    \t\n    \t//从左到右打印一行\n    \tfor(int i = start; i <= endX; ++i) {\n    \t\tint number = matrix[start][i];\n    \t\tarr.add(number);\n    \t}\n    \t\n    \t//从上到下打印一列\n    \tif(start < endY) {\n    \t\tfor(int i = start + 1; i <= endY; ++i) {\n    \t\t\tint number = matrix[i][endX];\n    \t\t\tarr.add(number);\n    \t\t}\n    \t}\n    \t\n    \t//从右到左打印一行\n    \tif(start < endX && start < endY) {\n    \t\tfor(int i = endX - 1; i >= start; --i) {\n    \t\t\tint number = matrix[endY][i];\n    \t\t\tarr.add(number);\n    \t\t}\n    \t}\n    \t\n    \t//从下到上打印一行\n    \tif(start < endX && start < endY - 1) {\n    \t\tfor(int i = endY - 1; i >= start + 1; --i) {\n    \t\t\tint number = matrix[i][start];\n    \t\t\tarr.add(number);\n    \t\t}\n    \t}\n    \t\n    \treturn arr;\n    }\n}\n```\n\n## 30 包含min函数的栈\n\n### 题目描述\n\n定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。\n\n### 题解\n\n使用一个辅助栈。第一次压入的时候，把该元素同时也压入到辅助栈中。以后每次压入新元素的时候，如果新元素比辅助栈栈顶的元素小，就把新元素也压入到辅助栈中，否则，就把辅助栈栈顶的元素再次压入。这么做可以使辅助栈的每个元素对应着数据栈中该位置元素之前的最小元素，即每次从数据栈和辅助栈中弹出一个元素时，辅助栈的栈顶都保存着数据栈的最小元素。由此我们也可以发现，在辅助栈中，新元素的值要么比上一层的值小，要么等于上一层的值。\n\n```java\nimport java.util.Stack;\n\npublic class Solution {\n\tprivate Stack<Integer> data = new Stack<>();\n\t\n\tprivate Stack<Integer> dataHelper = new Stack<>();\n\t\n\t\n    public void push(int node) {\n    \tdata.push(node);\n    \tif(dataHelper.isEmpty()) {\n    \t\tdataHelper.push(node);\n    \t} else {\n    \t\tif(node < dataHelper.peek()) {\n\t        \tdataHelper.push(node);\n\t        } else {\n\t        \tdataHelper.push(dataHelper.peek());\n\t        }\n    \t}\n\n    }\n    \n    public void pop() {\n        data.pop();\n        dataHelper.pop();\n    }\n    \n    public int top() {\n        return data.peek();\n    }\n    \n    public int min() {\n        return dataHelper.peek();\n    }\n}\n```\n\n## 31 栈的压入、弹出序列\n\n### 题目描述\n\n输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）\n\n### 题解\n\n使用一个栈来模拟压入、弹出的操作，可以得到以下规律：\n\n* 如果下一个弹出的数字刚好是栈顶数字，直接弹出\n* 否则，把压栈序列中还没有入栈的数字压入栈中，直到把下一个需要弹出的数字压入栈顶为止\n* 压栈序列为空还没找到，离开循环\n* 判断栈是否为空，为空则说明弹出序列匹配，否则，不匹配\n\n```java\nimport java.util.ArrayList;\nimport java.util.Stack;\n\npublic class Solution {\n    \n    Stack<Integer> helper = new Stack<>();\n    \n    public boolean IsPopOrder(int [] pushA,int [] popA) {\n    \tif(pushA == null || popA == null)\n    \t\treturn false;\n    \t\n    \tfor(int i = 0, j = 0; i < pushA.length; i++) {\n    \t\thelper.push(pushA[i]);\n    \t\t\n    \t\twhile(!helper.isEmpty() && j < popA.length && helper.peek() == popA[j]) {\n    \t\t\thelper.pop();\n    \t\t\tj++;\n    \t\t}\n    \t}\n    \t\n    \treturn helper.isEmpty();\n    }\n}\n```\n\n## 32.1 从上往下打印二叉树\n\n### 题目描述\n\n从上往下打印出二叉树的每个节点，同层节点从左至右打印。\n\n### 题解\n\n每次打印一个节点的时候，如果该节点有子节点，就把子节点加入到队列中，然后再从队列头取首元素并打印，重复以上操作，直至队列为空。\n\n```java\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class Solution {\n    public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) {\n        ArrayList<Integer> list = new ArrayList<>();\n        Queue<TreeNode> queue = new LinkedList<>();\n        if(root == null)\n        \treturn list;\n        queue.add(root);\n        while(queue.size() != 0) {\n        \tTreeNode node = queue.poll();\n        \tlist.add(node.val);\n        \tif(node.left != null) {\n        \t\tqueue.add(node.left);\n        \t}\n        \tif(node.right != null) {\n        \t\tqueue.add(node.right);\n        \t}\n        }\n        return list;\n    }\n}\n```\n\n## 32.2 把二叉树打印成多行\n\n### 题目描述\n\n从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。\n\n### 题解\n\n用两个变量分别记录当前行还剩余的节点与下一行需要打印的节点。每打印完一行，都将下一行需要打印的节点数赋给当前剩余节点数，并将自身置0，以便重新开始新的一行。\n\n```java\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class Solution {\n    ArrayList<ArrayList<Integer> > Print(TreeNode root) {\n        ArrayList<ArrayList<Integer>> listAll = new ArrayList<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        Queue<TreeNode> queue = new LinkedList<>();\n        if(root == null)\n        \treturn listAll;\n        int toBePrinted = 1;\t//当前层中还没打印的节点数\n        int nextLevel = 0;\t//下一层的节点数\n        queue.add(root);\n        while(queue.size() != 0) {\n        \tTreeNode node = queue.poll();\n        \tlist.add(node.val);\n        \tif(node.left != null) {\n        \t\tqueue.add(node.left);\n        \t\tnextLevel++;\n        \t}\n        \tif(node.right != null) {\n        \t\tqueue.add(node.right);\n        \t\tnextLevel++;\n        \t}\n        \ttoBePrinted--;\n        \tif(toBePrinted == 0) {\n                listAll.add(list);\n                list = new ArrayList<>();\n        \t\ttoBePrinted = nextLevel;\n        \t\tnextLevel = 0;\n        \t}\n        }\n        return listAll;\n    }\n}\n```\n\n## 32.3 按之字形顺序打印二叉树\n\n### 题目描述\n\n请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。\n\n### 题解\n\n如果当前节点在奇数层，则将子节点以从左往右的顺序入栈；如果当前节点在偶数层，则将子节点以从右往左的顺序入栈。更简单地说：子节点入栈的方向与当前层节点弹出的方向一致。\n\n在下面的算法中，用一个Stack数组保存当前层的栈与下一层的栈，用1和0表示奇数层和偶数层。当前层栈的节点弹出时，下一层栈的节点压入。如果当前层栈为空，则说明该行已经打印完成，将current与next置换（奇偶置换）后开始新的一行。\n\n```java\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Stack;\n\npublic class Solution {\n    public ArrayList<ArrayList<Integer> > Print(TreeNode root) {\n    \t    if(root == null)\n    \t\treturn new ArrayList<ArrayList<Integer>>();\n   \t    Stack<TreeNode>[] stack = new Stack[2];\n    \t    stack[0] = new Stack<TreeNode>();\n    \t    stack[1] = new Stack<TreeNode>();\n            ArrayList<ArrayList<Integer>> listAll = new ArrayList<>();\n            ArrayList<Integer> list = new ArrayList<>();\n            if(root == null)\n            \treturn listAll;\n    \t\tint current = 1;\t//表示奇数层\n    \t\tint next = 0;\t\t//表示偶数层\n    \t\tstack[current].push(root);\n    \t\twhile(stack[current].size() != 0 || stack[next].size() != 0) {\n    \t\t\tTreeNode node = stack[current].pop();\n    \t\t\t\n    \t\t\tlist.add(node.val);\n    \t\t\t\n    \t\t\tif(current == 1) {\n    \t\t\t\t//如果在奇数层，则子节点从左往右入栈\n    \t\t\t\tif(node.left != null) {\n    \t\t\t\t\tstack[next].push(node.left);\n    \t\t\t\t}\n    \t\t\t\tif(node.right != null) {\n    \t\t\t\t\tstack[next].push(node.right);\n    \t\t\t\t}\n    \t\t\t} else {\n    \t\t\t\t//如果在偶数层，则子节点从右往左入栈\n    \t\t\t\tif(node.right != null) {\n    \t\t\t\t\tstack[next].push(node.right);\n    \t\t\t\t}\n    \t\t\t\tif(node.left != null) {\n    \t\t\t\t\tstack[next].push(node.left);\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\t\n    \t\t\tif(stack[current].size() == 0) {\n    \t\t\t\tlistAll.add(list);\n    \t\t\t\tlist = new ArrayList<>();\n    \t\t\t\tcurrent = 1 - current;\n    \t\t\t\tnext = 1 - next;\n    \t\t\t}\n    \t\t}\n    \t\treturn listAll;\n    }\n}\n```\n\n## 33 二叉搜索树的后序遍历序列\n\n### 题目描述\n\n输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。\n\n### 题解\n\n先以以下二叉树为例，其输入数组为{5, 7, 6, 9, 11, 10, 8}。\n\n```\n    \t    8\n    \t   /  \\\n    \t  6    10\n    \t / \\  / \\\n    \t5  7 9   11\n```\n\n我们可以发现，数组的最后一个数字8就是二叉树的根节点，然后从数组开始进行遍历，凡是比8小的都属于根节点的左子树，其余的就是根节点的右子树，即{5, 7, 6, /9, 11, 10,/ 8}。我们在看看根节点的左子树，同样最后一个数字6是左子树的根节点，而5、7分别属于左子树根节点的左右子树。\n\n再看看另一个例子：{7, 4, 6, 5}，由以上分析的规律可以发现，5为二叉树的根节点，而7、4、6都比5大，说明此二叉树没有左子树，而在右子树{7, 4, 6}中，7比6大，说明7在根节点的右子树中，而4却又比6小，这有违二叉树的定义，说明此数组不属于任何一个二叉树。\n\n因此，我们可以使用递归来解决这个问题，先找到二叉树的根节点，再基于此根节点将数组拆分成左右子树，然后对左右子树分别进行递归。\n\n```java\npublic class Solution {\n    public boolean VerifySquenceOfBST(int [] sequence) {\n        if(sequence == null || sequence.length <= 0)\n    \t\treturn false;\n    \treturn VerifySquenceOfBST(sequence, 0, sequence.length - 1);\n    }\n    \n    public boolean VerifySquenceOfBST(int [] sequence, int begin, int end) {\n    \tif(end-begin<0)\n    \t\treturn true;\n    \t\n    \tint root = sequence[end];\n    \t\n    \tint i = begin;\n    \tfor(;i < end; i++) {\n    \t\tif(sequence[i] > root)\n    \t\t\tbreak;\n    \t}\n    \t\n    \tint j = i;\n    \tfor(;j < end; j++) {\n    \t\tif(sequence[j] < root)\n    \t\t\treturn false;\n    \t}\n    \t\n    \tboolean left = true;\n    \tif(i > 0)\n    \t\tleft = VerifySquenceOfBST(sequence, begin, i-1);\n    \t\n    \tboolean right = true;\n    \tif(i < end)\n    \t\tright = VerifySquenceOfBST(sequence, i, end - 1);\n    \t\n        return (right && left);\n    }\n}\n```\n\n## 34 二叉树中和为某一值的路径\n\n### 题目描述\n\n输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)。\n\n```\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n    }\n}\n*/\n```\n\n### 题解\n\n此题运用深度优先搜索的思想。从左开始向下深度遍历，遇到叶节点之后，判断其值是否等于target，如果相等则将此路径加入到所有路径的列表中。每次回退的时候，都要将路径最后一个节点删除。\n\n此题需要注意，将某一路径加入到所有路径列表时，必须新建一个ArrayList，否则每次都是将对同一个对象的引用加入到listAll中，而java中通过引用是可以改变对象内部的属性的，所以每次对list进行remove操作都会影响到listAll中已加入的所有list，最后由于list会回退到根节点并把根节点remove掉，导致listAll的路径数目虽然正确，但每条路径列表都为空。\n\n```java\npublic class Solution {\n    public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) {\n        ArrayList<ArrayList<Integer>> listAll = new ArrayList<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        if(root == null)\n        \treturn listAll;\n        findPath(listAll, list, root, target);\n        return listAll;\n    }\n    \n    public void findPath(ArrayList<ArrayList<Integer>> listAll, ArrayList<Integer> list, TreeNode root, int target) {\n    \tlist.add(root.val);\n    \t//如果为叶节点\n    \tif(root.left == null && root.right == null) {\n    \t\tif(root.val == target) {\n    \t\t\tArrayList<Integer> newList = new ArrayList<>();\n    \t\t\tnewList.addAll(list);\n    \t\t\tlistAll.add(newList);\n    \t\t}\n    \t\tlist.remove(list.size() - 1);\n    \t\treturn;\n    \t}\n    \tif(root.left != null)\n    \t\tfindPath(listAll, list, root.left, target-root.val);\n    \tif(root.right != null)\n    \t\tfindPath(listAll, list, root.right, target-root.val);\n    \tlist.remove(list.size() - 1);\n    \treturn;\n    \t\t\n    }\n}\n```\n\n## 35 复杂链表的复制\n\n### 题目描述\n\n输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）\n\n```\n/*\npublic class RandomListNode {\n    int label;\n    RandomListNode next = null;\n    RandomListNode random = null;\n\n    RandomListNode(int label) {\n        this.label = label;\n    }\n}\n*/\n```\n\n### 题解\n\n解决此题大体有以下两个步骤：\n\n1、根据原始链表的每个节点创建对应的复制节点\n\n2、设置复制出来的节点的random节点\n\n此题的关键在于定位random节点，需保证算法的时间复杂度在O(n)。\n\n#### 哈希表\n\n在第一步创建每个复制节点时，使用哈希表保存原节点与复制节点，之后设置random节点时，每当通过查找哈希表原节点的random节点便可以在O(1)的时间找到该复制节点应指向的random节点。此算法相当于以空间换时间，空间复杂度为O(n)。\n\n这里需要注意，java中的map是不能直接使用iterator遍历的，因此需要先通过entrySet()方法获取set视图。\n\n```java\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map.Entry;\n\npublic class Solution {\n    public RandomListNode Clone(RandomListNode head){\n        if(head == null)\n        \treturn null;\n        HashMap<RandomListNode, RandomListNode> map = new HashMap<>();\n        \n        RandomListNode cloneNodeHead = new RandomListNode(head.label);\n        RandomListNode cloneNode = cloneNodeHead;\n        map.put(head, cloneNode);\n        while(head.next != null) {\n        \tRandomListNode nextNode = new RandomListNode(head.next.label);\n        \tcloneNode.next = nextNode;\n        \tcloneNode = cloneNode.next;\n        \thead = head.next;\n        \tmap.put(head, cloneNode);\n        }\n        \n        Iterator<Entry<RandomListNode, RandomListNode>> it = map.entrySet().iterator();\n        while(it.hasNext()) {\n        \tEntry<RandomListNode, RandomListNode> entry = it.next();\n        \t//时间复杂度为O(1)，相当于以空间换时间\n        \tRandomListNode sib = map.get(entry.getKey().random);\n        \tentry.getValue().random = sib;\n        }\n        \n        return cloneNodeHead;\n    }\n}\n```\n\n#### 更好的解法\n\n思路：在旧链表中创建新链表->根据旧链表的random节点初始化新链表的random节点->把新链表从旧链表中拆分出来。\n\n此算法的时间复杂度为O(n)，且不需要辅助空间。\n\n```java\npublic class Solution {\n    public RandomListNode Clone(RandomListNode head)\n    {\n    \tif(head == null)\n    \t    return null;\n    \tCloneNodes(head);\n    \tConnectSiblingNodes(head);\n    \treturn ReconnectNodes(head);\n    }\n    \n    public void CloneNodes(RandomListNode head) {\n    \tRandomListNode test = head;\n    \twhile(head != null) {\n    \t\tRandomListNode cloneNode = new RandomListNode(head.label);\n    \t\tRandomListNode next = head.next;\n    \t\thead.next = cloneNode;\n    \t\tcloneNode.next = next;\n    \t\thead = next;\n    \t}\n    }\n    \n    public void ConnectSiblingNodes(RandomListNode head) {\n    \twhile(head != null) {\n    \t\tRandomListNode cloneNode = head.next;\n    \t\tif(head.random != null) {\n    \t\t\tcloneNode.random = head.random.next;\n    \t\t}\n    \t\thead = head.next.next;\n    \t}\n    }\n    \n    public RandomListNode ReconnectNodes(RandomListNode head) {\n    \tRandomListNode cloneNode = head.next;\n    \tRandomListNode cloneNodeHead = cloneNode;\n    \t\n    \twhile(head != null) {\n    \t\tRandomListNode next = head.next.next;\n    \t\tRandomListNode cloneNext;\n    \t\t//防止在最后一个节点处报空指针异常\n    \t\tif(next == null) {\n    \t\t\tcloneNext = null;\n    \t\t} else {\n    \t\t\tcloneNext = cloneNode.next.next;\n    \t\t}\n    \t\thead.next = next;\n    \t\tcloneNode.next = cloneNext;\n    \t\thead = next;\n    \t\tcloneNode = cloneNext;\n    \t}\n    \t\n    \treturn cloneNodeHead;\n    }\n}\n```\n\n## 36 二叉搜索树与双向链表\n\n### 题目描述\n\n输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。\n\n```\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n    }\n}\n*/\n```\n\n### 题解\n\n```java\npublic class Solution {\n    public TreeNode Convert(TreeNode root) {\n    \tif(root == null)\n    \t\treturn null;\n    \tif(root.left == null && root.right == null)\n    \t\treturn root;\n    \tTreeNode left = Convert(root.left);\n    \tTreeNode p = left;\n    \twhile(p != null && p.right != null) {\n    \t\tp = p.right;\n    \t}\n    \tif(left != null) {\n    \t\troot.left = p;\n    \t\tp.right = root;\n    \t}\n    \tTreeNode right = Convert(root.right);\n    \tif(right != null) {\n    \t\troot.right = right;\n    \t\tright.left = root;\n    \t}\n    \treturn left != null ? left : root;\n    }\n}\n```\n\n## 37 序列化二叉树\n\n### 题目描述\n\n请实现两个函数，分别用来序列化和反序列化二叉树\n\n### 题解\n\n```java\npublic class Solution {\n    \n  private int index = -1;\n    \n  String Serialize(TreeNode root) {\n        StringBuilder str = new StringBuilder();\n        if(root == null) {\n        \tstr.append(\"$,\");\n        \treturn str.toString();\n        }\n        str.append(root.val+\",\");\n        str.append(Serialize(root.left));\n        str.append(Serialize(root.right));\n        return str.toString();  \n  }\n  TreeNode Deserialize(String str) {\n       String[] newStr = str.split(\",\");\n       index++;\n       if(index < str.length() && !newStr[index].equals(\"$\")) {\n    \t   TreeNode root = new TreeNode(Integer.valueOf(newStr[index]));\n    \t   root.left = Deserialize(str);\n    \t   root.right = Deserialize(str);\n    \t   return root;\n       }\n       return null;\n  }\n}\n```\n\n## 38 字符串的排列\n\n### 题目描述\n\n输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。\n\n### 题解\n\n回溯法：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Collections;\n\npublic class Solution {\n    public ArrayList<String> Permutation(String str) {\n    \tArrayList<String> list = new ArrayList<>();\n        if(str == null || str.length() == 0)\n        \treturn list;\n        Permutation(str.toCharArray(), 0, list);\n        Collections.sort(list);\n        return list;\n    }\n    \n    public void Permutation(char[] c, int i, ArrayList<String> list) {\n    \tif(i == c.length) {\n    \t\tString str = String.valueOf(c);\n    \t\tif(!list.contains(str))\n    \t\t\tlist.add(String.valueOf(c));\n    \t\treturn;\n    \t} else {\n    \t\tfor(int j = i; j < c.length; j++) {\n    \t\t\tswap(c, i, j);\n    \t\t\tPermutation(c, i+1, list);\n    \t\t\tswap(c, i, j);\n    \t\t}\n    \t}\n    }\n    \n    public void swap(char[] c, int i, int j){\n    \tchar temp;\n    \ttemp = c[i];\n    \tc[i] = c[j];\n    \tc[j] = temp;\n    }\n}\n```\n\n## 39 数组中出现次数超过一半的数字\n\n### 题目描述\n\n数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。\n\n### 题解\n\n#### 基于辅助数组的解法\n\n此种解法利用了辅助数组，在辅助数组中以原始数组的值为索引存储该值出现的次数，一旦次数超过原始数组的一半，则跳出循环返回该值。该解法空间复杂度为O(n)，相当于以空间换时间，且由于数组的限制，事先必须要知道原始数组中值的范围，若要克服后者，可以使用其它数据结构。\n\n```java\npublic class Solution {\n    public int MoreThanHalfNum_Solution(int [] array) {\n    \tif(array == null || array.length == 0) {\n    \t\treturn 0;\n    \t}\n    \tint length = array.length;\n    \tint[] helper = new int[length+1];\n    \tint result = 0;\n    \t\n    \tfor(int i = 0; i < length; i++) {\n    \t\thelper[array[i]]++;\n    \t\tif(helper[array[i]] > length / 2) {\n    \t\t\tresult = array[i];\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    \t\n    \treturn result;\n    }\n}\n```\n\n#### 多数投票算法\n\n多数投票算(摩尔投票算法)：定义一个结果变量和一个计数器，初始化的情况下计数器为0. 算法依次扫描序列中的元素，当处理某元素的时候，如果计数器为0，那么将该元素赋值给结果变量，然后将计数器设置为1，如果计数器不为0，那么将结果变量和该元素比较，如果相等，那么计数器加1，如果不等，那么计数器减1。处理之后，最后存储的结果变量就是这个数组中超过一半以上的元素。\n\n需注意：如果一个元素的出现次数超过数组长度的一半，那么结果变量肯定为该元素，但结果变量元素的出现次数不一定超过数组长度的一半，因此需要进行第二次遍历确认。\n\n```java\npublic class Solution {\n    public int MoreThanHalfNum_Solution(int [] array) {\n    \tif(array == null || array.length == 0) {\n    \t\treturn 0;\n    \t}\n    \t\n    \tint result = array[0];\n    \tint n = 1;\n    \tfor(int i = 1; i < array.length; i++) {\n    \t\tif(n == 0) {\n    \t\t\tresult = array[i];\n    \t\t\tn = 1;\n    \t\t} \n    \t\telse if(array[i] == result) \n    \t\t\tn++;\n    \t\telse\n    \t\t\tn--;\n    \t}\n    \t\n    \tn = 0;\n    \tfor(int i = 0; i < array.length; i++) {\n    \t\tif(array[i] == result) {\n    \t\t\tn++;\n    \t\t}\n    \t}\n    \t\n    \tif(n <= array.length / 2)\n    \t\treturn 0;\n    \treturn result;\n    }\n}\n```\n\n## 40 最小的k个数\n\n### 题目描述\n\n输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。\n\n### 题解\n\n```java\nimport java.util.ArrayList;\nimport java.util.PriorityQueue;\nimport java.util.Comparator;\n\npublic class Solution {\n    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {\n        ArrayList<Integer> list = new ArrayList<>();\n        if(input == null || input.length <= 0 || k < 1 || k > input.length) {\n        \treturn list;\n        }\n        PriorityQueue<Integer> heap = new PriorityQueue<>(k+1, new Comparator<Integer>() {\n        \tpublic int compare(Integer o1, Integer o2) {\n        \t\treturn o2 - o1;\n        \t}\n        });\n        for(int i = 0; i < input.length; i++) {\n        \theap.add(input[i]);\n        \tif(heap.size() > k) {\n        \t\theap.poll();\n        \t}\n        }\n        for(Integer i : heap) {\n        \tlist.add(i);\n        }\n        return list;\n    }\n}\n```\n\n\n## 41 数据流中的中位数\n\n### 题目描述\n\n如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。\n\n### 题解\n\n用最大堆与最小堆来实现，插入的时间复杂度为O(log(n))。\n\n```java\nimport java.util.PriorityQueue;\nimport java.util.Comparator;\n\npublic class Solution {\n    \n    PriorityQueue<Integer> max = new PriorityQueue<>(new Comparator<Integer>() {\n\t\t@Override\n\t\tpublic int compare(Integer o1, Integer o2) {\n\t\t\treturn o2.compareTo(o1);\n\t\t}\n\t});\n\t\n\tPriorityQueue<Integer> min = new PriorityQueue<>(new Comparator<Integer>() {\n\t\t@Override\n\t\tpublic int compare(Integer o1, Integer o2) {\n\t\t\treturn o1.compareTo(o2);\n\t\t}\n\t});\n\n    public void Insert(Integer num) {\n        if((min.size()+max.size() & 1) == 0) {\n        \t//如果当前总数是偶数，则插入到最大堆\n        \tif(min.size() != 0 && num > min.peek()) {\n        \t\t//如果最小堆的数目不为0，且新插入的数字比最小堆的头要大\n        \t\tint temp = min.poll();\n        \t\tmax.add(temp);\n        \t\tmin.add(num);\n        \t} else {\n        \t\t//插入到最大堆\n        \t\tmax.add(num);\n        \t}\n        } else {\n        \t//如果当前总数是奇数，则插入到最小堆\n        \tif(max.size() != 0 && num < max.peek()) {\n        \t\t//同理\n        \t\tint temp = max.poll();\n        \t\tmin.add(temp);\n        \t\tmax.add(num);\n        \t} else {\n        \t\tmin.add(num);\n        \t}\n        }    \n    }\n\n    public Double GetMedian() {\n        int size = max.size() + min.size();\n    \tDouble d;\n    \t\n    \tif(size == 0)\n    \t\treturn -1.0;\n    \t\n    \tif((size & 1) != 0) {\n    \t\td = Double.valueOf(max.peek());\n    \t} else {\n    \t\td = (double) (max.peek() + min.peek()) / 2;\n    \t}\n    \treturn d;\n    }\n\n}\n```\n\n## 42 连续子数组的最大和\n\n### 题目描述\n\nHZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)\n\n### 题解\n\n```java\npublic class Solution {\n    public int FindGreatestSumOfSubArray(int[] data) {\n        if(data == null ||data.length <= 0){\n            return 0;\n        }\n        \n        int sum=data[0], max=data[0];\n        for(int i = 1; i < data.length; i++){\n            if(sum <= 0){\n                sum = data[i];\n            } else{\n                sum += data[i];\n            }\n            if(sum > max){\n                max = sum;\n            }\n        }\n        return max;\n    }\n}\n```\n\n## 44 数字序列中某一位的数字\n\n### 题目描述\n\n数字以 0123456789101112131415... 的格式序列化到一个字符串中，求这个字符串的第 index 位。\n\n### 题解\n\n```java\npublic class Solution {\n\tpublic int digitAtIndex(int index) {\n\t\tif(index < 0)\n\t\t\treturn -1;\n\t\t\n\t\tint digits = 1;\t//digits表示有几位数，初始为一位数\n\t\twhile(true) {\n\t\t\tint numbers = countOfIntegers(digits);\t//返回当前位数共有多少个数\n\t\t\tif(index < numbers * digits) {\t//数字的个数乘位数能得到具体的某一位数字的下标\n\t\t\t\treturn digitAtIndex(index, digits);\n\t\t\t}\n\t\t\t\n\t\t\tindex -= digits * numbers;\t//如果要查找的数字不在这位数里面，则跳过这些数字\n\t\t\tdigits++;\t//位数加一\n\t\t}\n\t}\n\t\n\t/*\n\t * 在n位数中的第index个数\n\t */\n\tprivate int digitAtIndex(int index, int digits) {\n\t\tint number = beginNumber(digits) + index / digits;\n\t\tint indexFromRight = digits - index % digits;\t//得到在查找到的数字中具体从右数的哪一位\n\t\tfor(int i = 1; i < indexFromRight; i++) {\n\t\t\tnumber /= 10;\n\t\t}\n\t\treturn number % 10;\n\t}\n\t\n\t/*\n\t * 计算n位的数字总共有多少，如二位数有10~99这90个数，三位数有100~999这900个数\n\t */\n\tprivate int countOfIntegers(int digits) {\n\t\tif(digits == 1)\n\t\t\treturn 10;\n\t\t\n\t\tint count = (int) Math.pow(10, digits-1);\n\t\treturn count * 9;\n\t}\n\t\n\t/*\n\t * 计算n位数的第一个数字，如二位数的第一个数字是10，三位数的第一个数字是100\n\t */\n\tprivate int beginNumber(int digits) {\n\t\tif(digits == 1)\n\t\t\treturn 0;\n\t\treturn (int)Math.pow(10, digits-1);\n\t}\n}\n```\n\n## 45 把数组排成最小的数\n\n### 题目描述\n\n输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。\n\n### 题解\n\n本题的关键在于定义一个规则判断两个数中谁应该排在前面，应该排在前面的数我们称其“小于”另一个数。例如，令m=32，n=2，则mn=322，nm=232，因为nm<mn，我们就称n小于m。之后我们便可使用这个比较方法（比较器）对数组中的所有元素进行排序即可。\n\n```java\nimport java.util.Arrays;\nimport java.util.Comparator;\n\npublic class Solution {\n    public String PrintMinNumber(int [] numbers) {\n        if(numbers == null || numbers.length <= 0)\n    \t\treturn \"\";\n    \t\n    \tStringBuilder res = new StringBuilder();\n    \tint len = numbers.length;\n    \tString[] str = new String[len];\n    \tfor(int i = 0; i < len; i++) {\n    \t\tstr[i] = numbers[i] + \"\";\n    \t}\n    \t\n    \tArrays.sort(str, new Comparator<String>() {\n    \t\tpublic int compare(String o1, String o2) {\n    \t\t\tString str1 = o1 + o2;\n    \t\t\tString str2 = o2 + o1;\n    \t\t\treturn str1.compareTo(str2);\n    \t\t}\n    \t});\n    \t\n    \tfor(String s : str) {\n    \t\tres.append(s);\n    \t}\n    \t\n    \treturn res.toString();\n    }\n}\n```\n\n## 46 把数字翻译成字符串\n\n### 题目描述\n\n给定一个数字，按照如下规则翻译成字符串：0 翻译成“a”，1 翻译成“b”... 25 翻译成“z”。一个数字有多种翻译可能，例如 12258 一共有 5 种，分别是 bccfi，bwfi，bczi，mcfi，mzi。实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n\n### 题解\n\n如果用递归方法从上往下求解，必然会遇到许多重复的计算，因此可以从下往上进行求解。\n\n我们可以先得到方程f(i) = f(i+1) + af(i+2)，当第i个数与第i+1个数组成的数字在10-25的范围内，则a=1，否则a=0。以字符串“13225”为例，下标为0和1的数分别是1和3，组成的13是在10-25的范围内的，因此可以将其看成剩下的3225或者225这两种组合方式。以上是自顶向下的分析，再看看自底向上的实现，以下标为2的数2为例，首先就单独把这个数进行翻译，则加上上一个数的计算结果，又因为上一个数2和它组成的22是在10-25的范围内的，所以可以把它们组合在一起翻译，基于这种情况则再加上上上个数的结果，这两种情况的结果相加就是自底到这一个数的计算结果。一直循环到第一个数，dp[0]便是最终答案。\n\n```java\npublic class Solution {\n    public int numDecodings(String s) {\n    \tif(s == null || s.length() <= 0)\n    \t\treturn 0;\n    \t\n        int count = 0;\n        int n = s.length() - 1;\n        int[] dp = new int[n+1];\n        \n        for(int i = n; i >= 0; i--) {\n        \tcount = 0;\n        \tif(i == n) {\n        \t\tcount = 1;\n        \t} else {\n        \t\tcount += dp[i+1];\n        \t}\n        \t\n        \tif(i < n) {\n        \t\tint num1 = s.charAt(i)-'0';\n        \t\tint num2 = s.charAt(i+1)-'0';\n        \t\tint num = num1 * 10 + num2;\n        \t\tif(num >= 10 && num <= 25) {\n        \t\t\tif(i < n-1) {\n        \t\t\t\tcount += dp[i+2];\n        \t\t\t} else {\n        \t\t\t\tcount++;\n        \t\t\t}\n        \t\t}\n        \t}\n        \t\n        \tdp[i] = count;\n        }\n        \n        return dp[0];\n    }\n}\n```\n\n## 47 礼物的最大价值\n\n### 题目描述\n\n小东所在公司要发年终奖，而小东恰好获得了最高福利，他要在公司年会上参与一个抽奖游戏，游戏在一个6*6的棋盘上进行，上面放着36个价值不等的礼物，每个小的棋盘上面放置着一个礼物，他需要从左上角开始游戏，每次只能向下或者向右移动一步，到达右下角停止，一路上的格子里的礼物小东都能拿到，请设计一个算法使小东拿到价值最高的礼物。\n\n给定一个6*6的矩阵board，其中每个元素为对应格子的礼物价值,左上角为[0,0],请返回能获得的最大价值，保证每个礼物价值大于100小于1000。\n\n### 题解\n\n使用动态规划的思路：f(i,j) = max(f(i-1,j), f(i,j-1))，每一个坐标(i,j)的解只需要依赖其左边与上边的坐标，且最左边坐标的解只依赖上边的坐标，因此只需要一个一维数组作为缓存即可，该数组存有i行j列左边的所有解以及i-1行j列右边的所有解。\n\n```java\npublic class Solution {\n\tpublic int getMost(int[][] values) {\n\t\tif(values == null || values.length == 0 || values[0].length == 0)\n\t\t\treturn 0;\n\t\t\n\t\tint n = values[0].length;\n\t\tint[] dp = new int[n];\n\t\tfor(int[] value : values) {\n\t\t\tdp[0] += value[0];\n\t\t\tfor(int i = 1; i < n; i++) {\n\t\t\t\tdp[i] = Math.max(dp[i], dp[i-1]) + value[i];\n\t\t\t}\n\t\t}\n\t\treturn dp[n-1];\n\t}\n}\n```\n\n## 48 最长不含重复字符的子字符串\n\n### 题目描述\n\n输入一个字符串（只包含 a~z 的字符），求其最长不含重复字符的子字符串的长度。例如对于 arabcacfr，最长不含重复字符的子字符串为 acfr，长度为 4。\n\n### 题解\n\n```java\npublic class Solution {\n\tpublic int LongestSubstringWithoutDupSolution(String str) {\n\t\tif(str == null || str.length() <= 0)\n\t\t\treturn 0;\n\t\t\n\t\tint maxLen = 0;\n\t\tint curLen = 0;\n\t\tint[] position = new int[26];\n\t\tfor(int i = 0; i < 26; i++) {\n\t\t\tposition[i] = -1;\n\t\t}\n\t\t\n\t\tfor(int i = 0; i < str.length(); i++) {\n\t\t\t//当前字母在position的下标index\n\t\t\tint index = str.charAt(i) - 'a';\n\t\t\tif(position[index] < 0) {\n\t\t\t\t//如果这个字母之前没出现过\n\t\t\t\tcurLen += 1;\n\t\t\t} else {\n\t\t\t\tif(i-position[index] <= curLen) {\n\t\t\t\t\tcurLen = i-position[index];\n\t\t\t\t} else {\n\t\t\t\t\tcurLen += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tposition[index] = i;\n\t\t\t\n\t\t\tif(curLen > maxLen)\n\t\t\t\tmaxLen = curLen;\n\t\t}\n\t\t\n\t\treturn maxLen;\n\t}\n}\n```\n\n## 49 丑数\n\n### 题目描述\n\n把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。\n\n### 题解\n\n```java\npublic class Solution {\n    public int GetUglyNumber_Solution(int index) {\n    \tif(index <= 6)\n    \t\treturn index;\n    \t\n    \tint[] ugly = new int[index];\n    \tugly[0] = 1;\n    \t\n    \tint t2=0, t3=0, t5=0;\n    \t\n    \tfor(int i = 1; i < index; i++) {\n    \t\tugly[i] = Math.min(ugly[t2]*2, Math.min(ugly[t3]*3, ugly[t5]*5));\n    \t\twhile(ugly[t2] * 2 <= ugly[i])\n    \t\t\tt2++;\n    \t\twhile(ugly[t3] * 3 <= ugly[i])\n    \t\t\tt3++;\n    \t\twhile(ugly[t5] * 5 <= ugly[i])\n    \t\t\tt5++;\n    \t}\n        return ugly[ugly.length-1];\n    }\n}\n```\n\n## 50.1 第一个只出现一次的字符\n\n### 题目描述\n\n在一个字符串(0<=字符串长度<=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.\n\n### 题解\n\n```java\nimport java.util.HashMap;\n\npublic class Solution {\n    public int FirstNotRepeatingChar(String str) {\n    \tif(str == null)\n    \t\treturn -1;\n    \t\n        HashMap<Character, Integer> map = new HashMap<>();\n        int index = -1;\n        \n        for(int i = 0; i < str.length(); i++) {\n        \tchar curr = str.charAt(i);\n        \tif(!map.containsKey(curr)) {\n        \t\tmap.put(curr, 1);\n        \t} else {\n        \t\tint value = map.get(curr);\n        \t\tmap.put(curr, ++value);\n        \t}\n        }\n        \n        for(int i = 0; i < str.length(); i++) {\n        \tchar curr = str.charAt(i);\n        \tif(map.get(curr) == 1) {\n        \t\tindex = i;\n        \t\tbreak;\n        \t}\n        }\n        return index;\n    }\n}\n```\n\n## 50.2 字符流中第一个不重复的字符\n\n### 题目描述\n\n请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符\"go\"时，第一个只出现一次的字符是\"g\"。当从该字符流中读出前六个字符“google\"时，第一个只出现一次的字符是\"l\"。\n\n### 题解\n\n```java\npublic class Solution {\n\tprivate int[] map = new int[256];\n\tprivate int index = 0;\n\t\n\tpublic Solution() {\n\t\tfor(int i = 0; i < map.length; i++) {\n\t\t\tmap[i] = -1;\t//-1代表从未出现过\n\t\t}\n\t}\n\t\n    //Insert one char from stringstream\n    public void Insert(char ch) {\n        if(map[ch] == -1) {\n        \tmap[ch] = index;\t//从未出现过，将它的下标赋值给它\n        } else {\n        \tmap[ch] = -2;\t\t//出现过，则值为-2\n        }\n        index++;\n    }\n  //return the first appearence once char in current stringstream\n    public char FirstAppearingOnce() {\n    \tchar result = '#';\n    \tint minIndex = Integer.MAX_VALUE;\n    \tfor(int i = 0; i < map.length; i++) {\n    \t\tif(map[i] >= 0 && map[i] < minIndex) {\n    \t\t\tminIndex = map[i];\n    \t\t\tresult = (char)i;\n    \t\t}\n    \t}\n    \treturn result;\n    }\n}\n```\n\n## 51 数组中的逆序对\n\n### 题目描述\n\n在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007\n\n### 题解\n\n统计逆序对的过程：先把数组分隔成子数组，统计出子数组内部的逆序对的数目，然后再统计出两个相邻子数组之间的逆序对的数目。在统计逆序对的过程中，还需要对数组进行归并排序，而计算逆序对数目其实就是在进行归并排序的时候完成的。\n\n```java\npublic class Solution {\n\tprivate long cnt = 0;\n\tprivate int[] tmp;\n\t\n    public int InversePairs(int [] array) {\n    \ttmp = new int[array.length];\n        if(array == null || array.length <= 0) {\n        \treturn -1;\n        }\n        \n        mergeSort(array, 0, array.length-1);\n        return (int) (cnt % 1000000007);\n    }\n    \n    private void mergeSort(int[] a, int lo, int hi) {\n    \tif(hi <= lo)\n    \t\treturn;\n    \tint m = lo + (hi - lo) / 2;\n    \t\n    \tmergeSort(a, lo, m);\n    \tmergeSort(a, m+1, hi);\n    \tmerge(a, lo, m, hi);\n    }\n    \n    private void merge(int[] a, int lo, int m, int hi) {\n    \tint i = lo, j = m+1, k = lo;\n    \twhile(k <= hi) {\n    \t\tif(i > m) {\n    \t\t\ttmp[k] = a[j++];\n    \t\t} else if(j > hi) {\n    \t\t\ttmp[k] = a[i++];\n    \t\t} else if(a[i] < a[j]) {\n    \t\t\ttmp[k] = a[i++];\n    \t\t} else {\n    \t\t\ttmp[k] = a[j++];\n    \t\t\tcnt += m - i + 1;\n    \t\t}\n    \t\tk++;\n    \t}\n    \tfor(k = lo; k <= hi; k++) {\n    \t\ta[k] = tmp[k];\n    \t}\n    }\n}\n```\n\n\n## 52 两个链表的第一个公共结点\n\n### 题目描述\n\n输入两个链表，找出它们的第一个公共结点。\n\n```\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}\n```\n\n### 题解\n\n此题大体有两种思路：\n\n1、如果从后往前遍历两条链表，那么最后一个相同的节点就是我们要找的节点。这种思路要解决的问题在于链表是单向链表，该怎么逆序遍历链表。\n\n2、如果从前往后遍历两条链表，那么第一个相同的节点就是我们要找的节点。这种思路要解决的问题在于如果两条链表的长度不同，便无法同时到达第一个公共节点，进而也就无法比较是否相等。\n\n#### 思路一：以空间换时间\n\n将两个链表分别装到两个栈中，每次取出链表尾部的一个节点判断是否相等，最后一个相等的节点即为两个链表的第一个公共节点。\n\n```java\npublic class Solution {\n    public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) {\n    \tif(pHead1 == null || pHead2 == null)\n    \t\treturn null;\n    \t\n    \tStack<ListNode> stack1 = new Stack<>();\n    \tStack<ListNode> stack2 = new Stack<>();\n    \tListNode h1 = pHead1;\n    \tListNode h2 = pHead2;\n    \tListNode common = null;\n    \twhile(h1!=null)\n    \t{\n    \t\tstack1.push(h1);\n    \t\th1 = h1.next;\n    \t}\n    \twhile(h2 != null) {\n    \t\tstack2.push(h2);\n    \t\th2 = h2.next;\n    \t}\n    \twhile(!stack1.empty() && !stack2.empty()) {\n    \t\tListNode node1 = stack1.pop();\n    \t\tListNode node2 = stack2.pop();\n    \t\tif(node1 == node2) {\n    \t\t\tcommon = node1;\n    \t\t}\n    \t}\n    \treturn common;\n    }\n}\n```\n\n#### 思路二：进一步优化\n\n上一种思路需要两个栈作为辅助空间，其实完全可以不用辅助空间，先分别遍历两个链表并记录他们的长度，长链表先走几步以此和短链表在同一起点出发，之后便可以同时遍历直至找出相同的节点。\n\n```java\npublic class Solution {\n    public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) {\n    \tif(pHead1 == null || pHead2 == null)\n    \t\treturn null;\n    \t\n    \tint len1 = 0;\n    \tint len2 = 0;\n    \tint diff;\t\t\t\t//两条链表的长度差\n    \tListNode listLong;\t\t//标识链表的长短\n    \tListNode listShort;\n    \tListNode h1 = pHead1;\t//用于遍历的节点\n    \tListNode h2 = pHead2;\n    \t\n    \twhile(h1!=null)\n    \t{\n    \t\tlen1++;\n    \t\th1 = h1.next;\n    \t}\n    \twhile(h2 != null) {\n    \t\tlen2++;\n    \t\th2 = h2.next;\n    \t}\n    \tif(len1 > len2) {\n    \t\tlistLong = pHead1;\n    \t\tlistShort = pHead2;\n    \t\tdiff = len1 - len2;\n    \t} else {\n    \t\tlistLong = pHead2;\n    \t\tlistShort = pHead1;\n    \t\tdiff = len2 - len1;\n    \t}\n    \t\n    \tfor(int i = 0; i < diff; i++) {\n    \t\tlistLong = listLong.next;\n    \t}\n    \t\n    \twhile(listLong != null && listShort != null) {\n    \t\tif(listLong == listShort)\n    \t\t\treturn listLong;\n    \t\tlistLong = listLong.next;\n    \t\tlistShort = listShort.next;\n    \t}\n    \t\n    \treturn null;\n    }\n}\n```\n\n## 53.1 数字在排序数组中出现的次数\n\n### 题目描述\n\n统计一个数字在排序数组中出现的次数。\n\n### 题解\n\n最直观的做法是顺序扫描，时间复杂度为O(n)，不是最优解。由于输入的数组是排序的，那么就可以用二分查找的思路，找到第一个要查找的数字和最后一个要查找的数字，其坐标差即为该数字出现的次数。此时时间复杂度为O(logn)。\n\n```java\npublic class Solution {\n    public int GetNumberOfK(int [] array , int k) {\n        if(array ==  null || array.length <= 0)\n        \treturn 0;\n        int start = getFirstK(array, k);\n        int end = getLastK(array, k);\n        int num = 0;\n        if(start != -1 && end != -1) {\n        \tnum = end - start + 1;\n        }\n        return num;\n    }\n    \n    public int getFirstK(int[] array, int k) {\n    \tint lo = 0;\n    \tint hi = array.length - 1;\n    \tint middle;\n    \twhile(lo <= hi) {\n    \t\tmiddle = lo + (hi - lo) / 2;\n    \t\tif(array[middle] < k) {\n    \t\t\tlo = middle + 1;\n    \t\t} else if(array[middle] > k) {\n    \t\t\thi = middle - 1;\n    \t\t} else {\n    \t\t\tif(middle - 1 >= 0 && array[middle - 1] == k) {\n    \t\t\t\t hi = middle - 1;\n    \t\t\t} else {\n    \t\t\t\treturn middle;\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn -1;\n    }\n    \n    public int getLastK(int[] array, int k) {\n    \tint lo = 0;\n    \tint hi = array.length - 1;\n    \tint middle;\n    \twhile(lo <= hi) {\n    \t\tmiddle = lo + (hi - lo) / 2;\n    \t\tif(array[middle] < k) {\n    \t\t\tlo = middle + 1;\n    \t\t} else if(array[middle] > k) {\n    \t\t\thi = middle - 1;\n    \t\t} else {\n    \t\t\tif(middle + 1 < array.length && array[middle + 1] == k) {\n    \t\t\t\t lo = middle + 1;\n    \t\t\t} else {\n    \t\t\t\treturn middle;\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn -1;\n    }\n}\n```\n\n\n## 53.2 0至n-1中缺失的数字\n\n### 题目描述\n\n在范围0~n-1内的n个数字中有且只有一个数字不在长度为n-1的递增排序数组（数字唯一）中，请找出这个数字。例如，{1,2,3,4}中少了0，{0,1,2,3}中少了4，{0,1,3,4}中少了2。\n\n### 题解\n\n用二分查找法找到第一个数字与下标不同的元素。\n\n```java\npublic class Solution {\n    public int getMissingNumber(int[] array) {\n        if(array ==  null || array.length <= 0)\n        \treturn -1;\n    \tint lo = 0;\n    \tint hi = array.length - 1;\n    \tint middle;\n    \twhile(lo <= hi) {\n    \t\tmiddle = lo + (hi - lo) / 2;\n    \t\tif(array[middle] == middle) {\n    \t\t\tlo = middle + 1;\n    \t\t} else {\n    \t\t\tif(middle - 1 >= 0 && array[middle - 1] != middle - 1) {\n    \t\t\t\t hi = middle - 1;\n    \t\t\t} else {\n    \t\t\t\treturn middle;\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn array.length;\n    }\n}\n```\n\n## 53.3 数组中数值和下标相等的元素\n\n### 题目描述\n\n假设一个单调递增的数组里的每个元素都是整数并且是唯一的。请编写实现一个函数，找出数组中任意一个数值等于其下标的元素。\n\n### 题解\n\n由于每个数都是唯一的，如果第i个数字的值大于i，那么它右边的数字都大于对应的下标；如果第i个数字的值小于i，那么它左边的数字都小于对应的下标。\n\n```java\npublic class Solution {\n    public int IntegerIdenticalToIndex(int[] array) {\n        if(array ==  null || array.length <= 0)\n        \treturn -1;\n    \tint lo = 0;\n    \tint hi = array.length - 1;\n    \tint middle;\n    \twhile(lo <= hi) {\n    \t\tmiddle = lo + (hi - lo) / 2;\n    \t\tif(array[middle] > middle) {\n    \t\t\thi = middle - 1;\n    \t\t} else if(array[middle] < middle) {\n    \t\t\tlo = middle + 1;\n    \t\t} else {\n    \t\t\tif(middle - 1 >= 0 && array[middle - 1] == middle - 1) {\n\t   \t\t\t\t hi = middle - 1;\n\t   \t\t\t} else {\n\t   \t\t\t\treturn middle;\n\t   \t\t\t}\n    \t\t}\n    \t}\n    \treturn -1;\n    }\n}\n```\n\n## 54 二叉搜索树的第k个结点\n\n### 题目描述\n\n给定一棵二叉搜索树，请找出其中的第k小的结点。例如，（5，3，7，2，4，6，8）中，按结点数值大小顺序第三小结点的值为4。\n\n```\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n    }\n}\n```\n\n### 题解\n\n```java\npublic class Solution {\n\tprivate int cnt;\n\tprivate TreeNode target;\n\t\n    TreeNode KthNode(TreeNode pRoot, int k) {\n        if(pRoot == null || k <= 0)\n        \treturn null;\n        KthNodeCore(pRoot, k);\n        return target;\n    }\n    \n    void KthNodeCore(TreeNode pRoot, int k) {\n    \tif(pRoot == null || target != null) {\n    \t\treturn;\n    \t}\n    \tKthNodeCore(pRoot.left, k);\n    \tcnt++;\n    \tif(cnt == k)\n    \t\ttarget = pRoot;\n    \tKthNodeCore(pRoot.right, k);\n    }\n}\n```\n\n## 55.1 二叉树的深度\n\n### 题目描述\n\n输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。\n\n```\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n    }\n}\n```\n\n### 题解\n\n```java\npublic class Solution {\n    public int TreeDepth(TreeNode root) {\n        if(root == null)\n            return 0;\n        int left = TreeDepth(root.left);\n        int right = TreeDepth(root.right);\n        return left > right ? (left+1):(right+1);\n    }\n}\n```\n\n## 55.2 平衡二叉树\n\n### 题目描述\n\n输入一棵二叉树，判断该二叉树是否是平衡二叉树。\n\n### 题解\n\n```java\npublic class Solution {\n    public boolean IsBalanced_Solution(TreeNode root) {\n        return IsBalanced(root) != -1;\n    }\n    \n    public int IsBalanced(TreeNode root) {\n    \tif(root == null)\n    \t\treturn 0;\n    \tint left = IsBalanced(root.left);\n    \tif(left == -1)\n    \t\treturn left;\n    \tint right = IsBalanced(root.right);\n    \tif(right == -1)\n    \t\treturn right;\n    \treturn Math.abs(left-right) > 1 ? -1 : 1+Math.max(left,right);\n    }\n}\n```\n\n## 56.1 数组中只出现一次的数字\n\n### 题目描述\n\n一个整型数组里除了两个数字之外，其他的数字都出现了偶数次。请写程序找出这两个只出现一次的数字。\n\n### 题解\n\n因为任何一个数字异或它自己都等于0，而0异或任何一个数字都等于其本身，所以可以将数组中的所有数字都异或，例如对于含有一个数字只出现一次的数组{3,3,4,4,6}：\n```\n    3 ^ 3 ^ 4 ^ 4 ^ 6\n->  0 ^ 0 ^ 6\n->  6\n```\n而在此题中，数组里有两个数字只出现了一次，所以从头到尾异或数组中的每个数字会得到这两个数字的异或结果，由于这两个数字肯定不同，所以异或结果至少会包含一个1，我们以最右侧的1为标准将这两个数分到两个子数组中，于此同时这一位为1或0的出现两次的数字也会分别到这两个子数组中，然后再对两个子数组运用最上面的思路。\n\n在这里，diff &= -diff可以得到只有最右侧为1的数，以此作为分割标准。（在计算机中，负数以其正值的补码形式表达，补码=反码+1）\n\n```java\npublic class Solution {\n    public void FindNumsAppearOnce(int[] nums, int num1[], int num2[]) {\n        int diff = 0;\n        for (int num : nums)\n            diff ^= num;\n        diff &= -diff;\n        for (int num : nums) {\n            if ((num & diff) == 0)\n                num1[0] ^= num;\n            else\n                num2[0] ^= num;\n        }\n    }\n}\n```\n\n## 56.2 数组中唯一只出现一次的数字\n\n### 题目描述\n\n在一个数组中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。\n\n### 题解\n\n把数组中所有数字的二进制表示的每一位都加起来，如果某一位的和能被3整除，那么那个只出现一次的数字二进制表示中对应的那一位是0，否则就是1。\n\n```java\npublic class NumberAppearingOnce {\n\tpublic int solution(int numbers[]) {\n\t\tif(numbers == null || numbers.length == 0)\n\t\t\treturn -1;\n\t\tint[] bitSum = new int[32];\n\t\tfor(int i = 0; i < numbers.length; i++) {\n\t\t\tint bitMask = 1;\n\t\t\tfor(int j = 31; j >= 0; j--) {\n\t\t\t\tint bit = numbers[i] & bitMask;\n\t\t\t\tif(bit != 0)\n\t\t\t\t\tbitSum[j] += 1;\n\t\t\t\tbitMask = bitMask << 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint result = 0;\n\t\tfor(int i = 0; i < 32; i++) {\n\t\t\tresult = result << 1;\n\t\t\tresult += bitSum[i] % 3;\n\t\t}\n\t\treturn result;\n\t}\n}\n```\n\n## 57.1 和为s的两个数字\n\n### 题目描述\n\n输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。\n\n### 题解\n\n定义两个指针，一个指向数组头，一个指向数组末尾，如果指针指向的这两个数字相加小于S，则将头指针向后移动一位，否则将尾指针向前移动一位。\n\n```java\nimport java.util.ArrayList;\n\npublic class Solution {\n    public ArrayList<Integer> FindNumbersWithSum(int [] array,int sum) {\n        ArrayList<Integer> result = new ArrayList<>();\n    \tif(array == null || array.length == 0)\n    \t\treturn result;\n    \t\n        int lo = 0;\n        int hi = array.length - 1;\n        while(lo < hi) {\n        \tint curSum = array[lo] + array[hi];\n        \tif(curSum < sum) {\n        \t\t lo++;\n        \t} else if(curSum > sum) {\n        \t\thi--;\n        \t} else {\n        \t\tresult.add(array[lo]);\n        \t\tresult.add(array[hi]);\n        \t\tbreak;\n        \t}\n        }\n        return result;\n    }\n}\n```\n\n## 57.2 和为s的连续正数序列\n\n### 题目描述\n\n小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!\n\n### 题解\n\n首先把lo和hi分别初始化为1和2（因为连续序列为正，且至少含有两个数字），如果lo和hi之间的数字相加大于S，将lo加一，而如果lo和hi之间的数字相加小于S，则将hi加一。\n\n```java\nimport java.util.ArrayList;\n\npublic class Solution {\n    public ArrayList<ArrayList<Integer> > FindContinuousSequence(int sum) {\n        ArrayList<ArrayList<Integer>> listAll = new ArrayList<>();\n        if(sum <= 0)\n        \treturn listAll;\n        \n        int lo = 1;\n        int hi = 2;\n        int middle = sum / 2;\n        int curSum = lo + hi;\n        while(lo <= middle) {\n        \tif(curSum < sum) {\n        \t\thi++;\n        \t\tcurSum += hi;\n        \t} else if(curSum > sum) {\n        \t\tcurSum -= lo;\n        \t\tlo++;\n        \t} else {\n        \t\tArrayList<Integer> list = new ArrayList<>();\n        \t\tint i = lo;\n        \t\twhile(i <= hi)\n        \t\t\tlist.add(i++);\n        \t\tlistAll.add(list);\n        \t\tcurSum += ++hi;\n        \t}\n        }\n        return listAll;\n    }\n}\n```\n\n## 58.1 翻转单词序列\n\n### 题目描述\n\n牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？\n\n### 题解\n\n进行两次翻转：首先将整体进行翻转，得到`.tneduts a ma I`，再将每个单词进行局部翻转，得到`student. a am I`即为答案。\n\n```java\npublic class Solution {\n    public String ReverseSentence(String str) {\n    \tif(str == null)\n    \t\treturn null;\n    \telse if(str == \"\")\n    \t\treturn \"\";\n        char[] data = str.toCharArray();\n        int i = 0, j = data.length-1;\n        reverse(data, i, j);\n        j = 0;\n        while(i < data.length) {\n        \tif(j == data.length || data[j] == ' ') {\n        \t\treverse(data, i, j-1);\n        \t\ti = j + 1;\n        \t}\n        \tj++;\n        }\n        return new String(data);\n    }\n    \n    private void reverse(char[] data, int i, int j) {\n    \twhile(i <= j) {\n    \t\tchar temp = data[i];\n    \t\tdata[i] = data[j];\n    \t\tdata[j] = temp;\n    \t\ti++;\n    \t\tj--;\n    \t}\n    }\n}\n```\n\n## 58.2 左旋转字符串\n\n### 题目描述\n\n汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！\n\n### 题解\n\n```java\npublic class Solution {\n    public String LeftRotateString(String str,int n) {\n    \tif(str == null)\n    \t\treturn null;\n    \telse if(str == \"\")\n    \t\treturn \"\";\n    \telse if(n >= str.length())\n    \t\treturn str;\n    \t\n        char[] data = str.toCharArray();\n        reverse(data, 0, n-1);\n        reverse(data, n, data.length-1);\n        reverse(data, 0, data.length-1);\n        return new String(data);\n    }\n    \n    private void reverse(char[] data, int i, int j) {\n    \twhile(i <= j) {\n    \t\tchar temp = data[i];\n    \t\tdata[i] = data[j];\n    \t\tdata[j] = temp;\n    \t\ti++;\n    \t\tj--;\n    \t}\n    }\n}\n```\n\n## 60 n个骰子的点数\n\n### 题目描述\n\n把 n 个骰子仍在地上，求点数和为 s 的概率。\n\n### 题解\n\n我们以n表示要扔的骰子数，s为所有骰子的点数之和，f(n, s)表示扔n个骰子时所有骰子的点数之和为s的排列情况总数。例如，n=2，s=5时，f(n, s) = f(2, 5) = 4 （4种情况即`{1, 4}, {4, 1}, {2, 3}, {3, 2}`）\n\n因为一个骰子有六个点数，那么第n个骰子可能出现1到6的点数，当第n个骰子点数为1的话，f(n,s) = f(n-1, s-1)，当第n个骰子点数为2的话，f(n,s) = f(n-1, s-2)，…，依次类推。\n\n由以上分析我们便可以得到状态转移方程：`f(n,s)=f(n-1,s-1)+f(n-1,s-2)+f(n-1,s-3)+f(n-1,s-4)+f(n-1,s-5)+f(n-1,s-6)`\n\n#### 使用递归\n\n得到状态方程后，最直观的就是使用递归求解。点数和的最小值为骰子数n，而最大值为6 * n。\n\n```java\npublic class Solution {\n\tpublic List<Map.Entry<Integer, Double>> dicesSum(int n) {\n\t\tList<Map.Entry<Integer, Double>> result = new ArrayList<>();\n\t\tint minSum = n;\n\t\tint maxSum = 6 * n;\n\t\tdouble totalCase = Math.pow(6, n);\n\t\tfor(int i = minSum; i <= maxSum; i++) {\n\t\t\tresult.add(new AbstractMap.SimpleEntry<>(i, dicesSumCore(n, i) / totalCase));\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tprivate int dicesSumCore(int n, int sum){\n\t    if(n<1||sum<n||sum>6*n){\n\t        return 0;\n\t    }\n\t    if(n==1){\n\t        return  1;\n\t    }\n\t    int resCount=0;\n\t    resCount=dicesSumCore(n-1,sum-1)+dicesSumCore(n-1,sum-2)+\n\t    \t\tdicesSumCore(n-1,sum-3)+dicesSumCore(n-1,sum-4)+\n\t    \t\tdicesSumCore(n-1,sum-5)+dicesSumCore(n-1,sum-6);\n\t    return resCount;\n\t}\n}\n```\n\n#### 动态规划\n\n使用递归求解会产生大量重复的计算，所以使用动态规划更好。\n\n在以下代码中使用了一个二维数组dp[2][maxSum+1]，dp[0]和dp[1]表示当前状态和前一个状态（由状态转移方程`f(n,s)=f(n-1,s-1)+f(n-1,s-2)+f(n-1,s-3)+f(n-1,s-4)+f(n-1,s-5)+f(n-1,s-6)`可以看出当前状态仅依赖前一个状态，所以只用两个一维数组即可），而这两个状态的数组使用flag变量进行旋转。\n\n```java\npublic class Solution {\n\tpublic List<Map.Entry<Integer, Double>> dicesSum(int n) {\n\t\tList<Map.Entry<Integer, Double>> result = new ArrayList<>();\n\t\tif(n < 1)\n\t\t\treturn result;\n\t\tint face = 6;\n\t\tint minSum = n;\n\t\tint maxSum = face * n;\n\t\tint flag = 1;\n\t\tdouble totalCase = Math.pow(face, n);    //总共有6的n次方种排列情况\n\t\tlong[][] dp = new long[2][maxSum+1];\t //dp[flag][j]表示当前状态下产生点数和为j的排列次数\n\t\t\n\t        //设置初始状态，即f(1,1) = f(1,2) = f(1,3) = f(1,4) = f(1,5) = f(1,6) = 1\n\t\tfor(int i = 1; i <= face; i++)\n\t\t\tdp[0][i] = 1;\n\t\t\n\t\t//i表示当前扔出的骰子数，骰子数为1的情况在上面已经有过初始化\n\t\tfor (int i = 2; i <= n; i++, flag = 1 - flag) {\n\t\t\t//将表示当前状态的数组清零\n\t\t\tfor (int j = 0; j <= maxSum; j++)\n\t            dp[flag][j] = 0;\n\t\t\t\n\t\t\tfor (int j = i; j <= maxSum; j++)\n\t            for (int k = 1; k <= face && k <= j; k++)\n\t\t    \t//此处即体现出状态转移方程\n\t                dp[flag][j] += dp[1 - flag][j - k];\n\t\t}\n\t\t\n\t\tfor(int i = minSum; i <= maxSum; i++) {\n\t\t\tresult.add(new AbstractMap.SimpleEntry<>(i, dp[1 - flag][i] / totalCase));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n}\n```\n\n## 61 扑克牌顺子\n\n### 题目描述\n\n从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。大小王可看成任意数字。\n\n### 题解\n\n把大小王看成0，首先把数组排序，其次统计数组中0的个数，最后统计排序后的数组中相邻数字之间的空缺总数。如果空缺总数小于或者等于0的个数，那么这个数组就是连续的。\n\n```java\nimport java.util.Arrays;\n\npublic class Solution {\n    public boolean isContinuous(int [] numbers) {\n    \tif(numbers == null || numbers.length == 0)\n    \t\treturn false;\n    \t\n    \tint numOfZero = 0;\n    \tint numOfGap = 0;\n    \t\n    \tArrays.sort(numbers);\n    \t\n    \tfor(int i = 0; i < numbers.length && numbers[i] == 0; i++) {\n    \t\tnumOfZero++;\n    \t}\n    \t\n    \tfor(int i = numOfZero+1; i < numbers.length; i++) {\n    \t\tif(numbers[i] == numbers[i-1])\n    \t\t\treturn false;\n    \t\tnumOfGap += numbers[i] - numbers[i-1] - 1;\n    \t}\n    \treturn numOfZero >= numOfGap ? true : false;\n    }\n}\n```\n\n## 62 圆圈中最后剩下的数字\n\n### 题目描述\n\n首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0...m-1报数....这样下去....直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)\n\n### 题解\n\n#### 环形链表法\n\n采用链表来模拟整个过程。\n\n```java\nimport java.util.LinkedList;\n\npublic class Solution {\n    public int LastRemaining_Solution(int n, int m) {\n        if(n < 1 || m < 1)\n    \t\treturn -1;\n    \t\n        LinkedList<Integer> list = new LinkedList<>();\n        int index = 0;\n        \n        for(int i = 0; i < n; i++) {\n        \tlist.add(i);\n        }\n        while(list.size() > 1) {\n        \tindex = (index + m - 1) % list.size();\n        \tlist.remove(index);\n        }\n        return list.get(0);\n    }\n}\n```\n\n#### 公式法\n\n我们可以根据此公式使用递归或者循环来做：`f(n,m) = [f(n-1,m) + m] % n`。\n\n```java\npublic class Solution {\n\tpublic int LastRemaining_Solution(int n, int m) {\n\t    if (n == 0)\n\t        return -1;\n\t    if (n == 1)\n\t        return 0;\n\t    return (LastRemaining_Solution(n - 1, m) + m) % n;\n\t}\n}\n```\n\n\n## 63 股票的最大利润\n\n### 题目描述\n\n假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可获得的最大利润是多少？\n\n### 题解\n\n```java\npublic class MaximalProfit {\n    public int maxProfit(int[] prices) {\n        if(prices == null || prices.length == 0)\n        \treturn 0;\n        int minPrice = prices[0];\n        int maxProfit = 0;\n        for(int i = 1; i < prices.length; i++) {\n        \tif(prices[i] < minPrice)\n        \t\tminPrice = prices[i];\n        \tint currProfit = prices[i] - minPrice;\n        \tif(currProfit > maxProfit)\n        \t\tmaxProfit = currProfit;\n        }\n        return maxProfit;\n   }\n}\n```\n\n## 64 求1+2+···+n\n\n### 题目描述\n\n### 题解\n\n```java\npublic class Solution {\n    public int Sum_Solution(int n) {\n        int sum = n;\n    \tboolean flag = (sum > 0) && ((sum += Sum_Solution(--n)) > 0);\n    \treturn sum;\n    }\n}\n```\n\n## 65 不用加减乘除做加法\n\n### 题目描述\n\n写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。\n\n### 题解\n\n十进制加法三步走：\n1、只做各位相加不进位\n2、求出进位值\n3、把前面两个结果加起来\n\n而对于二进制也正是如此。使用异或完成相加的操作，而使用位与运算再左移完成进位的操作。\n\n```java\npublic class Solution {\n    public int Add(int num1,int num2) {\n        int sum, carry;\n    \tdo {\n    \t\t sum = num1 ^ num2;\n    \t\t carry = (num1 & num2) << 1;\n    \t\t num1 = sum;\n    \t\t num2 = carry;\n    \t} while(carry != 0);\n    \treturn sum;\n    }\n}\n```\n\n### 拓展\n\n不使用新变量交换两个变量的值:\n\n|基于加减法|基于异或运算|\n|--|--|\n|a = a + b| a = a ^ b|\n|b = a - b| a = a ^ b|\n|a = a - b| a = a ^ b|\n\n## 66 构建乘积数组\n\n### 题目描述\n\n给定一个数组A[0,1,...,n-1],请构建一个数组B[0,1,...,n-1],其中B中的元素B[i]=A[0] * A[1] * ... * A[i-1] * A[i+1] * ... * A[n-1]。不能使用除法。\n\n### 题解\n\n```java\npublic class Solution {\n    public int[] multiply(int[] A) {\n    \tint[] B = new int[A.length];\n    \tif(A == null || A.length == 0)\n    \t\treturn B;\n    \t\n    \tB[0] = 1;\n    \tfor(int i = 1; i < A.length; i++) {\n    \t\tB[i] = B[i-1] * A[i-1];\n    \t}\n    \t\n    \tint temp = 1;\n    \tfor(int i = B.length - 2; i >= 0; i--){\n    \t\ttemp = A[i+1] * temp;\n    \t\tB[i] = temp * B[i];\n    \t}\n    \treturn B;\n    }\n}\n```\n\n## 67 把字符串转换成整数\n\n### 题目描述\n\n将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。\n\n### 题解\n\n```java\npublic class Solution {\n    public int StrToInt(String str) {\n        if(str == null || str.length() == 0)\n        \treturn 0;\n        boolean neg = str.charAt(0) == '-';\n        int num = 0;\n        for(int i = 0; i < str.length(); i++) {\n        \tchar c = str.charAt(i);\n        \tif(i == 0 && (c == '+' || c == '-')) continue;\n        \tif(c < '0' || c > '9') return 0;\n        \tint temp = num;\n        \tnum = num * 10 + (c - '0');\n            if((num - c + '0') / 10 != temp) return 0;\n        }\n        return neg ? -num : num;\n    }\n}\n```\n\n## 68.1 二叉查找树中两个节点的最低公共祖先\n\n### 题目描述\n\n找到二叉查找树中两个节点的最低公共祖先\n\n```\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n```\n\n### 题解\n\n从根节点开始向下查找直到找到满足`root.val >= p.val`且`root.val <= q.val`的节点。\n\n```java\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    \twhile(root != null) {\n    \t\tif(root.val > p.val && root.val > q.val)\n    \t\t\troot = root.left;\n\t        else if(root.val < p.val && root.val < q.val)\n\t        \troot = root.right;\n\t        else \n\t        \treturn root;\n    \t}\n    \treturn null;\n    }\n}\n```\n\n## 68.2 普通二叉树中两个节点的最低公共祖先\n\n### 题目描述\n\n找到普通二叉树中两个节点的最低公共祖先\n\n```\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n```\n\n### 题解\n\n深度优先搜索的思想：\n\n```java\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    \tif(root == null || root.val == p.val || root.val == q.val)\n    \t\treturn root;\n    \t\n    \tTreeNode left = lowestCommonAncestor(root.left, p, q);\n    \tTreeNode right = lowestCommonAncestor(root.right, p, q);\n    \treturn left == null ? right : right == null ? left : root;\n    }\n}\n```","tags":["算法"],"categories":["算法"]},{"title":"MySQL查询性能优化","url":"/2019/01/28/MySQL查询性能优化/","content":"# 优化数据访问\n\n## 减少请求的数据量\n\n- 只返回必要的行：使用`LIMIT`语句来限制返回的数据。\n- 只返回必要的列：最好不要使用`SELECT *`语句。\n- 缓存重复查询的数据。\n\n<!--more-->\n\n## 减少服务器端扫描的行数\n\n最有效的方式是使用索引来覆盖查询。\n\n# 重构查询方式\n\n## 切分查询\n\n一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。因此可以将大查询切分成小查询，每个查询功能完全一样，只完成一小部分，每次只返回一小部分查询结果。\n\n## 分解关联查询\n\n可以对每一个表进行一次单表查询，然后将结果在应用程序中进行关联。这么做有如下优势：\n- 让缓存的效率更高。对于关联查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。\n- 将查询分解后，执行单个查询可以减少锁的竞争。\n- 分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。\n\n# 查询执行\n\n![](http://blog.default.nanwulife.com/201759140033188.jpg)\n\n1. 客户端发送一条查询给服务器。\n2. 服务器先检查查询缓存，如果命中了缓存，则立刻返回存储在缓存中的结果。否则进入下一阶段。\n3. 服务器端进行SQL解析、预处理再由优化器生成对应的执行计划。\n4. MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询。\n5. 将结果返回给客户端。\n\nMySQL解析器将使用MySQL语法规则验证和解析查询；预处理器则根据一些MySQL规则进一步检查解析树是否合法，例如检查数据表和数据列是否存在，之后会验证权限；查询优化器的作用是根据存储引擎提供的统计信息找出一个最优的执行计划。\n\n# 优化 Limit 分页\n\n\n在偏移量特别大的时候，例如可能是`LIMIT 1000, 20`这样的查询，这时MySQL需要查询10020条记录然后只返回最后20条，前面10000条记录都将被抛弃，这样的代价非常高。可以通过延迟关联和书签两个技巧进行优化。\n\n## 延迟关联\n\n优化此类分页查询的一个最简单的办法就是尽可能地使用索引覆盖扫描，而不是查询所有的列。然后根据需要做一次关联操作再返回所需的列。考虑下面的查询：\n\n```sql\nSELECT film_id, description FROM sakila.film ORDER BY title LIMIT 50, 5;\n```\n\n此时没有覆盖索引，因此要回表获取记录55条，而只返回最后5条1。这时候可以用延迟关联的技巧改写成如下：\n\n```sql\nSELECT film.film_id, film.description\nFROM sakila.film\n\tINNER JOIN(\n\t\tSELECT film_id FROM sakala.film\n\t\tORDER BY title LIMIT 50, 5\n\t) AS lim USING(film_id);\n```\n\n这时候子查询中能使用覆盖索引，因此在索引结构中就能获取到需要访问的记录而无需回表，之后再根据关联列回表查询需要的所有列。\n\n## 书签\n\n`LIMIT`和`OFFSET`的问题，其实是`OFFSET`的问题，它会导致MySQL扫描大量不需要的行然后再抛弃掉。如果可以使用书签记录上次取数据的位置，那么下次就可以直接从该书签记录的位置开始扫描，这样就可以避免使用`OFFSET`。例如，若需要按照租借记录做翻页，那么可以根据最新一条租借记录向后追溯，首先使用下面的查询获得第一组结果：\n\n```sql\nSELECT * FROM sakila.rental\nORDER BY rental_id DESC LIMIT 20;\n```\n\n会返回49到30的记录，那么下一页查询就可以从30这个点开始：\n\n```sql\nSELECT * FROM sakila.rental\nWHERE rental_id < 30\nORDER BY rental_id DESC LIMIT 20;\n```\n\n该技术的好处是无论翻页到多么后面，其性能都会很好。\n\n# 参考资料\n\n- 高性能 MySQL[M]. 电子工业出版社, 2013.\n- [CS-Notes](https://cyc2018.github.io/CS-Notes/#/notes/Java%20%E5%B9%B6%E5%8F%91?id=%E4%B8%83%E3%80%81juc-aqs)","tags":["MySQL"],"categories":["数据库","MySQL"]},{"title":"MySQL索引类型与优化","url":"/2019/01/28/MySQL索引类型与优化/","content":"\n\n# 索引的优点\n\n- 索引大大减少了服务器需要扫描的数据量\n- 索引可以帮助服务器避免排序、分组和临时表（临时表主要是在排序和分组过程中创建，因为不需要排序和分组，也就不需要创建临时表）\n- 索引可以将随机I/O变为顺序I/O（`B-Tree`索引是有序的，会将相邻的数据都存储在一起）\n\n<!--more-->\n\n# 索引的类型\n\n在MySQL中，索引是在存储引擎层而不是服务器层实现的，所以不同的存储引擎的索引类型和实现不同。\n\n## B-Tree索引\n\n大多数存储引擎都使用`B-Tree`作为默认索引类型，但实际在技术上往往使用的是`B+Tree`，例如InnoDB。`B-Tree`索引之能够加快访问数据的速度，是因为存储引擎不再需要进行全表扫描来获取需要的数据，取而代之的是从索引的根节点开始进行搜索。关于`B-Tree`和`B+Tree`的工作原理可以参考之前的一篇笔记：[常用查找算法之B/B+树](https://blog.csdn.net/qq_38283262/article/details/84330111)。\n\n`B-Tree`索引适用于全键值、键值范围或键前缀（最左前缀）查找。因为索引树中的节点是有序的，所以除了按值查找之外，索引还可以用于查询中的`ORDER BY`操作。\n\n`B-Tree`同样也有一些限制：\n- 如果不是按照索引的最左列开始查找，则无法使用索引。\n- 不能跳过索引中的列，否则只会使用跳过之前的索引列。\n- 如果查询中有某个列的范围查询，则其右边所有列都无法使用索引优化查找。\n\n## 哈希索引\n\n哈希索引基于哈希表实现，对于每一行数据，存储引擎都会对所有索引列计算一个哈希码并存储在索引中，同时在哈希表中保存指向每个数据行的指针。如果多个列的哈希值相同，索引会以链表的方式存放多个记录指针到同一个哈希条目中。哈希索引有如下限制：\n- 哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行。\n- 无法用于排序。\n- 不支持部分索引列匹配查找。\n- 不支持范围查询。\n- 哈希冲突。\n\nInnoDB引擎有一个特殊的功能叫做“自适应哈希索引”，当InnoDB注意到某些索引值被使用得非常频繁时，它会在内存中基于`B-Tree`索引之上再创建一个哈希索引，这样就让`B+Tree`索引具有哈希索引的一些优点，比如快速的哈希查找。\n\n## 全文索引\n\n全文索引是一种特殊类型的索引，它查找的是文本中的关键词，而不是直接比较索引中的值。全文索引使用倒排索引实现，它记录着关键词到其所在文档的映射。在相同的列上同时创建全文索引和基于值的`B-Tree`索引不会有冲突，全文索引适用于`MATCH AGAINST`操作，而不是普通的`WHERE`条件操作。\n\n## 空间数据索引\n\nMyISAM存储引擎支持空间数据索引（R-Tree），可以用作地理数据存储。空间索引会从所有维度来索引数据，查询时可以有效利用任意维度来组合查询。必须使用MySQL的GIS相关函数来维护数据。\n\n# 索引优化\n\n## 独立的列\n\n在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则MySQL无法使用索引。\n\n例如：`SELECT actor_id FROM sakila.actor WHERE actor_id + 1 = 5;`\n\n## 多列索引\n\n在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。例如下面的语句中，最好把`actor_id`和`film_id`设置为多列索引：\n\n```sql\nSELECT film_id, actor_id FROM sakila.film_actor\nWHERE actor_id = 1 AND film_id = 1;\n```\n\n## 索引列的顺序\n\n将选择性最强的索引列放在前面。索引的选择性是指不重复的索引值（基数）和记录总数的比值，选择性越高则查询效率也越高，因为选择性高的索引可以让MySQL在查找时过滤掉更多的行。\n\n## 前缀索引\n\n对于很长的字符串可以索引开始的部分字符，使得前缀的选择性接近于完整列的选择性。\n\n## 聚簇索引\n\n`B-Tree`索引类型都可以用在MyISAM和InnoDB上，但InnoDB有聚簇索引的特性而MyISAM没有。\n\n聚簇表示数据行和相邻的键值紧凑地存储在一起，因为无法同时把数据行存放在两个不同的地方，所以每张Innodb引擎表都只有一个聚簇索引。一般情况，聚簇索引就是主键索引（因为聚簇索引在有主键的情况下，默认指定主键为聚簇索引），而非聚簇索引都是二级索引。\n\n如果没有定义主键，InnoDB会选择一个唯一的非空索引代替。如果没有这样的索引，InnoDB会隐式定义一个主键来作为聚簇索引。采用聚簇索引，索引和其他列值存储在一起，因此数据访问比采用非聚簇索引（如MyISAM引擎）更快，节省了磁盘I/O资源。\n\n二级索引叶子节点保存的不是指向行的物理位置的指针，而是行的主键值。通过二级索引查找行，存储引擎需要找到二级索引的叶子节点获得对应的主键值，然后根据这个值去聚簇索引中查找到对应的行。这样虽然会让二级索引占用更多的空间，但换来的好处是InnoDB在移动行时减少了二级索引的维护工作。\n\nMyISAM没有聚簇索引的特性，主键索引和其它索引在结构上没有什么不同。\n\n![](http://blog.default.nanwulife.com/cluster.jpg)\n\n使用InnoDB存储引擎时应该尽可能地按主键顺序插入数据（可以使用`AUTO_INCREMENT`自增），最好避免随机的插入（例如使用UUID作为主键）。因为当主键的值是顺序的时，InnoDB会把每一条记录都存储在上一条记录的后面，当达到页的最大填充因子时（默认为15/16），下一条记录就会写入新的页中。而每次插入主键的值近似于随机时，新纪录根据值的大小要被插入到现有索引页的中间某个合适位置，此时页分裂会导致大量的数据移动并产生碎片，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销。\n\n## 覆盖索引\n\n如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为“覆盖索引”，此时不需要回表操作。其具有以下优点：\n- 索引条目通常远小于数据行大小，所以如果只需要读取索引，那MySQL就会极大地减少数据访问量。\n- 因为索引是按照列值顺序存储的，所以对于I/O密集型的范围查询会比随机从磁盘读取每一行数据的I/O要少得多。\n- 一些存储引擎如MyISAM在内存中只缓存索引，数据则依赖于操作系统来缓存，因此要访问数据需要一次系统调用，比较费时。\n- 对于InnoDB引擎，若二级索引能够覆盖查询，则可以避免对主键索引的二次查询。\n\n## 使用索引扫描来排序\n\nMySQL有两种方式可以生成有序的结果：通过排序操作或者按索引顺序扫描。如果`EXPLAIN`出来的`type`列的值为`index`，则说明MySQL使用了索引扫描来做排序。\n\n只有当索引的列顺序和`ORDER BY`子句的顺序完全一致，并且所有列的排序方向（倒序或正序）都一样时，MySQL才能够使用索引来对结果做排序。如果查询需要关联多张表，则只有当`ORDER BY`子句引用的字段全部为第一个表时，才能使用索引做排序。`ORDER BY`子句和查找型查询的限制是一样的：需要满足索引的最左前缀的要求，否则MySQL都需要执行排序操作，而无法利用索引排序。\n\n# 参考资料\n\n- 高性能 MySQL[M]. 电子工业出版社, 2013.\n- [mysql的索引——innodb索引（1）聚簇索引和次级索引](https://my.oschina.net/u/1034481/blog/824094)\n- [为什么InnoDB表最好要有自增列做主键](https://segmentfault.com/q/1010000003856705)","tags":["MySQL","索引"],"categories":["数据库","MySQL"]},{"title":"MySQL常用数据类型","url":"/2019/01/28/MySQL常用数据类型/","content":"## 整型\n\n`TINYINT`, `SMALLINT`, `MEDIUMINT`, `INT`, `BIGINT`分别使用1，2，3，4，8字节的存储空间。\n\n可以使用`UNSIGNED`属性表示不允许负值以提高正数的上限，但有符号和无符号类型的存储空间和性能依旧一样。\n\nMySQL可以为整数类型指定宽度，如`INT(11)`，但它不会限制值的合法范围，只是规定了交互工具显示字符的个数。\n\n<!--more-->\n\n## 浮点数\n\n`FLOAT`和`DOUBLE`为浮点类型（浮点数），`DECIMAL`为高精度小数类型（定点数）。\n\nCPU原生支持浮点运算，但不支持对`DECIMAL`的运算，因此浮点运算会更快。但是浮点数会引起精度问题，像货币这样对精度敏感的数据，应该用`DECIMAL`来存储。\n\n浮点和定点都可以指定精度，例如`DECIMAL(18, 9)`表示总共18位，取9位存储小数部分，剩下9位存储整数部分。\n\n## 字符串\n\nMySQL主要有`VARCHAR`和`CHAR`两种字符串类型。\n\n`VARCHAR`类型是可变长的，它比定长类型更节省空间，因为它仅使用必要的空间。但是在执行UPDATE时可能会使行变得比原来长，当超出一个页所能容纳的大小时，就要执行额外的操作，MyISAM会将行拆成不同的片段存储，InnoDB则需要分裂页来使行放进页内。\n\n`CHAR`类型是定长的，总是根据定义的字符串长度分配足够的空间，并且在存储和检索时删除末尾的空格，而`VARCHAR`是会保留末尾的空格的。\n\n当字符串列的长度比平均长度大很多时、列的更新很少时，使用`VARCHAR`类型更好；对于定长的字符串如MD5、经常变更或者非常短的字符串（因为`VARCHAR`需要额外的1个或2个字节记录字符串长度）则使用`CHAR`类型更好。\n\n## 日期和时间\n\nMySQL提供两种相似的日期类型：`DATETIME`和`TIMESTAMP`。\n\n`DATETIME`能够保存从1001年到9999年的日期和时间，精度为秒。它把日期和时间封装到格式为`YYYYMMDDHHMMSS`的整数中，与时区无关，使用8个字节的存储空间。默认情况下，MySQL以一种可排序的、无歧义的格式显示，例如`2008-01-16 22:37:08`。\n\n`TIMESTAMP`保存从1970年1月1日午夜（格林威治时间）以来的秒数，使用4个字节，只能表示从1970年到2038年。这种类型的时间是和时区有关的，默认情况下，如果插入时没有指定`TIMESTAMP`列的值，MySQL则设置这个列的值为当前时间。\n\n应该尽量使用`TIMESTAMP`，因为它比`DATETIME`空间效率更高。","tags":["MySQL"],"categories":["数据库","MySQL"]},{"title":"数据库事务、锁与设计原理","url":"/2019/01/28/数据库事务、锁与设计原理/","content":"# 事务\n\n事务是指满足ACID特性的一组操作，它们要么完全地执行，要么完全地不执行。\n\n<!--more-->\n\n## ACID特性\n\n### 原子性（Atomicity）\n\n一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。\n\n### 一致性（Consistency）\n\n数据库总是从一个一致性的状态转换到另外一个一致性状态。事务开始和结束之间的中间状态不会被其他事务看到。\n\n### 隔离性（Isolation）\n\n一个事务所作的修改在最终提交前，对其它事务是不可见的。\n\n### 持久性（Durability）\n\n一旦事务提交，则其所作的修改就会永久保存到数据库中。即使系统崩溃，修改的数据也不会丢失。\n\n### 理解\n\n事务的ACID特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：\n- 只要满足一致性，事务的执行结果才是正确的。\n- 在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要满足原子性，就一定能满足一致性。\n- 在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还要满足隔离性，才能满足一致性。\n- 事务满足持久化是为了能应对数据库崩溃的情况。\n\n## 隔离级别\n\n在并发环境下需要关注事务的隔离性，SQL标准中定义了以下四种隔离级别。\n\n### 未提交读（READ UNCOMMITTED）\n\n事务中的修改即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，这也被称为脏读。\n\n### 提交读（READ COMMITTED）\n\n一个事务从开始直到提交之前，所做的任何修改对其它事务都是不可见的。\n\n这个级别有时候也叫做不可重复读，因为两次执行同样的查询，可能会得到不一样的结果。例如，T2读取一个数据，T1对该数据做了修改并提交，如果T2再次读取这个数据，那么读取的结果和第一次读取的结果不同。\n\n### 可重复读（REPEATABLE READ）\n\n可重复读保证了在同一事物中多次读取同样记录的结果是一致的。\n\n该级别无法解决幻读问题，即当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行。\n\n### 可串行化（SERIALIZABLE）\n\n该级别是最高的隔离级别，通过强制事务串行执行避免上面的幻读问题。\n\n### 总结\n\n| 隔离级别  | 脏读| 不可重复读 | 幻读 | 加锁读 |\n| ---- | ---- | ---- |  ---- | ---- |\n| 未提交读 | √ |  √   | √ |  × |\n| 提交读 |  × |  √   | √ |  × |\n| 未提交读 | × |  ×  | √ |  × |\n| 未提交读 | × |  ×  | × | √ |\n\n\n# 锁\n\n当多个用户并发地存取数据时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。所以，锁主要用于处理并发问题。\n\n从数据库系统角度分为三种：排他锁、共享锁、更新锁。 \n从程序员角度分为两种：一种是悲观锁，一种乐观锁。\n\n## 悲观锁\n\n总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁。\n\n传统的关系数据库里用到了很多这种锁机制，比如按使用性质划分的读锁、写锁和按作用范围划分的行锁、表锁。\n\n### 共享锁\n\n共享锁（S锁）又称为读锁，若事务T对数据对象A加上S锁，则事务T只能读A；其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这就保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。\n\n### 排他锁\n\n排他锁（X锁）又称为写锁，若事务T对数据对象A加上X锁，则只允许T读取和修改A，其他任何事务都不能再对A加任何类型的锁，直到T释放A上的锁。这就保证了其他事务在T释放A上的锁之前不能再读取和修改A。\n\n### 表锁\n\n每次操作锁住整张表，开销小，加锁快，锁粒度大，发生锁冲突的概率最高，并发度最低。\n\n### 行锁\n\n每次操作锁住一行数据，开销大，加锁慢，锁粒度小，发生锁冲突的概率最低，并发度最高。\n\n数据库能够确定哪些行需要锁的情况下使用行锁，如果不知道会影响哪些行的时候就会使用表锁。\n\n## 乐观锁\n\n总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。\n\n### 版本号机制\n\n一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值与当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。\n\n### CAS算法\n\nCAS即compare and swap（比较并交换），是一种有名的无锁算法，在不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步。CAS算法涉及到三个操作数：\n- 要更新的变量V\n- 预期的值E\n- 新值N\n\n仅当V值等于E值时，才会将V的值设置成N，否则什么都不做。最后CAS返回当前V的值。CAS算法需要你额外给出一个期望值，也就是你认为现在变量应该是什么样子，如果变量不是你想象的那样，就说明已经被别人修改过，就重新读取，再次尝试修改即可。\n\n因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时就会误以为它的值没有发生变化，这个问题称为ABA问题。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A-B-A就会变成1A-2B-3A，以此来防止不恰当的写入。\n\n## 两种锁的适用场景\n\n乐观锁适用于写比较少的情况下（多读场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行重试，这样反倒是降低了性能，所以一般多写的场景下用悲观锁比较合适。\n\n# 关系型数据库设计\n\n## 函数依赖\n\n### 部分函数依赖\n\n设X、Y是关系R的两个属性集合，存在X→Y，若X’是X的真子集，存在X’→Y，则称Y部分函数依赖于X。\n### 完全函数依赖\n\n设X、Y是关系R的两个属性集合，X’是X的真子集，存在X→Y，但对每一个X’都有X’ !→Y，则称Y完全函数依赖于X。\n\n### 传递函数依赖\n\n设X、Y、Z是关系R中互不相同的属性集合，存在X→Y（Y !→X），Y→Z，则称Z传递函数依赖于X。\n\n## 范式\n\n### 第一范式（1NF）\n\n在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。\n\n所谓第一范式（1NF）是指数据库表的每一列（每个属性）都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。简而言之，第一范式就是无重复的列。\n\n### 第二范式（2NF）\n\n第二范式（2NF）要求实体的属性完全依赖于主关键字。\n\n### 第三范式（3NF）\n\n在满足第二范式的基础上，且不存在传递函数依赖，那么就是第三范式。简而言之，第三范式就是属性不依赖于其它非主属性。\n\n## ER图\n\nER图由三个部分组成：实体、属性、联系。\n\n![](http://blog.default.nanwulife.com/timg.jpg)\n\n\n# 参考资料\n\n- [CS-NOTE](https://cyc2018.github.io/CS-Notes/#/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86)\n- [数据库锁分类和总结](https://blog.csdn.net/weixin_39651041/article/details/79985715)\n- [面试必备之乐观锁与悲观锁](https://www.imooc.com/article/details/id/44217)\n- [并发策略-CAS算法](https://www.cnblogs.com/jianzh5/p/6671230.html)","tags":["锁","事务","范式"],"categories":["数据库","数据库原理"]},{"title":"最短路径问题—Dijkstra算法及相关例题","url":"/2019/01/28/最短路径问题—Dijkstra算法及相关例题/","content":"最近在做算法题的时候总是遇到Dijkstra相关的题目，之前虽然学过图论的一些算法，但第一次做这类题时完全不知从何入手。看了一些博客，并且在PAT上折腾了几题后，发现一些常用的模板与套路，因此在这里进行一个总结。关于Dijkstra的理论知识可以参考这篇博客：[最短路径问题-Dijkstra算法详解](https://blog.csdn.net/qq_35644234/article/details/60870719)\n\n<!--more-->\n\n## Dijkstra算法\n\nDijkstra算法往往和dfs结合在一起考，因此这里给出一个求解基础Dijkstra+dfs相关题目的大致模板：\n\n```java\npublic class Main {\n\tstatic int n;    //节点数\n\tstatic int m;    //边数\n\tstatic int C1;   //起始点\n\tstatic int C2;   //终点\n\tstatic int[][] e;//边权\n\tstatic int[] weight;    //点权（非必需，视题目而定）\n\tstatic int[] dis;       //到起始点的最短路径长\n\tstatic boolean[] visit; //是否访问过\n\tstatic ArrayList<Integer>[] pre;    //可构成最短路径的前一个节点\n\tstatic LinkedList<Integer> tempPath = new LinkedList<Integer>();    //可能的最短路径\n\tstatic LinkedList<Integer> path = new LinkedList<Integer>();    //最短路径\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tn = sc.nextInt();\n\t\tm = sc.nextInt();\n\t\tC1 = sc.nextInt();\n\t\tC2 = sc.nextInt();\n\t\tvisit = new boolean[n];\n\t\tweight = new int[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tweight[i] = sc.nextInt();\n\t\t}\n\t\te = new int[n][n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\te[i][j] = e[j][i] = Integer.MAX_VALUE;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < m; i++) {\n\t\t\tint c1 = sc.nextInt();\n\t\t\tint c2 = sc.nextInt();\n\t\t\te[c1][c2] = e[c2][c1] = sc.nextInt();\n\t\t}\n\t\tdis = new int[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tdis[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tdis[C1] = 0;\n\t\tpre = new ArrayList[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tpre[i] = new ArrayList<>();\n\t\t}\n\t\t\n\t\t/**************以上为初始化****************/\n\t\t\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tint u = -1, min = Integer.MAX_VALUE;\n\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\tif(!visit[j] && dis[j] < min) {\n\t\t\t\t\tmin = dis[j];\n\t\t\t\t\tu = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u == -1) break;\n\t\t\tvisit[u] = true;\n\t\t\tfor(int v = 0; v < n; v++) {\n\t\t\t\tif(!visit[v] && e[u][v] != Integer.MAX_VALUE) {\n\t\t\t\t\tif(dis[v] > dis[u] + e[u][v]) {\n\t\t\t\t\t\tdis[v] = dis[u] + e[u][v];\n\t\t\t\t\t\tpre[v].clear();\n\t\t\t\t\t\tpre[v].add(u);\n\t\t\t\t\t} else if(dis[v] == dis[u] + e[u][v]) {\n\t\t\t\t\t\tpre[v].add(u);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//至此已经找到多个最短路径，下面的dfs算法将在多个最短路径中找到最终解\n\t\tdfs(C2);\n\t}\n\n\tprivate static void dfs(int v) {\n\t\ttempPath.push(v);\n\t\tif(v == C1) {\n\t\t\t//此处进行一些判断，在多个最短路径中确认最终解\n\t\t\ttempPath.pop();\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = 0; i < pre[v].size(); i++)\n\t\t\tdfs(pre[v].get(i));\n\t\ttempPath.pop();\n\t}\n}\n```\n\n## Emergency\n\n题目链接：[1003 Emergency ](https://pintia.cn/problem-sets/994805342720868352/problems/994805523835109376)\n\n此题要求求出两点之间的最短路径，如果存在多条最短路径，那么就选择点权和最大的路径。这里的代码和上面模板几乎一模一样，做题时都需要考虑点权。\n\n```java\npublic class Main {\n\tprivate static int n;\n\tprivate static int m;\n\tprivate static int C1;\n\tprivate static int C2;\n\tprivate static int[][] e;\n\tprivate static int[] weight;\n\tprivate static int[] dis;\n\tprivate static boolean[] visit;\n\tprivate static int max = Integer.MIN_VALUE;\n\tprivate static ArrayList<Integer>[] pre;\n\tprivate static LinkedList<Integer> tempPath = new LinkedList<Integer>();\n\tprivate static LinkedList<Integer> path = new LinkedList<Integer>();\n\tprivate static int cnt = 0;\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tn = sc.nextInt();\n\t\tm = sc.nextInt();\n\t\tC1 = sc.nextInt();\n\t\tC2 = sc.nextInt();\n\t\tvisit = new boolean[n];\n\t\tweight = new int[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tweight[i] = sc.nextInt();\n\t\t}\n\t\te = new int[n][n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\te[i][j] = e[j][i] = Integer.MAX_VALUE;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < m; i++) {\n\t\t\tint c1 = sc.nextInt();\n\t\t\tint c2 = sc.nextInt();\n\t\t\te[c1][c2] = e[c2][c1] = sc.nextInt();\n\t\t}\n\t\tdis = new int[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tdis[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tdis[C1] = 0;\n\t\tpre = new ArrayList[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tpre[i] = new ArrayList<>();\n\t\t}\n\t\t\n\t\t/**********************************************/\n\t\t\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tint u = -1, min = Integer.MAX_VALUE;\n\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\tif(!visit[j] && dis[j] < min) {\n\t\t\t\t\tmin = dis[j];\n\t\t\t\t\tu = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u == -1) break;\n\t\t\tvisit[u] = true;\n\t\t\tfor(int v = 0; v < n; v++) {\n\t\t\t\tif(!visit[v] && e[u][v] != Integer.MAX_VALUE) {\n\t\t\t\t\tif(dis[v] > dis[u] + e[u][v]) {\n\t\t\t\t\t\tdis[v] = dis[u] + e[u][v];\n\t\t\t\t\t\tpre[v].clear();\n\t\t\t\t\t\tpre[v].add(u);\n\t\t\t\t\t} else if(dis[v] == dis[u] + e[u][v]) {\n\t\t\t\t\t\tpre[v].add(u);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/***********************************************/\n\t\t\n\t\tdfs(C2);\n\t\tSystem.out.printf(\"%d %d\", cnt, max);\n\t}\n\t\n\tprivate static void dfs(int v) {\n\t\ttempPath.push(v);\n\t\tif(v == C1) {\n\t\t\tint a = 0;\n\t\t\tfor(int i = 0; i < tempPath.size(); i++) {\n\t\t\t\ta += weight[tempPath.get(i)];\n\t\t\t}\n\t\t\tif(a > max) {\n\t\t\t\tmax = a;\n\t\t\t\tpath = new LinkedList<>(tempPath);\n\t\t\t}\n\t\t\tcnt++;\n\t\t\ttempPath.pop();\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = 0; i < pre[v].size(); i++)\n\t\t\tdfs(pre[v].get(i));\n\t\ttempPath.pop();\n\t}\n}\n```\n\n事实上，我们也可以不使用DFS，而在执行Dijkstra就完成最大点权和的判断:\n\n```java\npublic class Main {\n\tprivate static int n;\t//城市数\n\tprivate static int m;\t//路径数\n\tprivate static int c1;\t//源城市\n\tprivate static int c2;\t//目标城市\n\tprivate static int[][] e;\t//边长\n\tprivate static int[] dis;\t//从出发点到当前节点的最短路径\n\tprivate static int[] nums;\t//从出发点到当前节点最短路径的数目\n\tprivate static int[] w;\t\t//从出发点到当前节点救援对数目之和\n\tprivate static int[] weight;\t//当前节点的救援队数目\n\tprivate static boolean[] visit;\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tn = sc.nextInt();\n\t\tm = sc.nextInt();\n\t\tc1 = sc.nextInt();\n\t\tc2 = sc.nextInt();\n\t\tweight = new int[n];\n\t\te = new int[n][n];\n\t\tdis = new int[n];\n\t\tnums = new int[n];\n\t\tw = new int[n];\n\t\tvisit = new boolean[n];\n\t\t\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tweight[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\te[i][j] = Integer.MAX_VALUE;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < m; i++) {\n\t\t\tint s = Integer.valueOf(sc.nextInt());\n\t\t\tint d = Integer.valueOf(sc.nextInt());\n\t\t\te[s][d] = e[d][s] = Integer.valueOf(sc.nextInt());\n\t\t}\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tdis[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tdis[c1] = 0;\n\t\tnums[c1] = 1;\n\t\tw[c1] = weight[c1];\n\t\t\n\t\t/******************************************/\n\t\t\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tint u = -1, min = Integer.MAX_VALUE;\n\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\tif(!visit[j] && dis[j] < min) {\n\t\t\t\t\tu = j;\n\t\t\t\t\tmin = dis[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u == -1) break;\n\t\t\tvisit[u] = true;\n\t\t\tfor(int v = 0; v < n; v++) {\n\t\t\t\tif(!visit[v] && e[u][v] != Integer.MAX_VALUE) {\n\t\t\t\t\tif(dis[u] + e[u][v] < dis[v]) {\n\t\t\t\t\t\t dis[v] = dis[u] + e[u][v];\n\t\t\t\t\t\t nums[v] = nums[u];\n\t\t\t\t\t\t w[v] = w[u] + weight[v];\n\t\t\t\t\t} else if(dis[u] + e[u][v] == dis[v]) {\n\t\t\t\t\t\tnums[v] += nums[u];\n\t\t\t\t\t\tw[v] = w[u] + weight[v] > w[v] ? w[u] + weight[v] : w[v];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.printf(\"%d %d\", nums[c2], w[c2]);\n\t}\n}\n\n```\n\n## Travel Plan\n\n题目链接：[1030 Travel Plan](https://pintia.cn/problem-sets/994805342720868352/problems/994805464397627392)\n\n这题对比上题是将点权换成了边权，先通过Dijkstra算法求出多条最短路径，然后用DFS找到最短路径中边权（此题中就是cost）最小的那条路径。\n\n```java\npublic class Main {\n\tprivate static int n;\n\tprivate static int m;\n\tprivate static int s;\n\tprivate static int d;\n\tprivate static int[][] e;\n\tprivate static int[][] cost;\n\tprivate static int[] dis;\n\tprivate static boolean[] visit;\n\tprivate static ArrayList<Integer>[] pre;\n\tprivate static LinkedList<Integer> tempPath = new LinkedList<>();\n\tprivate static LinkedList<Integer> path = new LinkedList<>();\n\tprivate static int min = Integer.MAX_VALUE;\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tn = sc.nextInt();\n\t\tm = sc.nextInt();\n\t\ts = sc.nextInt();\n\t\td = sc.nextInt();\n\t\tvisit = new boolean[n];\n\t\t\n\t\te = new int[n][n];\n\t\tcost = new int[n][n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\te[i][j] = e[j][i] = Integer.MAX_VALUE;\n\t\t\t\tcost[i][j] = cost[j][i] = Integer.MAX_VALUE;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < m; i++) {\n\t\t\tint i1 = sc.nextInt();\n\t\t\tint i2 = sc.nextInt();\n\t\t\te[i1][i2] = e[i2][i1] = sc.nextInt();\n\t\t\tcost[i1][i2] = cost[i2][i1] = sc.nextInt();\n\t\t}\n\t\t\n\t\tdis = new int[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tdis[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tdis[s] = 0;\n\t\t\n\t\tpre = new ArrayList[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tpre[i] = new ArrayList<>();\n\t\t}\n\t\t\n\t\t/***********************************************/\n\t\t\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tint u = -1, min = Integer.MAX_VALUE;\n\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\tif(!visit[j] && dis[j] < min) {\n\t\t\t\t\tmin = dis[j];\n\t\t\t\t\tu = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u == -1) break;\n\t\t\tvisit[u] = true;\n\t\t\tfor(int v = 0; v < n; v++) {\n\t\t\t\tif(!visit[v] && e[u][v] != Integer.MAX_VALUE) {\n\t\t\t\t\tif(dis[v] > dis[u] + e[u][v]) {\n\t\t\t\t\t\tdis[v] = dis[u] + e[u][v];\n\t\t\t\t\t\tpre[v].clear();\n\t\t\t\t\t\tpre[v].add(u);\n\t\t\t\t\t} else if(dis[v] == dis[u] + e[u][v]) {\n\t\t\t\t\t\tpre[v].add(u);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/**********************************************/\n\t\tArrayList<Integer>[] temppre = pre;\n\t\t\n\t\t\n\t\tdfs(d);\n\t\tfor(int i = 0; i < path.size(); i++) {\n\t\t\tSystem.out.print(path.get(i) + \" \");\n\t\t}\n\t\tSystem.out.print(dis[d] + \" \");\n\t\tSystem.out.print(min);\n\t}\n\t\n\tprivate static void dfs(int v) {\n\t\ttempPath.push(v);\n\t\tif(v == s) {\n\t\t\tint c = 0;\n\t\t\tfor(int i = 1; i < tempPath.size(); i++) {\n\t\t\t\tc += cost[tempPath.get(i)][tempPath.get(i-1)];\n\t\t\t}\n\t\t\tif(c < min) {\n\t\t\t\tmin = c;\n\t\t\t\tpath = new LinkedList<>(tempPath);\n\t\t\t}\n\t\t\ttempPath.pop();\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = 0; i < pre[v].size(); i++)\n\t\t\tdfs(pre[v].get(i));\n\t\ttempPath.pop();\n\t}\n}\n\n```\n## All Roads Lead to Rome\n\n题目链接：[1087 All Roads Lead to Rome](https://pintia.cn/problem-sets/994805342720868352/problems/994805379664297984)\n\n这题和上面两题也没什么不同，基本思路是一样的，只不过题目输入的是城市的名称也就是字符串，并且输出也要用城市的名称，我们直接用map来存储城市名与下标的映射即可。\n\n```java\npublic class Main {\n\tprivate static int[][] e;\n\tprivate static int[] dis;\n\tprivate static int[] weight;\n\tprivate static boolean[] visit;\n\tprivate static int n;\n\tprivate static int k;\n\tprivate static HashMap<Integer, String> map1;\n\tprivate static HashMap<String, Integer> map2;\n\tprivate static LinkedList<Integer> path = new LinkedList<>();\n\tprivate static LinkedList<Integer> tempPath = new LinkedList<>();\n\tprivate static ArrayList<Integer>[] pre;\n\tprivate static int max = Integer.MIN_VALUE;\n\tprivate static int avg = Integer.MIN_VALUE;\n\tprivate static int cnt = 0;\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString[] line1 = sc.nextLine().split(\" \");\n\t\tn = Integer.valueOf(line1[0]);\n\t\tk = Integer.valueOf(line1[1]);\n\t\tmap1 = new HashMap<>();\n\t\tmap2 = new HashMap<>();\n\t\tmap1.put(0, line1[2]);\n\t\tmap2.put(line1[2], 0);\n\t\tweight = new int[n];\n\t\tfor(int i = 1; i < n; i++) {\n\t\t\tString[] line = sc.nextLine().split(\" \");\n\t\t\tmap1.put(i, line[0]);\n\t\t\tmap2.put(line[0], i);\n\t\t\tweight[i] = Integer.valueOf(line[1]);\n\t\t}\n\t\te = new int[n][n];\n\t\tfor(int i = 0; i < e.length; i++) {\n\t\t\tfor(int j = 0; j < e.length; j++) {\n\t\t\t\te[i][j] = e[j][i] = Integer.MAX_VALUE;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < k; i++) {\n\t\t\tString[] line = sc.nextLine().split(\" \");\n\t\t\tint c1 = map2.get(line[0]);\n\t\t\tint c2 = map2.get(line[1]);\n\t\t\te[c1][c2] = e[c2][c1] = Integer.valueOf(line[2]);\n\t\t}\n\t\tdis = new int[n];\n\t\tdis[0] = 0;\n\t\tfor(int i = 1; i < n; i++) {\n\t\t\tdis[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tvisit = new boolean[n];\n\t\tpre = new ArrayList[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tpre[i] = new ArrayList<>();\n\t\t}\n\t\t\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tint u = -1, min = Integer.MAX_VALUE;\n\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\tif(!visit[j] && dis[j] < min) {\n\t\t\t\t\tu = j;\n\t\t\t\t\tmin = dis[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u == -1) break;\n\t\t\tvisit[u] = true;\n\t\t\tfor(int v = 0; v < n; v++) {\n\t\t\t\tif(!visit[v] && e[u][v] != Integer.MAX_VALUE) {\n\t\t\t\t\tif(dis[u] + e[u][v] < dis[v]) {\n\t\t\t\t\t\tdis[v] = dis[u] + e[u][v];\n\t\t\t\t\t\tpre[v].clear();\n\t\t\t\t\t\tpre[v].add(u);\n\t\t\t\t\t} else if(dis[u] + e[u][v] == dis[v]) {\n\t\t\t\t\t\tpre[v].add(u);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tdfs(map2.get(\"ROM\"));\n\t\tSystem.out.printf(\"%d %d %d %d\\n\", cnt, dis[map2.get(\"ROM\")], max, avg);\n\t\tSystem.out.print(map1.get(0));\n\t\tfor(int i = 1; i < path.size(); i++) {\n\t\t\tSystem.out.print(\"->\" + map1.get(path.get(i)));\n\t\t}\n\t}\n\t\n\tprivate static void dfs(int v) {\n\t\ttempPath.push(v);\n\t\tif(v == 0) {\n\t\t\tint happy = 0;\n\t\t\tint average = 0;\n\t\t\tfor(int i = 1; i < tempPath.size(); i++) {\n\t\t\t\thappy += weight[tempPath.get(i)];\n\t\t\t}\n\t\t\taverage = happy / (tempPath.size()-1);\n\t\t\tif(happy > max) {\n\t\t\t\tmax = happy;\n\t\t\t\tavg = average;\n\t\t\t\tpath = new LinkedList<>(tempPath);\n\t\t\t} else if(happy == max && average > avg) {\n\t\t\t\tavg = average;\n\t\t\t\tpath = new LinkedList<>(tempPath);\n\t\t\t}\n\t\t\tcnt++;\n\t\t\ttempPath.pop();\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = 0; i < pre[v].size(); i++)\n\t\t\tdfs(pre[v].get(i));\n\t\ttempPath.pop();\n\t}\n}\n```\n\n至此，简单的Dijkstra题都可以套用上述模板很容易地做出来，当然平时做题时还是需要根据具体题目灵活变通，以上代码只是将其思路梳理了一遍，在实现上也依然存在许多可以优化的地方。","tags":["Dijkstra"],"categories":["算法"]},{"title":"常用查找算法之散列表","url":"/2019/01/28/常用查找算法之散列表/","content":"\n# 前言\n\n散列表类似于数组，可以把散列表的散列值看成数组的索引值。访问散列表和访问数组元素一样快速，它可以在常数时间内实现查找和插入操作。使用散列的查找算法分为两步：用散列函数将被查找的键转化为数组的一个索引；处理碰撞冲突。\n\n<!--more-->\n\n# 散列函数\n\n要为一个数据类型实现优秀的散列方法需要满足三个条件：\n- 一致性：等价的键必然产生相等的散列值。\n- 高效性：计算简便。\n- 均匀性：均匀的散列所有的键。\n\n对于一致性，在Java中意味着每一种数据类型的`hashCode()`方法都必须和`equals()`方法一致。也就是说，如果`a.equals(b)`返回`true`，那么`a.hashCode()`和`b.hashCode()`的返回值必然相同。但要注意，如果`a.hashCode()`和`b.hashCode()`的返回值相同，`a.equals(b)`不一定返回`true`。\n\n保证均匀性的最好办法就是保证键的每一位都在散列值的计算中起到了相同的作用，而常见的错误就是忽略了键的高位。在jdk的`HashMap`中，为了保证均匀性将默认散列函数得到的散列值与其高16位进行异或运算重新得到新的散列值。\n\n为了将一个32位的整数散列值转换成数组的索引，我们在实现中还要将散列值和除留余数法结合起来产生一个0到M-1（M代表数组的大小）的整数。这在`HashMap`中是通过这行代码实现的：`hash & (table.length - 1)`。\n\n# 碰撞处理\n\n## 基于拉链法的散列表\n\n拉链法是将大小为M的数组中的每个元素指向一条链表，链表中的每个节点都存储了散列值为该元素的索引的键值对。基于拉链法的查找分为两步：首先根据散列值找到对应的链表，然后沿着链表顺序查找相应的键。\n\n![拉链法](http://blog.algorithms.nanwulife.com/b4252c85-6fb0-4995-9a68-a1a5925fbdb1.png)\n\n在实现基于拉链法的散列表时，要选择适当的数组大小M，既不会因为空链表而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。\n\n## 基于线性探测法的散列表\n\n实现散列表的另一种方式就是用大小为M的数组保存N个键值对，其中M>N。我们需要依靠数组中的空位解决碰撞冲突，基于这种策略的所有方法被统称为开放地址散列表。\n\n开放地址散列表中最简单的方法叫做线性探测法。我们在实现中使用并行数组，一个保存键，一个保存值。\n\n```java\npublic class LinearProbingHashST<Key, Value> {\n    private static final int INIT_CAPACITY = 4;\n\n    private int n;           //符号表中键值对的总数\n    private int m;           //线性探测表的大小\n    private Key[] keys;      //键\n    private Value[] vals;    //值\n\n    public LinearProbingHashST() {\n        this(INIT_CAPACITY);\n    }\n\n    public LinearProbingHashST(int capacity) {\n        m = capacity;\n        n = 0;\n        keys = (Key[])   new Object[m];\n        vals = (Value[]) new Object[m];\n    }\n\n    private int hash(Key key) {\n        return (key.hashCode() & 0x7fffffff) % m;\n    }\n\n\t//实现见下文\n\tprivate void resize(int capacity)\n\n\t//实现见下文\n\tpublic void put(Key key, Value val)\n\n\t//实现见下文\n\tpublic Value get(Key key)\n\n\t//实现见下文\n\tpublic void delete(Key key) \n```\n\n### 查找\n\n要查找一个键，我们从它的散列值开始顺序查找，如果找到则命中，否则直接检查散列表中的下一个位置（将索引值加1），直到找到该键或者遇到一个空元素。\n\n```java\n    public Value get(Key key) {\n        for (int i = hash(key); keys[i] != null; i = (i + 1) % m)\n            if (keys[i].equals(key))\n                return vals[i];\n        return null;\n    }\n```\n\n### 插入\n\n如果新建的散列值是一个空元素，那么就将它保存在那里；如果不是，我们就顺序查找一个空元素来保存它。\n\n```java\n    public void put(Key key, Value val) {\n        if (n >= m/2) \n\t        resize(2*m);\n        int i;\n        for (i = hash(key); keys[i] != null; i = (i + 1) % m) {\n            if (keys[i].equals(key)) {\n                vals[i] = val;\n                return;\n            }\n        }\n        keys[i] = key;\n        vals[i] = val;\n        n++;\n    }\n```\n\n### 删除\n\n直接将要删除的键所在的位置设为null是不行的，因为这会使在此位置之后的元素无法被查找。因此，我们需要将簇中被删除键的右侧的所有键重新插入散列表。\n\n```java\n\tpublic void delete(Key key) {\n\t    int i = hash(key);\n\t    while (keys[i] != null && !key.equals(keys[i]))\n\t        i = (i + 1) % M;\n\t\n\t    // 不存在则直接返回\n\t    if (keys[i] == null) return;\n\t\n\t    keys[i] = null;\n\t    values[i] = null;\n\t\n\t    // 将之后相连的键值对重新插入\n\t    i = (i + 1) % M;\n\t    while (keys[i] != null) {\n\t        Key keyToRedo = keys[i];\n\t        Value valToRedo = values[i];\n\t        keys[i] = null;\n\t        values[i] = null;\n\t        N--;\n\t        put(keyToRedo, valToRedo);\n\t        i = (i + 1) % M;\n\t    }\n\t    N--;\n\t    //如果键值对太小，我们就将数组的大小减半\n        if (n > 0 && n <= m/8) resize(m/2);\n\t}\n```\n\n为了保证性能，我们会动态调整数组的大小来保证使用率在1/8到1/2之间。\n\n### 调整数组大小\n\n线性探测法的成本取决于连续条目的长度，连续条目也叫聚簇。当聚簇很长时，在查找和插入时需要进行很多次探测。为了保证散列表的性能，应当动态调整数组的大小，使得散列表的使用率不超过1/2。\n\n```java\n    private void resize(int capacity) {\n        LinearProbingHashST<Key, Value> temp = new LinearProbingHashST<Key, Value>(capacity);\n        for (int i = 0; i < m; i++) {\n            if (keys[i] != null) {\n                temp.put(keys[i], vals[i]);\n            }\n        }\n        keys = temp.keys;\n        vals = temp.vals;\n        m    = temp.m;\n    }\n```\n\n以上实现会将原表中所有的键重新散列并插入到新表中。\n\n# 参考资料\n\n- [Algorithms (Fourth Edition)](https://algs4.cs.princeton.edu/34hash/)\n- [CS-Notes 算法](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95.md#%E5%A0%86%E6%8E%92%E5%BA%8F)\n","tags":["算法","查找","HashMap"],"categories":["算法"]},{"title":"树的前中后层序遍历（递归与非递归方式）","url":"/2019/01/28/树的前中后层序遍历（递归与非递归方式）/","content":"## Description\n\nLeetCode的第590题与429、589题型类似，都为树（不一定是二叉树）的各种形式的遍历，因此放在一起总结。\n\n![](http://blog.default.nanwulife.com/narytreeexample.png)\n\n对于上图，要求求出前序遍历、后序遍历和层级遍历的结果。\n\n<!--more-->\n\n## Example\n\n```\n前序遍历结果：[1,3,5,6,2,4]\n后序遍历结果：[5,6,3,2,4,1]\n层级遍历结果：\n[\n     [1],\n     [3,2,4],\n     [5,6]\n]\n```\n\n## Analysis\n\n对于树我们一般有两种策略：\n\n- 广度优先搜索（BFS）：从上到下一层一层的遍历树 ，也就是题目要求的层级遍历。\n- 深度优先搜索（DFS）：从一个根节点开始，一直到达某个叶子节点，然后回到根节点到达另一个分支的叶子节点。根据根节点、左节点和右节点之间的相对顺序，DFS策略可以进一步区分为前序、中序和后序。\n\n根据深度优先搜索与广度优先搜索可以整理出下图的四种情况：\n\n![](http://blog.default.nanwulife.com/145_transverse.png)\n\n## Solution\n\n对于第一题求前序遍历，我们可以使用递归或者循环来完成，实际上这三道题都是如此。我们先看看递归版本：\n\n```java\npublic class Solution {\n\tList<Integer> list;\n\t\n    public List<Integer> preorder(Node root) {\n    \tlist = new ArrayList<>();\n        if(root == null) return list;\n        preorderCore(root);\n        return list;\n    }\n\n    \n    private void preorderCore(Node root) {\n    \tif(root == null)\n    \t\treturn;\n    \tlist.add(root.val);\n    \tfor(Node node : root.children)\n    \t\tpreorderCore(node);\n    }\n}\n```\n\n前序遍历就是先将根节点放入结果列表中，然后再将左右子节点放入。递归的解法较为简单，下面看看循环的解法：\n\n```java\npublic class Solution2 {\n    public List<Integer> preorder(Node root) {\n    \tLinkedList<Integer> res = new LinkedList<>();\n    \tif(root == null)\n    \t\treturn res;\n    \tStack<Node> stack = new Stack<>();\n    \tstack.push(root);\n    \twhile(!stack.isEmpty()) {\n    \t\tNode node = stack.pop();\n    \t\tres.add(node.val);\n    \t\tCollections.reverse(node.children);\n    \t\tfor(Node children : node.children) {\n    \t\t\tstack.push(children);\n    \t\t}\n    \t}\n    \treturn res;\n    }\n}\n```\n在递归中我们使用栈来保存接下来要访问的节点。首先我们将根节点压入栈，栈中元素为`[1]`，然后我们将它弹出至结果列表并把它的子节点翻转并放入栈，此时栈中元素为`[4, 2, 3]`；由于栈顶元素为`3`，因此将`3`弹出至结果列表并把它的子节点翻转并放入栈，此时栈中元素为`[4, 2, 6, 5]`；栈顶元素为`5`，因此将`5`弹出至结果列表，`5`没有子节点，再把`6`弹出至结果列表。如此反复，我们便可以通过这种方式得到前序遍历的结果列表`[1, 3, 5, 6, 2, 4]`。\n\n求后序遍历与这题异曲同工，同样先看看递归版本：\n\n```java\npublic class Solution {\n\tList<Integer> list;\n\t\n    public List<Integer> postorder(Node root) {\n    \tlist = new ArrayList<>();\n        if(root == null) return list;\n        postorderCore(root);\n        return list;\n    }\n    \n    private void postorderCore(Node root) {\n    \tif(root == null)\n    \t\treturn;\n    \tfor(Node node : root.children)\n    \t\tpostorderCore(node);\n    \tlist.add(root.val);\n    }\n}\n```\n\n我们仅仅将`list.add(root.val);` 这行代码放到了遍历子节点的`for`语句之后，意味着先将所有子节点加入结果列表，最后再将根节点加入结果列表。下面是使用循环的解法：\n\n```java\npublic class Solution2 {\n    public List<Integer> postorder(Node root) {\n    \tLinkedList<Integer> res = new LinkedList<>();\n    \tif(root == null) \n    \t\treturn res;\n    \t\n    \tStack<Node> stack = new Stack<>();\n    \tstack.push(root);\n    \twhile(!stack.isEmpty()) {\n    \t\tNode node = stack.pop();\n    \t\tres.addFirst(node.val);\n    \t\tfor(Node children : node.children) {\n    \t\t\tstack.push(children);\n    \t\t}\n    \t}\n    \treturn res;\n    }\n}\n```\n\n与前序遍历不同的是我们不需要翻转子节点列表，但是每次将结果添加到结果列表头而不是尾。\n\n第三题是层序遍历（广度优先搜索），不像上面两题用递归实现更加简单，我们通过循环来实现会更加简洁明了，思路是使用一个队列而非栈来保存每一层节点：\n\n```java\npublic class Solution {\n    public List<List<Integer>> levelOrder(Node root) {\n    \tList<List<Integer>> res = new ArrayList<>();\n    \tif(root == null) return res;\n    \tQueue<Node> queue = new LinkedList<>();\n    \tqueue.add(root);\n    \twhile(!queue.isEmpty()) {\n    \t\tint size = queue.size();\n    \t\tList<Integer> list = new ArrayList<>();\n    \t\twhile(size-- != 0) {\n    \t\t\tNode node = queue.poll();\n    \t\t\tfor(Node children : node.children) queue.add(children);\n    \t\t\tlist.add(node.val);\n    \t\t}\n    \t\tres.add(list);\n    \t}\n    \treturn res;\n    }\n}\n```","tags":["树的遍历"],"categories":["算法"]},{"title":"常用查找算法之B/B+树","url":"/2019/01/28/常用查找算法之B-B-树/","content":"# 前言\n\n从算法逻辑上讲二叉查找树的查找和插入操作效率都已经很高，但是在实际应用中由于我们不能将整个索引表加载到内存，只能逐一加载每个磁盘页，这里的磁盘页就对应着索引树的节点。因此我们要将原本“瘦高”的树结构变得“矮胖”，从而减少磁盘IO的次数。\n\n<!--more-->\n\n# B- 树\n\nB-树是一种多路平衡查找树，是对2-3树的一个扩展。一个m阶的B树（m的大小取决于磁盘页的大小）具有如下几个特征：\n\n- 根结点至少有两个子女。\n- 每个中间节点都包含k-1个元素和k个孩子，其中 k ∈ [m/2, m]\n- 每一个叶子节点都包含k-1个元素，其中 k ∈ [m/2, m]\n- 所有的叶子结点都位于同一层。\n- 每个节点中的元素从小到大排列，节点当中k-1个元素正好是k个孩子包含的元素的值域分划。\n\n![b-](http://blog.algorithms.nanwulife.com/b2ec3daa41094928b25aeb5b0480e291_th.jpg)\n\n## 查找\n\n下图以一个3阶B-树为例，第一次磁盘IO并在内存中和9比较：\n![1](http://blog.algorithms.nanwulife.com/0a49e74202364d509a90717425288e95_th.jpg)\n\n第二次磁盘IO并在内存中和2、6比较：\n![2](http://blog.algorithms.nanwulife.com/4e2a2b6b20d843cc8c0063afede51bff_th.jpg)\n\n第三次磁盘IO并在内存中和3、5比较：\n![3](http://blog.algorithms.nanwulife.com/6eb86cf70e424349ba0a566ab09ba211_th.jpg)\n\n单从比较次数来说B树相比二叉查找树并不占优势，但由于节点中存储着多个元素，因此它的磁盘IO次数比二叉查找树少很多，而内存中的比较耗时几乎可以忽略，因此查找性能也就比二叉查找树更好。\n\n## 插入\n\n以插入元素4为例，自顶向下查找4的节点位置，发现4应当插入到节点元素3，5之间，而由于此B-树是3阶的，每个节点最多能有2个元素，因此该节点无法再增加，而其父节点也含有两个元素，根节点只有一个元素。\n\n![insert](http://blog.algorithms.nanwulife.com/d353c6f2ad7f4659b453fd0c93ff6862_th.jpg)\n\n于是拆分节点3，5与节点2，6，让根节点9升级为两元素节点4，9。节点6独立为根节点的第二个孩子。\n\n![insert](http://blog.algorithms.nanwulife.com/00e049f863f14faabdcf6c1eff1b99a7_th.jpg)\n\n## 删除\n\n以删除元素11为例，先自顶向下查找元素11的节点位置。\n\n![delete](http://blog.algorithms.nanwulife.com/17efb36118204a729b5c59a15408d6bc_th.jpg)\n\n删除11后，节点12只有一个孩子，不符合B树规范。因此找出12,13,15三个节点的中位数13，取代节点12，而节点12自身下移成为第一个孩子（左旋操作）。\n\n![delete](http://blog.algorithms.nanwulife.com/b958ba741db84961af96df894f390de3_th.jpg)\n![delete](http://blog.algorithms.nanwulife.com/120fd5b162654644b24fbc7aa68ba6ee_th.jpg)\n\n# B+ 树\n\nB+树是B-树的一个变体，有着比B-树更高的查询性能。一个m阶的B+树（m的大小取决于磁盘页的大小）具有如下几个特征：\n- 有k个子树的中间节点包含有k个元素（B-树中是k-1个元素），每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。\n- 所有的叶子结点中包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。\n- 所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。\n\n![b+](http://blog.algorithms.nanwulife.com/358025867be14bb99bf8806b98e774d9_th.png)\n\n注意，根节点的最大元素（上图中是15）等同于整个B+树的最大元素；由于父节点的元素都出现在子节点，因此所有叶子节点包含了全量元素信息，并且每一个叶子节点都带有指向下一个节点的指针，形成了一个有序链表。\n\n## 查找\n\n在B-树中，无论中间节点还是叶子节点都带有卫星数据（索引元素所指向的数据记录），而Ｂ+树中间节点没有卫星数据，只有索引，这就意味着同样大小的磁盘页可以容纳更多节点元素，在相同的数据量下，B+树更加“矮胖”，IO操作更少。 \n\n![b-](http://blog.algorithms.nanwulife.com/36efa69561dc4043a17d550133e13a6c_th.png)\n![b+](http://blog.algorithms.nanwulife.com/d8ae1b14e9bf4b1890146eb803ee9795_th.png)\n\n下图以查找元素3为例，第一次磁盘IO：\n\n![1](http://blog.algorithms.nanwulife.com/6808907785b84be09d8c6b7c8acb5d2a_th.png)\n\n第二次磁盘IO：\n\n![2](http://blog.algorithms.nanwulife.com/0193eedf3a5b47129340e2b6c654ef72_th.png)\n\n第三次磁盘IO：\n\n\n![3](http://blog.algorithms.nanwulife.com/68553d369a304d798116f432247c6e3f_th.png)\n\nB+树除了比B树更加“矮胖”这一点不同外，由于B+树的查询必须最终查找到叶子节点，而B-树中无论匹配元素处于中间节点还是叶子节点只要找到匹配元素即可，所以B+树的查找性能是稳定的，而B-树的查找性能不稳定（最好情况是只查根节点，最坏情况是查到叶子节点）。\n\n## 范围查找\n\n由于B+树的叶子节点构成了一条有序链表，因此B+树的范围查找比B-树简单得多，下面以查询范围为3到11的元素为例。\n\n自顶向下，查找到范围的下限3：\n\n![1](http://blog.algorithms.nanwulife.com/c0ef4d22cedf43cc8d21732d27f9be3e_th.png)\n\n通过链表指针，遍历到元素6、8：\n\n![2](http://blog.algorithms.nanwulife.com/005777d81ab247c281f8a1b4bc6b3461_th.png)\n\n通过链表指针，遍历到元素9、11，遍历结束：\n\n![3](http://blog.algorithms.nanwulife.com/e972e47b2c554f789e02e90b26a8b543_th.png)\n\n# 总结\n\n为了减少磁盘IO的次数，必须降低树的深度，将“瘦高”的树变得“矮胖，使得磁盘页可以容纳更多节点元素，因此出现了B-树。B+树是B-树的变体，相比B-树有以下优势：\n- 单一节点存储更多的元素，使得查询的IO次数更少。\n- 所有查询都要查找到叶子节点，查询性能稳定。\n- 所有叶子节点形成有序链表，便于范围查询。\n\n除了B-树和B+树，平时还会听到有`B*`树的概念，同样`B*`树是B+树的一个变体，相比B+树的不同之处如下：\n- 将结点的最低利用率从1/2提高到2/3。\n- 在B+树基础上，为非叶子结点也增加链表指针：B+树当一个结点满时，会分配一个新的结点，并将原结点中1/2的数据复制到新结点，最后在父结点中增加新结点的指针；`B*`树当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分数据移到兄弟结点中，而如果兄弟也满了，则在原结点与兄弟结点之间增加新结点，并各复制1/3的数据到新结点，最后在父结点增加新结点的指针。\n\n# 参考资料\n\n- [漫画：什么是B-树？](https://www.sohu.com/a/154640931_478315)\n- [漫画：什么是B+树？](https://www.sohu.com/a/156886901_479559)","tags":["算法","B树","查找"],"categories":["算法"]},{"title":"常用查找算法之红黑树","url":"/2019/01/28/常用查找算法之红黑树/","content":"\n\n# 前言\n\n[二叉查找树](https://blog.csdn.net/qq_38283262/article/details/84302509)对于大多数情况下的查找和插入操作在效率上来说是没有问题的，但是在最差的情况下会达到线性级别，其效率取决于插入顺序。平衡查找树的数据结构能够保证在最差的情况下也能是对数级别，要实现这一目标我们需要保证树在插入完成之后始终保持平衡状态。\n\n<!--more-->\n\n# 2-3查找树\n\n在学习红黑树之前要先了解2-3查找树作为基础，一棵2-3查找树或为一棵空树，或由以下节点组成：\n- 2-节点：含有一个键值对和两条链接，左链接指向的2-3树中的键都小于该节点，右链接指向的2-3树中的键都大于该节点。\n- 3-节点：含有两个键值对和三条链接，左链接指向的2-3树中的键都小于该节点，中链接指向的2-3树中的键都位于该节点的两个键之间，右链接指向的2-3树中的键都大于该节点。\n\n指向一棵空树的链接称为空链接，一棵完美平衡的2-3查找树的所有空链接到根节点的距离应该是相同的。\n\n![2-3](http://blog.algorithms.nanwulife.com/23tree-anatomy.png)\n\n## 查找\n\n要判断一个键是否在树中，我们先将它和根节点中的键比较。如果它和其中任意一个相等，查找命中；否则我们就根据比较的结果找到指向相应区间的链接，并在其指向的子树中递归地继续查找。如果这是个空链接，查找未命中。\n\n![search](http://blog.algorithms.nanwulife.com/23tree-search.png)\n\n## 插入\n\n- 如果插入到2-节点上，那么直接将新节点和原来的节点组成3-节点即可。\n\n- 如果是插入到3-节点上，就会产生一个临时4-节点时，需要将4-节点分裂成3个2-节点，并将中间的2-节点移到上层节点中。如果上移操作继续产生临时4-节点则一直进行分裂上移，直到不存在临时4-节点。\n\n如果从插入节点到根节点的路径上全都是3-节点，我们的根节点最终变成一个临时的4-节点，此时我们将临时的4-节点分解为3个2-节点，使得树高加一。这次最后的变换仍然保持了树的完美平衡性，因为它变换的是根节点。\n\n![all](http://blog.algorithms.nanwulife.com/qq_pic_merged_1542701509486.jpg)\n\n## 构造轨迹\n\n二叉查找树是由上向下生长的，而2-3树的生长是由下向上的。\n\n![construct](http://blog.algorithms.nanwulife.com/qq_pic_merged_1542702195282.jpg)\n\n# 红黑树\n\n2-3查找树实现起来十分复杂，因此我们使用一种名为红黑二叉查找树的简单数据结构来表达并实现它。\n\n我们将树中的链接分为两种类型：红链接将两个2-节点连接起来构成一个3-节点，黑链接则是2-3树中的普通链接。\n\n![redblack](http://blog.algorithms.nanwulife.com/redblack-encoding.png)\n\n红黑树有以下性质:\n- 红链接均为左链接。\n- 没有任何一个节点同时和两条红链接相连。\n- 红黑树是完美黑色平衡的，即任意空链接到根节点的路径上的黑链接数量相同。\n\n如果我们将由红链接相连的节点合并，得到的就是一棵2-3树：\n\n![](http://blog.algorithms.nanwulife.com/redblack-1-1.png)\n\n## 基本实现\n\n我们将由父节点指向自己的链接的颜色保存在表示节点的`Node`数据类型的布尔变量`Color`中。如果是红色则为true，黑色则为false。\n\n```java\n\npublic class RedBlackBST<Key extends Comparable<Key>, Value> {\n    private static final boolean RED   = true;\n    private static final boolean BLACK = false;\n\n\tprivate Node root;\n\n    private class Node {\n        private Key key;          \n        private Value val;  \n        private Node left, right; \n        private boolean color;     //由其父节点指向它的链接的颜色\n        private int size;          //这棵子树中的节点总数\n\n        public Node(Key key, Value val, boolean color, int size) {\n            this.key = key;\n            this.val = val;\n            this.color = color;\n            this.size = size;\n        }\n    }\n\n    public int size() {\n        return size(root);\n    }\n\n    private int size(Node x) {\n        if (x == null) return 0;\n        return x.size;\n    } \n\n    private boolean isRed(Node x) {\n        if (x == null) return false;\n        return x.color == RED;\n    }\n\n\t//实现见下文\n\tprivate Node rotateLeft(Node h)\n\n\t//实现见下文\n\tprivate Node rotateRight(Node h)\n\n\t//实现见下文\n\tprivate void flipColors(Node h)\n}\n```\n\n### 旋转\n\n假设我们有一条红色的右链接需要被转化为左链接，我们要进行左旋转。同理，也有右旋转。\n\n![left](http://blog.algorithms.nanwulife.com/redblack-left-rotate.png) ![right](http://blog.algorithms.nanwulife.com/redblack-right-rotate.png)\n\n```java\n\t//左旋转\n    private Node rotateLeft(Node h) {\n        Node x = h.right;\n        h.right = x.left;\n        x.left = h;\n        x.color = x.left.color;\n        x.left.color = RED;\n        x.size = h.size;\n        h.size = size(h.left) + size(h.right) + 1;\n        return x;\n    }\n\n\t//右旋转\n\tprivate Node rotateRight(Node h) {\n        Node x = h.left;\n        h.left = x.right;\n        x.right = h;\n        x.color = x.right.color;\n        x.right.color = RED;\n        x.size = h.size;\n        h.size = size(h.left) + size(h.right) + 1;\n        return x;\n    }\n```\n\n### 颜色转换\n\n一个4-节点在红黑树中表现为一个节点的左右子节点都是红色的。分裂4- 节点除了需要将子节点的颜色由红变黑之外，同时需要将父节点的颜色由黑变红，从2-3树的角度看就是将中间节点移到上层节点。\n\n![change](http://blog.algorithms.nanwulife.com/color-flip.png)\n\n```java\n    private void flipColors(Node h) {\n        h.color = !h.color;\n        h.left.color = !h.left.color;\n        h.right.color = !h.right.color;\n    }\n```\n\n### 插入\n\n先将一个节点按二叉查找树的方法插入到正确位置，然后在沿着插入点到根节点的路径向上移动时，在所经过的每个节点中顺序完成如下操作：\n- 如果右子节点是红色的而左子节点是黑色的，进行左旋转；\n- 如果左子节点是红色的，而且左子节点的左子节点也是红色的，进行右旋转；\n- 如果左右子节点均为红色的，进行颜色转换，将红链接在树中向上传递。\n\n![insert](http://blog.algorithms.nanwulife.com/08427d38-8df1-49a1-8990-e0ce5ee36ca2.png)\n\n颜色转换会使根节点变为红色，但根节点并没有父节点，因此在每次插入后都将根节点设为黑色。注意，每当根节点由红变黑时树的黑链接高度就会加一，因为这意味着它由一个4-节点分裂出去成为2-节点了。\n\n```java\n    public void put(Key key, Value val) {\n\t    //查找key，找到则更新其值，否则为它新建一个节点\n        root = put(root, key, val);\n        root.color = BLACK;\n    }\n\n    private Node put(Node h, Key key, Value val) { \n        if (h == null)  //标准的插入操作，和父节点用红链接相连\n\t        return new Node(key, val, RED, 1);\n\n        int cmp = key.compareTo(h.key);\n        if      (cmp < 0) h.left  = put(h.left,  key, val); \n        else if (cmp > 0) h.right = put(h.right, key, val); \n        else              h.val   = val;\n\n        if (isRed(h.right) && !isRed(h.left))      h = rotateLeft(h);\n        if (isRed(h.left)  &&  isRed(h.left.left)) h = rotateRight(h);\n        if (isRed(h.left)  &&  isRed(h.right))     flipColors(h);\n        h.size = size(h.left) + size(h.right) + 1;\n\n        return h;\n    }\n```\n\n除了递归调用后的三条if语句，红黑树中`put()`的递归实现和二叉查找树中`put()`的实现完全相同。\n\n![insert](http://blog.algorithms.nanwulife.com/redblack-construction.png)\n\n### 删除最小键\n\n为保证树的完美平衡性，沿着左链接向下进行变换，确保不会删除一个2-节点。在最后得到的含有最小键的3-节点或4-节点中，我们可以直接将最小键删除，然后向上分解所有临时的4-节点。\n\n![删除最小键](http://blog.algorithms.nanwulife.com/qq_pic_merged_1542720194994.jpg)\n\n### 删除\n\n在查找路径上进行和删除最小键相同的变换同样可以保证在查找过程中任意当前节点均不是2-节点。如果被查找的键在树的底部，我们可以直接删除它。如果不在，我们需要将它和它的后继节点交换，就和二叉查找树一样。因为当前节点必然不是2-节点，问题已经转化为在一棵根节点不是2-节点的子树中删除最小的键，可以直接使用上文的算法。删除之后我们需要向上回溯并分解余下的4-节点。\n\n### 查找\n\n红黑树的`get()`方法不会检查节点的颜色，因此实现和二叉查找树一样，但由于树是平衡的，所以查找比二叉查找树更快。\n\n```java\n    public Value get(Key key) {\n        return get(root, key);\n    }\n\n    private Value get(Node x, Key key) {\n        while (x != null) {\n            int cmp = key.compareTo(x.key);\n            if      (cmp < 0) x = x.left;\n            else if (cmp > 0) x = x.right;\n            else              return x.val;\n        }\n        return null;\n    }\n```\n\n## 复杂度分析\n\n无论键的插入顺序如何，红黑树都几乎是完美平衡的，因此查找、插入等操作在最坏的情况下所需的时间仍是对数级别的。\n\n# 参考资料\n\n- [Algorithms (Fourth Edition)](https://algs4.cs.princeton.edu/33balanced/)\n- [CS-Notes 算法](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95.md#%E5%A0%86%E6%8E%92%E5%BA%8F)","tags":["算法","查找","红黑树"],"categories":["算法"]},{"title":"常用查找算法之二叉查找树","url":"/2019/01/28/常用查找算法之二叉查找树/","content":"# 定义\n\n一棵二叉查找树（又称二叉排序树、二叉搜索树）是一棵二叉树，其中每个节点都含有一个Comparable的键以及相关联的值且每个节点的键都大于其左子树中的任意节点的键而小于右子树的任意节点的键。\n\n二叉查找树有一个重要性质，就是它的中序遍历结果递增排序。\n\n![bt](http://blog.algorithms.nanwulife.com/binary-tree-anatomy.png)![bst](http://blog.algorithms.nanwulife.com/bst-anatomy.png)\n\n<!--more-->\n\n# 基本实现\n\n树由`Node`对象组成，每个对象都含有一对键值、两条链接和一个节点计数器。节点计数器表示以该节点为根的子树中的节点总数，总是满足`size(x) = size(x.left) + size(x.right) + 1`。\n\n```java\npublic class BST<Key extends Comparable<Key>, Value> {\n    private Node root;             // 二叉查找树的根节点\n\n    private class Node {\n        private Key key;           // 键\n        private Value val;         // 值\n        private Node left, right;  // 指向子树的链接\n        private int size;          // 以该节点为根的子树中的节点总数\n\n        public Node(Key key, Value val, int size) {\n            this.key = key;\n            this.val = val;\n            this.size = size;\n        }\n    }\n\n    public int size() {\n        return size(root);\n    }\n\n    private int size(Node x) {\n        if (x == null) return 0;\n        else return x.size;\n    }\n\n\t//实现见下文\n\tpublic Value get(Key key)\n\n\t//实现见下文\n\tpublic void put(Key key, Value val)\n\n\t//其它有序性相关的方法及删除操作见下文\n}\n```\n\n## 查找\n\n如果树是空的，则查找未命中；如果被查找的键和根节点的键相等，查找命中；否则递归地在子树中查找：如果被查找的键较小就在左子树中查找，较大就在右子树中查找。\n\n当找到一个含有被查找的键的节点（命中）或者当前子树变为空（未命中）时这个过程才会结束。\n\n![查找](http://blog.algorithms.nanwulife.com/sdfndonfioaf123%E7%9A%84.png)\n\n```java\n    public Value get(Key key) {\n        return get(root, key);\n    }\n\n    private Value get(Node x, Key key) {\n        if (x == null) \n\t        return null;\n        int cmp = key.compareTo(x.key);\n        if      (cmp < 0) return get(x.left, key);\n        else if (cmp > 0) return get(x.right, key);\n        else              return x.val;\n    }\n```\n\n## 插入\n\n如果树是空的，就返回一个含有该键值对的新节点（使上层节点的链接指向该节点）；如果被查找的键小于根节点的键，继续在左子树中插入该键，否则在右子树中插入该键。\n\n![插入](http://blog.algorithms.nanwulife.com/bst-insert.png)\n\n```java\n\t@Override\n\tpublic void put(Key key, Value value) {\n\t    root = put(root, key, value);\n\t}\n\t\n    private Node put(Node x, Key key, Value val) {\n        if (x == null) return new Node(key, val, 1);\n        int cmp = key.compareTo(x.key);\n        if      (cmp < 0) x.left  = put(x.left,  key, val);\n        else if (cmp > 0) x.right = put(x.right, key, val);\n        else              x.val   = val;\n        x.size = 1 + size(x.left) + size(x.right);\n        return x;\n    }\n```\n\n# 有序性相关的方法及删除操作\n\n## 范围查找\n\n利用二叉查找树中序遍历的结果为递增的特点对其进行指定范围的查找。\n\n```java\nOverride\npublic List<Key> keys(Key l, Key h) {\n\tList<Key> list = new ArrayList<>();\n    keys(root, list, l, h);\n    return list;\n}\n\nprivate void keys(Node x, List<key> list, Key l, Key h) {\n    if (x == null)\n        return;\n    int cmpL = l.compareTo(x.key);\n    int cmpH = h.compareTo(x.key);\n    if (cmpL < 0) keys(x.left, list, l, h);\n    if (cmpL <= 0 && cmpH >= 0) list.add(x.key);\n    if (cmpH > 0) keys(x.right, list, l, h);\n}\n```\n\n## 删除最小节点\n\n只需令指向最小节点的链接指向最小节点的右子树。\n\n![delete](http://blog.algorithms.nanwulife.com/bst-deletemin.png)\n\n```java\npublic void deleteMin() {\n    root = deleteMin(root);\n}\n\nprivate Node deleteMin(Node x) {\n    if (x.left == null)\n        return x.right;\n    x.left = deleteMin(x.left);\n    x.size = size(x.left) + size(x.right) + 1;\n    return x;\n}\n```\n\n## 删除指定节点\n\n如果待删除的节点只有一个子树， 那么只需要让指向待删除节点的链接指向唯一的子树即可；否则，让右子树的最小节点替换该节点。\n\n![delete](http://blog.algorithms.nanwulife.com/bst-delete.png)\n\n```java\npublic void delete(Key key) {\n    root = delete(root, key);\n}\n\nprivate Node delete(Node x, Key key) {\n    if (x == null)\n        return null;\n    int cmp = key.compareTo(x.key);\n    if (cmp < 0)\n        x.left = delete(x.left, key);\n    else if (cmp > 0)\n        x.right = delete(x.right, key);\n    else {\n        if (x.right == null) return x.left;\n        if (x.left == null) return x.right;\n        Node t = x;\n        x = min(t.right);\n        x.right = deleteMin(t.right);\n        x.left = t.left;\n    }\n    x.size = size(x.left) + size(x.right) + 1;\n    return x;\n}\n```\n\n## 查找最小键\n\n```java\n\t@Override\n\tpublic Key min() {\n\t    return min(root).key;\n\t}\n\t\n\tprivate Node min(Node x) {\n\t    if (x == null)\n\t        return null;\n\t    if (x.left == null)\n\t        return x;\n\t    return min(x.left);\n\t}\n```\n\n## 排名\n\n`rank(key)`返回key的排名，排名从0开始。如果键和根节点的键相等，返回左子树的节点数；如果小于，递归计算在左子树中的排名；如果大于，递归计算在右子树中的排名，加上左子树的节点数，再加上1（根节点）。\n\n```java\n@Override\npublic int rank(Key key) {\n    return rank(key, root);\n}\n\nprivate int rank(Key key, Node x) {\n    if (x == null) return 0; \n    int cmp = key.compareTo(x.key); \n    if      (cmp < 0) return rank(key, x.left); \n    else if (cmp > 0) return 1 + size(x.left) + rank(key, x.right); \n    else return size(x.left); \n    } \n```\n\n# 复杂度分析\n\n在最好的情况下，一棵含有N个节点的树是完全平衡的，插入和查找的时间复杂度均为O(logn)；在最坏的情况下，搜索路径上可能有N个节点，此时的时间复杂度为O(n)。\n\n![best](http://blog.algorithms.nanwulife.com/bst-best.png) ![worst](http://blog.algorithms.nanwulife.com/bst-worst.png)\n\n# 参考资料\n\n- [Algorithms (Fourth Edition)](https://algs4.cs.princeton.edu/32bst/)\n- [CS-Notes 算法](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95.md#%E5%A0%86%E6%8E%92%E5%BA%8F)","tags":["算法","查找","BST"],"categories":["算法"]},{"title":"常用查找算法之二分查找","url":"/2019/01/28/常用查找算法之二分查找/","content":"## 前言\n\n符号表是一种存储键值对的数据结构，可以支持高效地插入、查找等操作，因此在这里使用一个有序符号表接口来定义这些操作，这个符号表将保持键的有序性。\n\n```java\npublic interface OrderedST<Key extends Comparable<Key>, Value> {\n\n    int size();\n\n    void put(Key key, Value value);\n\n    Value get(Key key);\n\n    Key min();\n\n    Key max();\n\n    int rank(Key key);\n\n    List<Key> keys(Key l, Key h);\n}\n```\n\n<!--more-->\n\n## 二分查找\n\n二分查找先将被查找的键和数组的中间键比较，如果被查找的键小于中间键，我们就在左子数组中继续查找，如果大于我们就在右子数组中继续查找，否则中间键就是我们要找的键。如果表中存在该键，此方法将返回该键的位置，否则，将返回该键应该插入的位置。\n\n二分查找有很多种不同的实现方式，但个人更加喜欢用以下的方式实现，这同时也是书上的实现方式：\n\n```java\npublic int binarySearch(int[] nums, int target) {\n\tint low = 0;\n\tint high = nums.length - 1;\n\twhile(low <= high) {\n\t\tint mid = low + (high - low) / 2;\n\t\tif(nums[mid] < target) low = mid + 1;\n\t\telse if(nums[mid] > target) high = mid - 1;\n\t\telse return mid;\n\t}\n\treturn low;\n}\n```\n\n### 查找数字第一次出现的位置\n\n对二分查找可以做一个简单的拓展，即当一个有序数组中有重复的数字时，查找一个数字在数组中第一次出现的位置。例如，对于数组`{1, 2, 3, 3, 3, 3, 4}`，要查找的数字`3`的下标应该为2而不是3。我们仅仅需要对普通的二分查找算法做一个简单的修改就能完成此功能：\n\n```java\npublic int binarySearchFirst(int[] nums, int target) {\n\tint low = 0;\n\tint high = nums.length - 1;\n\twhile(low <= high) {\n\t\tint mid = low + (high - low) / 2;\n\t\tif(nums[mid] < target) low = mid + 1;\n\t\telse if(nums[mid] >= target) high = mid - 1;\n\t}\n\treturn low;\n}\n```\n\n### 查找数字最后一次出现的位置\n\n同理，我们也可以使用二分查找找到重复数字在有序数组中最后一次出现的位置：\n\n```java\npublic int binarySearchLast(int[] nums, int target) {\n\tint low = 0;\n\tint high = nums.length - 1;\n\twhile(low <= high) {\n\t\tint mid = low + (high - low) / 2;\n\t\tif(nums[mid] <= target) low = mid + 1;\n\t\telse if(nums[mid] > target) high = mid - 1;\n\t}\n\treturn high;\n}\n```\n\n## 二分查找实现有序符号表\n\n使用一对平行数组，分别用来存储键和值。\n\n这份实现的核心是`rank()`方法，它几乎和上面单独列出的二分查找法一样，返回找到的键的位置或者键应该插入的位置。对于`put()`方法，如果键存在于表中则更新它的值，否则插入到合适的位置，并将所有更大的键向后移动一格。`get()`方法根据`rank()`方法的返回值来取键相应的值，如果不存在则返回null。\n\n```java\npublic class BinarySearchOrderedST<Key extends Comparable<Key>, Value> implements OrderedST<Key, Value> {\n\n    private Key[] keys;\n    private Value[] values;\n    private int N = 0;\n\n    public BinarySearchOrderedST(int capacity) {\n        keys = (Key[]) new Comparable[capacity];\n        values = (Value[]) new Object[capacity];\n    }\n\n    @Override\n    public int size() {\n        return N;\n    }\n    \n    @Override\n    public int rank(Key key) {\n        int l = 0, h = N - 1;\n        while (l <= h) {\n            int m = l + (h - l) / 2;\n            int cmp = key.compareTo(keys[m]);\n            if (cmp == 0)\n                return m;\n            else if (cmp < 0)\n                h = m - 1;\n            else\n                l = m + 1;\n        }\n        return l;\n    }\n\n    @Override\n    public List<Key> keys(Key l, Key h) {\n        int index = rank(l);\n        List<Key> list = new ArrayList<>();\n        while (keys[index].compareTo(h) <= 0) {\n            list.add(keys[index]);\n            index++;\n        }\n        return list;\n    }\n\n    @Override\n    public void put(Key key, Value value) {\n        int index = rank(key);\n        if (index < N && keys[index].compareTo(key) == 0) {\n            values[index] = value;\n            return;\n        }\n        for (int j = N; j > index; j--) {\n            keys[j] = keys[j - 1];\n            values[j] = values[j - 1];\n        }\n        keys[index] = key;\n        values[index] = value;\n        N++;\n    }\n\n    @Override\n    public Value get(Key key) {\n        int index = rank(key);\n        if (index < N && keys[index].compareTo(key) == 0)\n            return values[index];\n        return null;\n    }\n\n    @Override\n    public Key min() {\n        return keys[0];\n    }\n\n    @Override\n    public Key max() {\n        return keys[N - 1];\n    }\n}\n```\n\n## 复杂度分析\n\n二分查找的时间复杂度是对数级别的，故使用二分查找实现的符号表的查找操作所需要的时间也是对数级别的，但是插入操作由于需要移动数组元素，因此是线性级别的。\n\n## 参考资料\n\n- [Algorithms (Fourth Edition)](https://algs4.cs.princeton.edu/31elementary/)\n- [CS-Notes 算法](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95.md#%E5%A0%86%E6%8E%92%E5%BA%8F)","tags":["算法","查找"],"categories":["算法"]},{"title":"HashMap源码分析","url":"/2019/01/28/HashMap源码分析/","content":"## HashMap简介（jdk1.8）\n\n在jdk1.8中，HashMap底层由数组+链表+红黑树来实现，性能较之前有了较大的提升。如下为HashMap的继承体系结构：\n```java\npublic class HashMap<K,V> extends AbstractMap<K,V>\n    implements Map<K,V>, Cloneable, Serializable\n```\n\n在这里，AbstractMap已经实现了Map接口，再实现一遍并没有任何用处，java集合框架的创始人也承认其为一个小失误。\n\nHashMap中，当链表节点较多时会转为红黑树进行存储，而红黑树这一数据结构涉及的知识点过多，关于红黑树的基础知识需要另外学习，本篇将以链表为主，红黑树为辅的形式分析其源码。\n\n<!--more-->\n\n## 属性\n```\n   /**\n     * 默认的初始化容量为16\n     */\n    static final int DEFAULT_INITIAL_CAPACITY = 1 << 4;\n\n    /**\n     * 最大容量\n     */\n    static final int MAXIMUM_CAPACITY = 1 << 30;\n\n    /**\n     * 默认负载因子为0.75\n     */\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n    /**\n     * 链表转红黑树的阈值，当有8个节点的时候转换\n     */\n    static final int TREEIFY_THRESHOLD = 8;\n\n    /**\n     * 红黑树转链表的阈值，当有6个节点的时候转换\n     */\n    static final int UNTREEIFY_THRESHOLD = 6;\n\n    /**\n     * 转红黑树时table的最小容量，如果当前容量小于64则进行扩容而非转换\n     */\n    static final int MIN_TREEIFY_CAPACITY = 64;\n\n    /**\n     * 基本hash节点\n     */\n    static class Node<K,V> implements Map.Entry<K,V> {\n        final int hash;\n        final K key;\n        V value;\n        Node<K,V> next;\n\n        Node(int hash, K key, V value, Node<K,V> next) {\n            this.hash = hash;\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }\n\n        public final K getKey()        { return key; }\n        public final V getValue()      { return value; }\n        public final String toString() { return key + \"=\" + value; }\n\n        public final int hashCode() {\n            return Objects.hashCode(key) ^ Objects.hashCode(value);\n        }\n\n        public final V setValue(V newValue) {\n            V oldValue = value;\n            value = newValue;\n            return oldValue;\n        }\n\n        public final boolean equals(Object o) {\n            if (o == this)\n                return true;\n            if (o instanceof Map.Entry) {\n                Map.Entry<?,?> e = (Map.Entry<?,?>)o;\n                if (Objects.equals(key, e.getKey()) &&\n                    Objects.equals(value, e.getValue()))\n                    return true;\n            }\n            return false;\n        }\n    }\n```\n\n注意：在HashMap中，table的容量只为2的n次方。\n\n## 构造函数\n\n```java\n\t//指定了初始容量和负载因子\n    public HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    }\n\t//指定了初始容量，将会设置默认负载因子\n    public HashMap(int initialCapacity) {\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n    }\n\t\n    public HashMap() {\n        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n    }\n\n    public HashMap(Map<? extends K, ? extends V> m) {\n        this.loadFactor = DEFAULT_LOAD_FACTOR;\n        putMapEntries(m, false);\n    }\n```\n\n在构造函数中，并没有对table数组进行初始化，而是在第一次put的时候进行初始化，这会在下文进行详细介绍。\n\n## tableSizeFor\n\ntableSizeFor方法的主要功能是返回一个比给定整数大且最接近的2的幂次方整数，如给定10，返回2的4次方16。\n\n```java\n    static final int tableSizeFor(int cap) {\n\t    //防止当容量已经是2的幂次方(2^m)了，进行如下操作得到的最终结果会多乘个2，即2^(m+1)\n        int n = cap - 1;\n        n |= n >>> 1;\n        n |= n >>> 2;\n        n |= n >>> 4;\n        n |= n >>> 8;\n        n |= n >>> 16;\n        return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n    }\n```\n\n这个方法比较巧妙，n|=n>>>1这一操作确保第一次出现1的位及其后一位（也就是头两位）都是1，而n |= n >>> 2确保头四位都是1，n |= n >>> 4确保头八位都是1，以此类推，一直到n |= n >>> 16结束后就能确保第一次出现1的位及其后面所有位都为1。而此时，n+1即为最接近指定容量的2的幂次方整数。举个例子：\n```\nn:         0000 0000 0110 0001  = 97  \nn|=n>>>1:  0000 0000 0111 0001  \nn|=n>>>2:  0000 0000 0111 1001\nn|=n>>>2:  0000 0000 0111 1101  \nn|=n>>>4:  0000 0000 0111 1111\n...\nn|=n>>>16: 0000 0000 0111 1111\n\nn+1:       0000 0000 1000 0000  = 128\n```\n\n## hash\n\n```java\n    static final int hash(Object key) {\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n    }\n```\n\n这个方法先得到key的hashCode，然后将其与高16位进行异或运算重新得到哈希值，之后再通过`hash & (table.length - 1)` 定位到key在table中的索引位置。假设table的长度为16，具体过程如下：\n\n```\nh = key.hashCode():    1111 1111 1111 1111 0000 0000 0011 0101\nh >>> 16:              0000 0000 0000 0000 1111 1111 1111 1111\nhash = h ^ (h >>> 16): 1111 1111 1111 1111 1111 1111 1100 1010\ntable.length - 1:      0000 0000 0000 0000 0000 0000 0000 1111\nhash & (table.length - 1):0000 0000 0000 0000 0000 0000 0000 1010\n```\n\n其中，>>>为无符号右移，左边都将补0，而之所以要进行这一步，是为了当table的值很小时，能**让hashCode的高位也参与运算，以减少碰撞的几率**，否则仅在高位发生变化总是会发生碰撞。\n\n我们知道，hash如果对table.length取模将得到key在table长度范围内的索引位置，但由于模运算效率较低，这里便**采用了与运算进行优化，提高了效率**。\n\n## get\n```java\npublic V get(Object key) {\n        Node<K,V> e;\n        return (e = getNode(hash(key), key)) == null ? null : e.value;\n    }\n\nfinal Node<K,V> getNode(int hash, Object key) {\n        Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n        //哈希表不为null && 表的长度大于0 && 根据hash值算出表索引的第一个节点不为null\n        if ((tab = table) != null && (n = tab.length) > 0 &&\n            (first = tab[(n - 1) & hash]) != null) {\n            //如果第一个节点的key与传入的key相同，则直接返回第一个节点\n            if (first.hash == hash && //always check first node\n                ((k = first.key) == key || (key != null && key.equals(k))))\n                return first;\n            if ((e = first.next) != null) {\n\t            //如果第一个节点是树节点，则调用红黑树的相关方法\n                if (first instanceof TreeNode)\n                    return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n\t                do { //向下遍历链表直至找到key相同的节点并返回\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        return e;\n                } while ((e = e.next) != null);\n            }\n        }\n        //未找到符合要求的节点，返回null\n        return null;\n    }\n\n```\n\n## getTreeNode\n\n```java\n        final TreeNode<K,V> getTreeNode(int h, Object k) {\n\t        //如果当前节点有父节点，则先找到其根节点，之后再调用find方法\n            return ((parent != null) ? root() : this).find(h, k, null);\n        }\n\n        final TreeNode<K,V> root() {\n            for (TreeNode<K,V> r = this, p;;) {\n\t            //如果当前节点的父节点为空，则当前节点为根节点，将其返回\n                if ((p = r.parent) == null)\n                    return r;\n                r = p;\n            }\n        }\n\n        final TreeNode<K,V> find(int h, Object k, Class<?> kc) {\n            TreeNode<K,V> p = this;\n            do {\n                int ph, dir; K pk;\n                TreeNode<K,V> pl = p.left, pr = p.right, q;\n                //传入的哈希值小于当前节点的哈希值，则向左遍历\n                if ((ph = p.hash) > h)\n                    p = pl;\n                //传入的哈希值大于当前节点的哈希值，则向右遍历\n                else if (ph < h)\n                    p = pr;\n                //传入的哈希值等于当前节点的哈希值，则再判断key值是否相同，因为不同的key有可能有相同的hash，这也正是哈希冲突所在\n                else if ((pk = p.key) == k || (k != null && k.equals(pk)))\n                    return p;\n                //如果左节点为空，则向右开始遍历\n                else if (pl == null)\n                    p = pr;\n                //如果右节点为空，则向左开始遍历\n                else if (pr == null)\n                    p = pl;\n                //走到这里说明左右节点都不为空，要开始判断究竟往左还是往右\n                else if ((kc != null ||\n                          (kc = comparableClassFor(k)) != null) &&  //如果不为null，说明key实现了Comparable接口\n                         (dir = compareComparables(kc, k, pk)) != 0)  //比较k和pk的大小，若k<pk则dir<0，k>pk则dir>0\n                    p = (dir < 0) ? pl : pr;\n                //key所属类没有实现Comparable接口，则直接向右开始遍历\n                else if ((q = pr.find(h, k, kc)) != null)\n                    return q;\n                //向右没有找到，则向左开始遍历\n                else\n                    p = pl;\n            } while (p != null);\n\t        //找不到符合的返回null\n            return null;\n        }\n```\n\n在这个方法中有些人可能会疑虑在同一个索引位置下的红黑树各节点hash值不应该相同吗，为什么还会有判断哈希值大小进入左右节点的操作。其实，不同的hash值在与table的长度相与后，是有可能进入同一个索引位置下的，考虑以下这种情况：\n```\n节点1的hash值：  1110 0000 0000 1000 0111\n节点2的hash值：  1001 1111 0000 1010 0111\ntable.length-1：0000 0000 0000 0000 0111\n```\n可以看出，节点1与节点2在进行了`hash & (table.length - 1)`后值都为`0000 0000 0000 0000 0111`，因此会放置在table中同一个索引位置下。\n\n## comparableClassFor、compareComparables\n\ncomparableClassFor方法判断对象x所属类c是否实现了Comparable接口，如果实现了则返回所属类c，否则返回null\n\n```java\n    static Class<?> comparableClassFor(Object x) {\n        if (x instanceof Comparable) {\n            Class<?> c; Type[] ts, as; Type t; ParameterizedType p;\n            //如果x是个字符串对象则直接返回String类，因为String类本身就已经实现了Comparable接口\n            if ((c = x.getClass()) == String.class) // bypass checks\n                return c;\n            //Type[] getGenericInterfaces，此方法将返回带泛型参数信息的本类直接实现的接口\n            if ((ts = c.getGenericInterfaces()) != null) {\n                for (int i = 0; i < ts.length; ++i) {\n\t                //如果此接口为泛型接口\n                    if (((t = ts[i]) instanceof ParameterizedType) &&\n\t                    //如果该泛型接口的原始类型为Comparable\n                        ((p = (ParameterizedType)t).getRawType() ==\n                         Comparable.class) &&\n                         //如果该泛型接口只有一个泛型参数，且此泛型参数类型为c，则返回c\n                        (as = p.getActualTypeArguments()) != null &&\n                        as.length == 1 && as[0] == c) // type arg is c\n                        return c;\n                }\n            }\n        }\n        //如果该对象所属类没有实现Comparable接口，则返回null\n        return null;\n    }\n```\n\n以上代码中，`for (int i = 0; i < ts.length; ++i)`下的一系列判断其实就是想要看x所属类c是否实现了`Comparable<c>`。\n\n```java\n    static int compareComparables(Class<?> kc, Object k, Object x) {\n        return (x == null || x.getClass() != kc ? 0 :\n                ((Comparable)k).compareTo(x));\n    }\n```\n此方法中，如果x与k的类相同，则进行比较。否则，返回0。\n\n## put\n\n```java\n    public V put(K key, V value) {\n        return putVal(hash(key), key, value, false, true);\n    }\n\n    /**\n     * @param onlyIfAbsent 如果为true，则不改变已经存在的value，仅仅当不存在value的时候put进去\n     */\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        //如果table为空或者长度为0，则先调用resize()方法进行扩容\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        //如果通过hash计算得到的table该索引位置还没有节点，则创建一个新节点作为头节点\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        //该索引位置已存在节点\n        else {\n            Node<K,V> e; K k;\n            //判断当前节点的hash与key是否与参数中的hash与key相同，如果相同，则说明p为要查找的节点，将其赋值给e\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n            //判断节点是否为红黑树节点，如果是则调用红黑树的相关方法\n            else if (p instanceof TreeNode)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n            else {\n            //如果节点不为红黑树节点而是链表节点，则遍历链表节点，并统计该链表的节点数binCount\n                for (int binCount = 0; ; ++binCount) {\n\t                //如果已经到了链表尾部，则根据传入的hash与key等创建一个新节点加入链表尾部\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        //如果链表的节点数超过阈值，则将其转换为红黑树\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        //此时e节点即为目标节点，跳出循环\n                        break;\n                    //将p设置为下一个节点\n                    p = e;\n                }\n            }\n\t\t\t//如果e节点不为null，则说明链表中包含目标节点，用新值覆盖旧值并返回旧值\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        //走到这一步说明插入了新的节点，size大小需要加一\n        ++modCount;\n        if (++size > threshold)\n\t        //如果size超过了阈值，则进行扩容\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n```\n\n## putTreeVal\n\n在进行红黑树的操作时，依然会维护链表的结构。\n\n```java\n        final TreeNode<K,V> putTreeVal(HashMap<K,V> map, Node<K,V>[] tab,\n                                       int h, K k, V v) {\n            Class<?> kc = null;\n            boolean searched = false;\n            TreeNode<K,V> root = (parent != null) ? root() : this;\n            for (TreeNode<K,V> p = root;;) {\n                int dir, ph; K pk;\n                //如果目标节点的hash值小于当前节点，则将dir设为-1，代表向左查找\n                if ((ph = p.hash) > h)\n                    dir = -1;\n                //如果目标节点的hash值大于当前节点，则将dir设为1，代表向右查找\n                else if (ph < h)\n                    dir = 1;\n                //如果目标节点的hash值等于当前节点，则判断key是否相等，如果相等，则说明当前节点为目标节点，将其返回\n                else if ((pk = p.key) == k || (k != null && k.equals(pk)))\n                    return p;\n                //如果要查找的key没有实现Comparable接口或者pk与k的所属类不同\n                else if ((kc == null &&\n                          (kc = comparableClassFor(k)) == null) || \n                         (dir = compareComparables(kc, k, pk)) == 0) {\n                    //第一次执行查找\n                    if (!searched) {\n                        TreeNode<K,V> q, ch;\n                        searched = true;\n                        //左右子树分别调用find进行查找，如果找到了则返回\n                        if (((ch = p.left) != null &&\n                             (q = ch.find(h, k, kc)) != null) ||\n                            ((ch = p.right) != null &&\n                             (q = ch.find(h, k, kc)) != null))\n                            return q;\n                    }\n                    //如果依然没有找到，则再进行最后一次比较\n                    dir = tieBreakOrder(k, pk);\n                }\n\n                TreeNode<K,V> xp = p;\n                //如果p节点的左节点或者右节点为null，则说明找到了要放入的位置\n                if ((p = (dir <= 0) ? p.left : p.right) == null) {\n                    Node<K,V> xpn = xp.next;\n                    TreeNode<K,V> x = map.newTreeNode(h, k, v, xpn);\n                    if (dir <= 0)\n                        xp.left = x;\n                    else\n                        xp.right = x;\n                    //到这里维护了xp->x->xpn这一链表结构\n                    xp.next = x;\n                    x.parent = x.prev = xp;\n                    if (xpn != null)\n                        ((TreeNode<K,V>)xpn).prev = x;\n                    //进行红黑树的插入平衡操作\n                    moveRootToFront(tab, balanceInsertion(root, x));\n                    return null;\n                }\n            }\n        }\n```\n\n## resize\n```java\n    final Node<K,V>[] resize() {\n        Node<K,V>[] oldTab = table;\n        //如果老table为空，则老t\n        int oldCap = (oldTab == null) ? 0 : oldTab.length;\n        int oldThr = threshold;\n        int newCap, newThr = 0;\n        if (oldCap > 0) {  //如果老table不为空\n            if (oldCap >= MAXIMUM_CAPACITY) {  //且老table的容量已经大于最大容量\n                //将阈值设置为最大整型\n                threshold = Integer.MAX_VALUE;\n                //直接返回老table，不再扩容\n                return oldTab;\n            }\n            //将新容量设置为老容量的两倍\n            //如果新容量小于最大容量且老容量大于十六，则将新阈值也提高到原来的两倍\n            else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                     oldCap >= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr << 1; // double threshold\n        }\n        //如果table为空，但老阈值大于0，说明构造函数时指定了初始化容量但从未加入过元素，此时将老阈值赋给新容量，详解见下文\n        else if (oldThr > 0) // initial capacity was placed in threshold\n            newCap = oldThr;\n        //老table为空，且老阈值为0，说明构造函数时未指定初始化容量\n        else {               // zero initial threshold signifies using defaults\n\t        //将新容量设置为默认初始化容量\n            newCap = DEFAULT_INITIAL_CAPACITY;\n            //将新阈值设置为默认负载因子*默认初始化容量\n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        }\n        //如果新阈值为0，则用新容量*负载因子赋值\n        if (newThr == 0) {\n            float ft = (float)newCap * loadFactor;\n            //如果新容量或者新阈值大于最大容量，则将新阈值设为最大整型，以后不再扩容\n            newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);\n        }\n        //将新阈值赋值给阈值属性\n        threshold = newThr;\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n        //用新容量大小创建一个新table\n            Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n        //将新table赋值给table属性\n        table = newTab;\n        //如果老table不为空，则将其中的元素全部放到新table中去\n        if (oldTab != null) {\n            for (int j = 0; j < oldCap; ++j) {\n                Node<K,V> e;\n                //如果该索引位置头节点不为空\n                if ((e = oldTab[j]) != null) {\n\t                //将老表该索引位置设为空，方便垃圾收集器回收\n                    oldTab[j] = null;\n                    //如果该索引位置只有一个节点，则根据其hash计算值放入新表中\n                    if (e.next == null)\n                        newTab[e.hash & (newCap - 1)] = e;\n                    //如果为树节点，则调用红黑树相关方法\n                    else if (e instanceof TreeNode)\n                        ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                    //该索引位置有多个节点\n                    else { // preserve order\n\t                    //存储原索引位置的头节点与尾节点\n                        Node<K,V> loHead = null, loTail = null;\n                        //存储原索引位置+原容量的头节点与尾节点\n                        Node<K,V> hiHead = null, hiTail = null;\n                        Node<K,V> next;\n                        do {\n                            next = e.next;\n                            //如果hash与oldCap相与为0则存储在原索引位置，详解见下方\n                            if ((e.hash & oldCap) == 0) {\n                                if (loTail == null)\n\t                                //e为头节点的情况\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            }\n                            //如果hash与oldCap相与不为0则存储在原索引位置+原容量，详解见下方\n                            else {\n                                if (hiTail == null)\n                                    //e为头节点的情况\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            }\n                        } while ((e = next) != null);\n                        if (loTail != null) {\n\t                        //尾节点的next属性为空\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        }\n                        if (hiTail != null) {\n\t                        //尾节点的next属性为空\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        }\n                    }\n                }\n            }\n        }\n        //返回新表\n        return newTab;\n    }\n```\n\n我们可以看到在此方法中有一个条件判断`else if (oldThr > 0)`，当table为空但阈值却大于零时，将阈值赋值给新容量。这里有个疑问是为什么会发生table为空但阈值却大于零这种情况？我们可以回过头看看构造函数，可以发现在所有构造函数中都没有对数组table进行过分配，而仅仅设置了阈值`this.threshold = tableSizeFor(initialCapacity);`，既然在构造时没有分配，那肯定就是在第一次扩容时分配的，也就正是上面的代码。\n\n此处还有一个疑问是：为什么扩容后新的存储位置只为原位置或原位置+原容量？请看这么一个例子，假设oldCap=0100, newCap=1000,节点a的hash为1110,节点b的hash为1010。oldCap-1的值为0011，显然对于节点来说只有后两位决定了它们的位置（因为前两位无论如何都为0），而newCap-1的值为0111，此时后三位决定了它们的位置，与之前不同正在于节点的第三位是0还是1，而第三位的值正可以通过oldCap(在此也就是0100)相与来进行判断，如果相与结果为0000，则说明第三位的值为0，在和newCap-1相与后结果将不变，依然在原索引位置；而如果相与结果为0100，则说明节点第三位值是1，也就是原索引值加上原容量。\n\n## treeifyBin\n\n```java\n    final void treeifyBin(Node<K,V>[] tab, int hash) {\n        int n, index; Node<K,V> e;\n        //如果table为空或者table的长度小于可转换为红黑树的最小容量，则调用resize方法扩容\n        if (tab == null || (n = tab.length) < MIN_TREEIFY_CAPACITY)\n            resize();\n        //如果根据hash计算得到的索引位置下的节点不为空，则遍历整条链表\n        else if ((e = tab[index = (n - 1) & hash]) != null) {\n            TreeNode<K,V> hd = null, tl = null;\n            do {\n\t            //将链表节点转换为红黑树节点\n                TreeNode<K,V> p = replacementTreeNode(e, null);\n                //如果为第一次循环\n                if (tl == null)\n\t                //将p设置为头节点\n                    hd = p;\n                //否则，不为第一次循环\n                else {\n\t                //将当前节点与上一个节点关联起来，维护链表结构\n                    p.prev = tl;\n                    tl.next = p;\n                }\n                tl = p;\n            } while ((e = e.next) != null);\n            //将hash计算得到的索引位置的头节点赋为新的树节点\n            if ((tab[index] = hd) != null)\n\t            //以头节点为根构建红黑树\n                hd.treeify(tab);\n        }\n    }\n\n    TreeNode<K,V> replacementTreeNode(Node<K,V> p, Node<K,V> next) {\n        return new TreeNode<>(p.hash, p.key, p.value, next);\n    }\n```\n\n## treeify\n```java\n        final void treeify(Node<K,V>[] tab) {\n            TreeNode<K,V> root = null;\n            //x的初始值为根节点，但开始时还未赋值给root\n            for (TreeNode<K,V> x = this, next; x != null; x = next) {\n                next = (TreeNode<K,V>)x.next;\n                x.left = x.right = null;\n                //如果root还未被赋值，则将根节点赋值给它\n                if (root == null) {\n\t                //根节点没有父节点\n                    x.parent = null;\n                    //红黑树根节点必须为黑色\n                    x.red = false;\n                    root = x;\n                }\n                else {\n\t\t            //见下文\n                    K k = x.key;\n                    int h = x.hash;\n                    Class<?> kc = null;\n                    for (TreeNode<K,V> p = root;;) {\n                        int dir, ph;\n                        K pk = p.key;\n                        if ((ph = p.hash) > h)\n                            dir = -1;\n                        else if (ph < h)\n                            dir = 1;\n                        else if ((kc == null &&\n                                  (kc = comparableClassFor(k)) == null) ||\n                                 (dir = compareComparables(kc, k, pk)) == 0)\n                            dir = tieBreakOrder(k, pk);\n\n                        TreeNode<K,V> xp = p;\n                        if ((p = (dir <= 0) ? p.left : p.right) == null) {\n                            x.parent = xp;\n                            if (dir <= 0)\n                                xp.left = x;\n                            else\n                                xp.right = x;\n                            //红黑树的插入平衡调整\n                            root = balanceInsertion(root, x);\n                            break;\n                        }\n                    }\n                }\n            }\n            //将根节点移到table索引位置的头节点\n            moveRootToFront(tab, root);\n        }\n```\n\ntreeify方法用来构建一棵以调用该方法的节点为根节点的红黑树。由于红黑树依然维护着链表结构，每次通过next属性获得下一个节点时，都会从根节点开始向下查找，根据hash值的大小找到合适的位置放入，并设置好parent与left或right属性以关联节点。\n\n## remove\n```java\n    public V remove(Object key) {\n        Node<K,V> e;\n        //如果未找到要删除的节点则返回空，否则返回要删除的节点的value值\n        return (e = removeNode(hash(key), key, null, false, true)) == null ?\n            null : e.value;\n    }\n\n    /**\n     * @param matchValue 如果为true，则只有当value也相等的时候才移除\n     */\n    final Node<K,V> removeNode(int hash, Object key, Object value,\n                               boolean matchValue, boolean movable) {\n        Node<K,V>[] tab; Node<K,V> p; int n, index;\n\t    //如果table不为空且table的长度不为0且table该索引位置的头节点不为空\n        if ((tab = table) != null && (n = tab.length) > 0 &&\n            (p = tab[index = (n - 1) & hash]) != null) {\n            Node<K,V> node = null, e; K k; V v;\n            //如果当前节点的hash值和key都与传入的相等，则当前节点就是目标节点，将其赋值给node\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                node = p;\n            //如果当前节点不是目标节点，则遍历之后的节点\n            else if ((e = p.next) != null) {\n\t            //如果节点为树节点，则调用红黑树相关方法\n                if (p instanceof TreeNode)\n                    node = ((TreeNode<K,V>)p).getTreeNode(hash, key);\n                else {\n                    do {\n\t                    //如果当前节点是目标节点，则将其赋值给node，并跳出循环\n                        if (e.hash == hash &&\n                            ((k = e.key) == key ||\n                             (key != null && key.equals(k)))) {\n                            node = e;\n                            break;\n                        }\n                        //将p设为下一节点\n                        p = e;\n                    } while ((e = e.next) != null);\n                }\n            }\n            //如果找到了要删除的节点且要删除的节点的value与传入的value相等或者压根不需要匹配value\n            if (node != null && (!matchValue || (v = node.value) == value ||\n                                 (value != null && value.equals(v)))) {\n                //如果节点为树节点，则调用红黑树移除方法\n                if (node instanceof TreeNode)\n                    ((TreeNode<K,V>)node).removeTreeNode(this, tab, movable);\n                //如果要删除的节点是头节点\n                else if (node == p)\n\t                //直接将索引位置指向要删除节点的下一个节点\n                    tab[index] = node.next;\n                else\n\t                //如果要删除的节点不是头节点，则将要删除节点的上下节点关联起来\n                    p.next = node.next;\n                ++modCount;\n                //总节点数减一\n                --size;\n                afterNodeRemoval(node);\n                //返回被移除的节点\n                return node;\n            }\n        }\n        //未找到要删除的节点，直接返回null\n        return null;\n    }\n```\n## 常见问题\n有关HashMap的常见面试题总结请移步 [HashMap常见面试题总结](https://blog.csdn.net/qq_38283262/article/details/82940303)","tags":["JDK","HashMap"],"categories":["JDK"]},{"title":"常见排序算法之堆排序","url":"/2019/01/28/常见排序算法之堆排序/","content":"\n\n## 前言\n\n排序算法的成本模型计算的是比较和交换的次数。less()方法对元素进行比较，exch()方法将元素交换位置。\n\n```java\nprivate static boolean less(Comparable v, Comparable w) {\n   return (v.compareTo(w) < 0);\n}\n\nprivate static void exch(Comparable[] a, int i, int j) {\n   Comparable swap = a[i];\n   a[i] = a[j];\n   a[j] = swap;\n} \n```\n\n<!--more-->\n\n## 堆的定义\n\n堆的某个节点的值总是大于等于子节点的值，并且堆是一颗完全二叉树。当这棵树的每个结点都大于等于它的两个子节点时，它被称为堆有序。\n\n堆可以用数组来表示，这是因为堆是完全二叉树，而完全二叉树很容易就存储在数组中。位置 k 的节点的父节点位置为 k/2，而它的两个子节点的位置分别为 2k 和 2k+1。\n\n![堆](http://blog.algorithms.nanwulife.com/heap-representations.png)\n\n## 上浮\n\n在堆中，当一个节点比父节点大，那么需要交换这个两个节点。交换后还可能比它新的父节点大，因此需要不断地进行比较和交换操作，把这种操作称为上浮。\n\n![上浮](http://blog.algorithms.nanwulife.com/swim.png)\n\n实现如下：\n\n```java\nprivate void swim(int k) {\n   while (k > 1 && less(k/2, k)) {\n      exch(k, k/2);\n      k = k/2;\n   }\n}\n```\n\n## 下沉\n\n在堆中，当一个节点比子节点小，需要不断地向下进行比较和交换操作，把这种操作称为下沉。一个节点如果有两个子节点，应当与两个子节点中最大那个节点进行交换。\n\n![下沉](http://blog.algorithms.nanwulife.com/sink.png)\n\n实现如下：\n\n```java\nprivate void sink(int k) {\n   while (2*k <= N) {\n      int j = 2*k;\n      if (j < N && less(j, j+1)) j++;\n      if (!less(k, j)) break;\n      exch(k, j);\n      k = j;\n   }\n}\n```\n\n## 堆排序\n\n堆排序可以分为两个阶段。在堆的构造阶段中，我们将原始数组重新组织安排进一个堆中；然后在下沉排序阶段，我们从堆中按递减顺序取出所有元素并得到排序结果。\n\n![堆排序](http://blog.algorithms.nanwulife.com/heapsort-trace.png)\n\n### 堆的构造\n\n无序数组建立堆最直接的方法是从左到右遍历数组进行上浮操作。一个更高效的方法是从右至左进行下沉操作，如果一个节点的两个节点都已经是堆有序，那么进行下沉操作可以使得这个节点为根节点的堆有序。叶子节点不需要进行下沉操作，可以忽略叶子节点的元素，因此只需要遍历一半的元素即可。\n\n### 下沉排序\n\n堆排序的主要工作都是在这一阶段完成的。这里我们将堆中的最大元素删除，然后放入堆缩小后数组中空出的位置。\n\n```java\npublic class Heap {\n    public static void sort(Comparable[] pq) {\n        int n = pq.length;\n        for (int k = n/2; k >= 1; k--)\n            sink(pq, k, n);\n        while (n > 1) {\n            exch(pq, 1, n--);\n            sink(pq, 1, n);\n        }\n    }\n\n    private static void sink(Comparable[] pq, int k, int n) {\n        while (2*k <= n) {\n            int j = 2*k;\n            if (j < n && less(pq, j, j+1)) j++;\n            if (!less(pq, k, j)) break;\n            exch(pq, k, j);\n            k = j;\n        }\n    }\n\n    private static boolean less(Comparable[] pq, int i, int j) {\n        return pq[i-1].compareTo(pq[j-1]) < 0;\n    }\n\n    private static void exch(Object[] pq, int i, int j) {\n        Object swap = pq[i-1];\n        pq[i-1] = pq[j-1];\n        pq[j-1] = swap;\n    }\n}\n```\n\n## 复杂度分析\n\n一个堆的高度为 logN，因此在堆中插入元素和删除最大元素的复杂度都为 logN。\n\n对于堆排序，由于要对 N 个节点进行下沉操作，因此复杂度为 NlogN。\n\n现代系统的许多应用很少使用它，因为它无法利用缓存。数组元素很少和相邻的其它元素进行比较，因此无法利用局部性原理，缓存未命中的次数很高。\n\n- 最坏时间复杂度 О(nlogn)\n- 最优时间复杂度 O(nlogn)\n- 平均时间复杂度 O(nlogn)\n- 空间复杂度 O(1)\n- 不稳定\n\n\n## 参考资料\n\n- [Algorithms (Fourth Edition)](https://algs4.cs.princeton.edu/24pq/)\n- [CS-Notes 算法](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95.md#%E5%A0%86%E6%8E%92%E5%BA%8F)","tags":["算法","排序"],"categories":["算法"]},{"title":"常见排序算法之快速排序","url":"/2019/01/28/常见排序算法之快速排序/","content":"## 前言\n\n排序算法的成本模型计算的是比较和交换的次数。less()方法对元素进行比较，exch()方法将元素交换位置。\n\n```java\nprivate static boolean less(Comparable v, Comparable w) {\n   return (v.compareTo(w) < 0);\n}\n\nprivate static void exch(Comparable[] a, int i, int j) {\n   Comparable swap = a[i];\n   a[i] = a[j];\n   a[j] = swap;\n} \n```\n\n<!--more-->\n\n\n## 思路\n\n快速排序是一种分治的排序算法，它将一个数组分成两个子数组，将两部分独立地排序。\n\n快速排序和归并排序是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序；而快速排序将数组排序的方式则是当两个子数组都有序时整个数组也就自然有序了。前者的递归调用发生在处理整个数组之前，而后者的递归调用则发生在处理整个数组之后。\n\n## 实现过程\n\n![快速排序](http://blog.algorithms.nanwulife.com/partitioning.png)\n\n### 基本算法\n\n```java\npublic class Quick {\n    public static void sort(Comparable[] a) {\n        shuffle(a);\n        sort(a, 0, a.length - 1);\n    }\n\n\tprivate static void sort(Comparable[] a, int lo, int hi) { \n        if (hi <= lo) return;\n        int j = partition(a, lo, hi);\n        sort(a, lo, j-1);\n        sort(a, j+1, hi);\n    }\n\n\tprivate void shuffle(T[] nums) {\n        List<Comparable> list = Arrays.asList(nums);\n        Collections.shuffle(list);\n        list.toArray(nums);\n    }\n}\n```\n\n该方法的关键在于切分。\n\n### 切分方法\n\n一般策略是先随意地取a[lo]作为切分元素，即那个将会被排序的元素，然后我们从数组的左端开始向右扫描直到找到一个大于等于它的元素，再从数组的右端开始向左扫描直到找到一个小于等于它的元素。这两个元素显然是没有排定的，因此交换它们的位置。如此继续，我们就可以保证左指针i的左侧元素都不大于切分元素，右指针j的右侧元素都不小于切分元素。当两个指针相遇时，我们只需要将切分元素a[lo]和左子数组最右侧的元素（a[j]）交换然后返回j即可。\n\n```java\n    private static int partition(Comparable[] a, int lo, int hi) {\n        int i = lo;\n        int j = hi + 1;\n        Comparable v = a[lo];\n        while (true) { \n            while (less(a[++i], v)) {\n                if (i == hi) break;\n            }\n            \n            while (less(v, a[--j])) {\n                if (j == lo) break;\n            }\n\n            if (i >= j) break;\n            exch(a, i, j);\n        }\n        exch(a, lo, j);\n        return j;\n    }\n```\n\n这个过程使得数组满足下面三个条件：\n- 对于某个j，a[j]已经排定\n- a[lo]到a[j-1]中的所有元素都不大于a[j]\n- a[j+1]到a[hi]中的所有元素都不小于a[j]\n\n![切分方法](http://blog.algorithms.nanwulife.com/766aedd0-1b00-4065-aa2b-7d31138df84f.png)\n\n## 复杂度分析\n\n快速排序的最好情况是每次都正好将数组对半分。在这种情况下快速排序所用的比较次数正好满足分治递归的Cn=2Cn/2+n。2Cn/2表示将两个子数组排序的成本，n表示用切分元素和所有数组元素进行比较的成本，这个递归公式的解Cn~nlogn。（下文有具体数学推导）\n\n而在最坏情况下，切分不平衡使得第一次从最小的元素切分，第二次从第二小的元素切分，如此继续，每次切分后两个子数组之一总是为空的，比较次数为`(n - 1) + (n - 2) +...+ 1 = n × (n - 1 ) / 2`。\n\n而对于空间复杂度来说，主要考虑的是递归调用使用的栈空间，在最好的情况下（也就是对半分），递归深度为logn，最坏情况下的递归深度为n。\n\n- 最坏时间复杂度 О(n²)\n- 最优时间复杂度 O(nlogn)\n- 平均时间复杂度 O(nlogn)\n- 最坏空间复杂度 O(n)\n- 最优空间复杂度 O(logn)\n- 不稳定\n\n## 最优时间复杂度的数学证明\n\n![数学证明](http://blog.algorithms.nanwulife.com/img_20181106_151412.882~2.png)\n\n## 算法改进\n\n### 切换到插入排序\n\n因为快速排序在小数组中也会递归调用自己，对于小数组，插入排序比快速排序的性能更好，因此在小数组中可以切换到插入排序。\n\n只需要将代码中的`if (hi <= lo) return;`改为`if (hi <= lo + M) {Insertion.sort(a, lo, hi); return;}`。\n\n### 三取样切分\n\n最好的情况下是每次都能取数组的中位数作为切分元素，但是计算中位数的代价很高。人们发现取 3 个元素并将大小居中的元素作为切分元素的效果最好。\n\n### 三向切分法\n\n从左到右遍历数组一次，维护一个指针lt使得a[lo...lt-1]中的元素都小于v，一个指针gt使得a[gt+1...hi]中的元素都大于v，一个指针i使得a[lt..i-1]中的元素都等于v，a[i..gt]中的元素都还未确定。\n\n![三向切分法](http://blog.algorithms.nanwulife.com/partitioning3-overview.png)\n\n一开始i和lo相等，对a[i]进行三向比较：\n- a[i]小于v，将a[lt]和a[i]交换，将lt和i加一\n- a[i]大于v，将a[gt]和a[i]交换，将gt减一\n- a[i]等于v，将i加一\n\n对于包含大量重复元素的数组，它将排序时间从线性对数级降低到了线性级别。\n\n```java\npublic class Quick3way {\n    public static void sort(Comparable[] a) {\n        shuffle(a);\n        sort(a, 0, a.length - 1);\n    }\n\n    private static void sort(Comparable[] a, int lo, int hi) { \n        if (hi <= lo) return;\n        int lt = lo, gt = hi;\n        Comparable v = a[lo];\n        int i = lo + 1;\n        while (i <= gt) {\n            int cmp = a[i].compareTo(v);\n            if      (cmp < 0) exch(a, lt++, i++);\n            else if (cmp > 0) exch(a, i, gt--);\n            else              i++;\n        }\n\n        // a[lo..lt-1] < v = a[lt..gt] < a[gt+1..hi]. \n        sort(a, lo, lt-1);\n        sort(a, gt+1, hi);\n    }\n\n\tprivate void shuffle(T[] nums) {\n        List<Comparable> list = Arrays.asList(nums);\n        Collections.shuffle(list);\n        list.toArray(nums);\n    }\n}\n```\n\n## 参考资料\n\n- [Algorithms (Fourth Edition)](https://algs4.cs.princeton.edu/23quicksort/)\n- [CS-NOTE 算法](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E7%AE%97%E6%B3%95.md)\n- [排序算法之快速排序的时间复杂度和空间复杂度](https://blog.csdn.net/yuzhihui_no1/article/details/44198701)","tags":["算法","排序"],"categories":["算法"]},{"title":"常见排序算法之归并排序","url":"/2019/01/28/常见排序算法之归并排序/","content":"\n## 前言\n\n排序算法的成本模型计算的是比较和交换的次数。less()方法对元素进行比较，exch()方法将元素交换位置。\n\n```java\nprivate static boolean less(Comparable v, Comparable w) {\n   return (v.compareTo(w) < 0);\n}\n\nprivate static void exch(Comparable[] a, int i, int j) {\n   Comparable swap = a[i];\n   a[i] = a[j];\n   a[j] = swap;\n} \n```\n\n<!--more-->\n\n## 原地归并方法\n\n该方法将两个不同的有序数组归并到第三个数组中。\n\n```java\n    private static void merge(Comparable[] a, Comparable[] aux, int lo, int mid, int hi) {\n        // copy to aux[]\n        for (int k = lo; k <= hi; k++) {\n            aux[k] = a[k]; \n        }\n\n        // merge back to a[]\n        int i = lo, j = mid+1;\n        for (int k = lo; k <= hi; k++) {\n            if      (i > mid)              a[k] = aux[j++];\n            else if (j > hi)               a[k] = aux[i++];\n            else if (less(aux[j], aux[i])) a[k] = aux[j++];\n            else                           a[k] = aux[i++];\n        }\n    }\n```\n\n## 自顶向下的归并排序\n\n自顶向下的归并排序应用了分治的思想，要对子数组a[lo..hi]进行排序，先将它分为a[lo..mid]和a[mid+1..hi]两部分，分别通过递归调用将它们单独排序，最后将有序的子数组归并为最终的排序结果。\n\n![自顶向下的归并排序](http://blog.algorithms.nanwulife.com/mergesortTD.png)\n\n*图为自顶向下的归并排序中归并结果的轨迹*\n\n```java\npublic class Merge {\n    public static void sort(Comparable[] a) {\n        Comparable[] aux = new Comparable[a.length];\n        sort(a, aux, 0, a.length-1);\n    }\n\n    private static void sort(Comparable[] a, Comparable[] aux, int lo, int hi) {\n        if (hi <= lo) return;\n        int mid = lo + (hi - lo) / 2;\n        sort(a, aux, lo, mid);\n        sort(a, aux, mid + 1, hi);\n        merge(a, aux, lo, mid, hi);\n    }\n}\n```\n\n## 自底向上的归并排序\n\n实现归并排序的另一种方法是先归并那些微型数组，然后再成对归并得到子数组，如此这般地多次遍历整个数组，直到我们将整个数组归并到一起。\n\n![自底向上的归并排序](http://blog.algorithms.nanwulife.com/mergesortBU.png)\n\n*图为自底向上的归并排序中归并结果的轨迹*\n\n```java\npublic class MergeBU {\n    public static void sort(Comparable[] a) {\n        int n = a.length;\n        Comparable[] aux = new Comparable[n];\n        for (int len = 1; len < n; len *= 2) {\n            for (int lo = 0; lo < n-len; lo += len+len) {\n                int mid  = lo+len-1;\n                int hi = Math.min(lo+len+len-1, n-1);\n                merge(a, aux, lo, mid, hi);\n            }\n        }\n    }\n}\n```\n\n## 特点\n\n- 归并排序的空间复杂度不是最优的\n- 和选择排序一样，排序的性能不受输入数据的影响，但表现比选择排序好的多\n\n## 复杂度分析\n\n- 最坏情况时间复杂度 O(nlogn)\n- 最好情况时间复杂度 O(nlogn)\n- 平均情况时间复杂度 O(nlogn)\n- 空间复杂度 O(n)\n- 稳定\n\n\n## 参考资料\n\n- Wikipedia\n- [Algorithms (Fourth Edition)](https://algs4.cs.princeton.edu/22mergesort/)\n- [十大经典排序算法](https://www.cnblogs.com/onepixel/articles/7674659.html)","tags":["算法","排序"],"categories":["算法"]},{"title":"初级排序算法","url":"/2019/01/28/初级排序算法/","content":"## 前言\n\n排序算法的成本模型计算的是比较和交换的次数。less()方法对元素进行比较，exch()方法将元素交换位置。\n\n```java\nprivate static boolean less(Comparable v, Comparable w) {\n   return (v.compareTo(w) < 0);\n}\n\nprivate static void exch(Comparable[] a, int i, int j) {\n   Comparable swap = a[i];\n   a[i] = a[j];\n   a[j] = swap;\n} \n```\n\n<!--more-->\n\n## 选择排序\n\n首先找到数组中最小的那个元素，其次将它和数组的第一个元素交换位置。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此反复，直到将整个数组排序。\n\n![选择排序](http://blog.algorithms.nanwulife.com/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f392f39342f53656c656374696f6e2d536f72742d416e696d6174696f6e2e676966.gif)\n*上图为选择排序的示例动画。红色表示当前最小值，黄色表示已排序序列，蓝色表示当前位置。*\n\n### 特点\n\n- 运行时间和输入无关：一个已经有序的数组或主键全部相等的数组和一个元素随机排列的数组所用的排序时间一样长。\n- 数据移动是最少的：每次交换都会改变两个数组的元素的值，因此选择排序用了N次交换。\n\n### 复杂度分析\n\n比较次数与关键字的初始状态无关，总的比较次数`N = (n - 1) + (n - 2) +...+ 1 = n × (n - 1 ) / 2`。交换次数最好情况是已经有序，交换0次；最坏情况是逆序，交换n-1次。\n\n- 最坏时间复杂度 О(n²)\n- 最优时间复杂度 О(n²)\n- 平均时间复杂度 О(n²)\n- 空间复杂度 O(1)\n- 不稳定\n\n\n### 实现\n\n```java\npublic class Selection {\n    public static void sort(Comparable[] a) {\n        int n = a.length;\n        for (int i = 0; i < n; i++) {\n            int min = i;\n            for (int j = i+1; j < n; j++) {\n                if (less(a[j], a[min])) min = j;\n            }\n            exch(a, i, min);\n        }\n    }\n}\n```\n\n## 插入排序\n\n插入排序是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。\n\n![插入排序](http://blog.algorithms.nanwulife.com/Insertion-sort-example-300px.gif)\n\n### 特点\n\n- 插入排序所需时间取决于输入中元素的初始顺序。\n- 插入排序对于部分有序的数组十分高效。\n\n### 复杂度分析\n\n最好情况是序列已经是升序排列了，在这种情况下，需要进行的比较操作需n-1次即可，不需要进行交换；最坏情况是降序排列，那么此时需要进行的比较共有`n × (n - 1) / 2`次，交换同样需要`n × (n - 1) / 2`次。\n\n- 最坏时间复杂度 О(n²)\n- 最优时间复杂度 О(n)\n- 平均时间复杂度 О(n²)\n- 空间复杂度 O(1)\n- 稳定\n\n### 实现\n\n```java\npublic class Insertion {\n    public static void sort(Comparable[] a) {\n        int n = a.length;\n        for (int i = 1; i < n; i++) {\n            for (int j = i; j > 0 && less(a[j], a[j-1]); j--) {\n                exch(a, j, j-1);\n            }\n        }\n    }\n}\n```\n\n## 希尔排序\n\n希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序的思想是使数组中任意间隔为h的元素都是有序的，这样的数组称为h有序数组。\n\n实现希尔排序只需要在插入排序的代码中将移动元素的距离由1改为h即可。\n\n![希尔排序](http://blog.algorithms.nanwulife.com/h-sorted.png)\n*一个h有序数组即一个由h个有序子数组组成的数组*\n\n![希尔排序](http://blog.algorithms.nanwulife.com/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f642f64382f536f7274696e675f7368656c6c736f72745f616e696d2e676966.gif)\n*上图表示以23, 10, 4, 1的步长序列进行希尔排序。*\n\n### 特点\n\n- 希尔排序的时间复杂度与递增序列密切相关，所以分析希尔排序的时间复杂度是个比较麻烦的事。\n- 希尔排序对于中等大小规模表现良好，对规模非常大的数据排序不是最优选择。\n- 希尔排序实现简单，几乎任何排序工作在开始时都可以用希尔排序，若在实际使用中证明它不够快，再改成快速排序这样更高级的排序算法。\n\n### 实现\n\n```java\npublic class Shell {\n    public static void sort(Comparable[] a) {\n        int n = a.length;\n\n        // 3x+1 increment sequence:  1, 4, 13, 40, 121, 364, 1093, ... \n        int h = 1;\n        while (h < n/3) h = 3*h + 1; \n\n        while (h >= 1) {\n            // h-sort the array\n            for (int i = h; i < n; i++) {\n                for (int j = i; j >= h && less(a[j], a[j-h]); j -= h) {\n                    exch(a, j, j-h);\n                }\n            }\n            h /= 3;\n        }\n    }\n}\n```\n\n## 参考资料\n\n- Wikipedia\n- [Algorithms (Fourth Edition)](https://algs4.cs.princeton.edu/21elementary/)\n- [十大经典排序算法](https://www.cnblogs.com/onepixel/articles/7674659.html)","tags":["算法","排序"],"categories":["算法"]},{"title":"ATR-CKN算法的研究与实现","url":"/2019/01/28/ATR-CKN算法的研究与实现/","content":"\n# 前言\n\n最近在学校做了无线传感器网络（WSN）睡眠调度算法方面的一些研究，本篇文章主要对其中的CKN、EC-CKN算法的学习做个总结，并给出基于这两种算法而改进后的ATR-CKN算法的核心实现以及在Nettopo上的运行结果。\n\n<!--more-->\n\n# CKN与EC-CKN算法\n\nK-邻居节点连通算法（CKN）是一个有效的分布式睡眠/工作时序安排算法。该算法可以在有效的减少网络中处于工作状态的节点个数的同时保证整个网络处于连通状态和需求的路径延迟。执行CKN算法时对WSN中的每个节点u主要进行以下几步：\n\n![](http://blog.default.nanwulife.com/O4%2909EVPSRXAY6%292S%60KRG$6.png)\n\n针对CKN算法在能量消耗方面存在的问题，基于能量消耗的睡眠/工作时序安排算法（EC-CKN）可以延长网络的寿命。EC-CKN算法利用节点当前的剩余能量信息作为参数来决定节点是否进入睡眠状态。EC-CKN算法不仅可以保证整个网络处于K邻居节点连通状态，同时还可以保证每个节点处于工作状态的K个邻居节点当前的剩余能量在所有邻居节点当前剩余能量排序中为最大的K个。\n\n# 存在的问题\n\nEC-CKN对CKN有了一定的改进，但在某些场景下仍然会存在一些问题，例如下文将介绍的死亡加速与网络隔离。\n\n### 死亡加速\n\n在下图的场景中，节点B有很多个邻居节点，按理是可以进入睡眠状态的，但是由于它的其中一个邻居节点A只有它一个邻居节点，因此节点A和B永远得不到睡眠机会，这导致的后果就是：节点B的能量很快就被消耗完了，而节点B周围原本刚好满足睡眠条件的节点由于少了一个醒着的邻居节点，睡眠的几率也因此下降，从而加速了整个网络的死亡。\n\n![](http://blog.default.nanwulife.com/RD$XNFLW@%29JC%28IHG1MGZC5A.png)\n\n### 网络隔离\n\n类似于死亡加速，在下面的场景中节点A和B永远也得不到睡眠机会，因此会更快的消耗完能量，导致相连的两个网络被隔离开了。\n\n![](http://blog.default.nanwulife.com/OR%5BQ%258%7D%28NFA%7B6AC2H%60UWGI8.png)\n\n# ATR-CKN算法\n\nATR-CKN算法优于原始的基于CKN的睡眠调度算法，它的优势在于可以在物理上调整传感器节点的传输半径，从而执行CKN使部分节点进入睡眠状态。ATR-CKN算法在继承了EC-CKN算法的所有主要属性的同时，通过提高节点的睡眠率为延长网络生命周期做出了重要贡献。\n\n相较于EC-CKN，ATR-CKN只用在之前加入一个判断逻辑即可：\n\n![](http://blog.default.nanwulife.com/NPPLT2L4@3%60S%29XLEQJDGU3H.png)\n\n### 核心实现\n\n下面给出在Nettopo上对于ATR-CKN算法的实现，其关键在于执行EC-CKN之前加入下面一段判断逻辑：\n\n```java\n\tprivate void ATRCKN_Function() {\n\t//...\n\t\t\tboolean flag = false;\n\t\t\tInteger[] neighbors1 = neighbors.get(currentID);\n\t\t\tif(neighbors1.length < k) {\n\t\t\t\twhile(!isUsingMaxTR(currentID)) {\n\t\t\t\t\tincreaseTR(currentID);\n\t\t\t\t\tneighbors1 = neighbors.get(currentID);\n\t\t\t\t\tif(neighbors1.length >= k) {\n\t\t\t\t\t\tfor(int j = 0; j < neighbors1.length; j++) {\n\t\t\t\t\t\t\tint tr = ((SensorNode)wsn.getNodeByID(currentID)).getMaxTR();\n\t\t\t\t\t\t\t((SensorNode)wsn.getNodeByID(neighbors1[j])).setMaxTR(tr);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!flag) setDefaultTR(currentID);\n\t\t\t}\n\t\t//...\n\t}\n```\n\n### 运行结果\n\n下面将在Nettopo上简单的演示一遍ATR-CKN算法对于死亡加速问题的解决。\n\nk = 2，round = 1的时候：\n![](http://blog.algorithms.nanwulife.com/WF8I%7DDDLHR%5B~GZ2FN1G@%7B4X.png)\n\nk = 2，round = 10的时候：\n![](http://blog.algorithms.nanwulife.com/%5DJN~%25%5BM%7B%60PKGKFT%25E4C%5B6~3.png)\n\nk = 2，round = 30的时候\n![](http://blog.algorithms.nanwulife.com/6%5DJL%5D4DFM0KGSFZJQ0~L%7DGV.png)\n\nk = 2，round = 43的时候：\n![](http://blog.algorithms.nanwulife.com/J%29%5DD7AQY%28%28%7B55YTRV%5DZE4MQ.png)\n\n由于增大了传感器节点的物理传输半径，可以看到两个关键节点都可以进入睡眠状态，以此延长了网络的整体寿命。虽然增大传输半径的同时也增加了能量消耗，但在进行了大量实验并对统计数据进行详细分析后，我们可以发现ATR-CKN的生命周期相比EC-CKN平均增加了19％，最大增加了41%，因此可以得出其更优于EC-CKN的结论。\n\n\n\n\n\n","tags":["WSN","算法"],"categories":["项目"]},{"title":"深入理解JVM-垃圾收集与内存分配","url":"/2019/01/28/深入理解JVM-垃圾收集与内存分配/","content":"# 对象存活判断\n\n判断对象是否存活一般有引用计数法和可达性分析两种方式。\n\n<!--more-->\n\n## 引用计数算法\n\n为每个对象添加一个引用计数器，新增一个引用时计数器加1，引用释放时计数器减1，计数器为0时该对象可以被回收。\n\n引用计数法实现简单且高效，但无法解决对象之间相互循环引用的问题。\n\n## 可达性分析算法\n\n通过一系列GC Roots作为起始点向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可引用的。\n\n![arrive](http://blog.default.nanwulife.com/0635cbe8.png)\n\n可作为GC Roots的对象包括下面几种：\n- 虚拟机栈中引用的对象。\n- 方法区中类静态属性引用的对象。\n- 方法区中常量引用的对象。\n- 本地方法栈中JNI引用的对象。\n\n## finalize\n\n如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记。如果没有覆盖finalize()方法或者该方法已经被虚拟机调用过，那么它将被回收；否则，会将这个对象放置在一个叫做F-Queue的队列中，要想不被回收，就要在finalize()中重新与引用链上的任何一个对象建立关联。\n\n# 引用类型\n\n对象的引用类型分为强引用、软引用、弱引用、虚引用，这四种引用强度依次减弱。\n\n- 强引用：类似`Object obj = new Object()`这类的引用，强引用关联的对象永远不会被回收。\n- 软引用：软引用是用来描述一些还有用但并非必需的对象。在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存才会抛出内存溢出异常。简单的说，被软引用关联的对象只有在内存不够的情况下才会被回收。\n- 弱引用：强度比软引用更弱一些，无论当前内存是否足够，被弱引用关联的对象一定会被回收。\n- 虚引用：一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象。为一个对象设置虚引用关联的唯一目的就是能在这个对象被回收时收到一个系统通知。\n\n# 垃圾收集算法\n\n最基础的垃圾收集算法有三种：标记-清除算法、复制算法、标记-整理算法，我们常用的垃圾回收器一般都采用分代收集算法。\n\n## 标记-清除算法\n\n首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。\n\n![](http://blog.default.nanwulife.com/Inked132702691_LI.jpg)\n\n不足：标记和清除的两个过程的效率都不高；会产生大量不连续的内存碎片，导致无法给大对象分配内存。\n\n## 复制算法\n\n将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。\n\n![](http://blog.default.nanwulife.com/Inked132817416_LI.jpg)\n\n现在的商业虚拟机都采用这种收集算法来回收新生代，但并不需要按照1：1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。\n\n如果每次回收有多于 10% 的对象存活，那么一块 Survivor 空间就不够用了，此时需要依赖于老年代进行分配担保，也就是借用老年代的空间存储放不下的对象。\n\n## 标记-整理算法\n\n复制算法在对象存活率较高时要进行较多的复制操作，也有可能需要额外的空间进行分配担保，所以在老年代一般不能直接选用这种算法。\n\n标记-整理算法的标记过程仍与标记-清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。\n\n![](http://blog.default.nanwulife.com/Inked132911511_LI.jpg)\n\n## 分代收集算法\n\n现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为新生代和老年代，新生代使用复制算法，老年代使用标记-清除或者标记-整理算法。\n\n# 垃圾收集器\n\n如果说收集算法是内存回收的方法论，垃圾收集器就是内存回收的具体实现。\n\n![](http://blog.default.nanwulife.com/5959fbae-ad05-40e3-b615-9a89d0e56ed9.png)\n\n## Serial收集器\n\n串行收集器是最古老，最稳定以及效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。\n\n![](http://blog.default.nanwulife.com/20180805154818087679.png)\n\n## ParNew收集器\n\nParNew收集器其实就是Serial收集器的多线程版本。\n\n![](http://blog.default.nanwulife.com/ParNew%E5%92%8CSerialOld%E6%94%B6%E9%9B%86%E5%99%A8%E8%BF%90%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg)\n\n## Parallel Scavenge收集器\n\nParallel是一个多线程收集器。其它收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标是达到一个可控制的吞吐量，它被称为“吞吐量优先”收集器。这里的吞吐量指 CPU 用于运行用户代码的时间占总时间的比值。\n\n停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，收集时间缩短，但同时垃圾回收也变得频繁，导致吞吐量下降。\n\n可以通过一个开关参数打开GC自适应的调节策略（GC Ergonomics），就不需要手工指定新生代的大小、Eden和Survivor区的比例、晋升老年代对象年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。\n\n## Serial Old收集器\n\nSeriol Old是Serial收集器的老年代版本，同样是一个单线程收集器。\n\n## Parallel Old收集器\n\nParallel Old是Parallel Scavenge收集器的老年代版本，同样是一个多线程收集器。\n\n## CMS收集器\n\nCMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。\n\n从名字（包含“Mark Sweep”）上就可以看出CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为以下几个阶段：\n1. **Initial Mark**：这个是CMS两次stop-the-wolrd事件的其中一次，这个阶段的目标是标记那些直接被GC root引用或者被年轻代存活对象所引用的所有对象。\n2. **Concurrent Mark**：在这个阶段收集器会根据上个阶段找到的GC Roots遍历查找，然后标记所有存活的对象，也就是进行GC Roots Tracing的过程。这个阶段会与用户的应用程序并发运行，因此在标记期间用户的程序可能会改变一些引用，并不是老年代所有的存活对象都会被标记。\n3. **Concurrent Preclean**：这也是一个并发阶段，与应用的线程并发运行。在并发运行的过程中，一些对象的引用可能会发生变化，但当种情况发生时，JVM会将包含这个对象的区域（Card）标记为Dirty，这也就是Card Marking。在这个阶段，能够从Dirty对象到达的对象也会被标记，这个标记做完之后，dirty card标记就会被清除了。\n4. **Concurrent Abortable Preclean**：这也是一个并发阶段，这个阶段是为了尽量承担stop-the-world中最终标记阶段的工作。\n5. **Final Remark**：这是第二个STW阶段，也是CMS中的最后一个，这个阶段的目标是标记老年代所有的存活对象，由于之前的阶段是并发执行的，gc线程可能跟不上应用程序的变化，为了完成标记老年代所有存活对象的目标，STW就非常有必要了。\n6. **Concurrent Sweep**：这个阶段清除那些不再使用的对象，回收它们的占用空间为将来使用。\n7. **Concurrent Reset**：这个阶段会重设CMS内部的数据结构，为下次的GC做准备。\n\n![](http://blog.default.nanwulife.com/201707260004.png)\n\n由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行。\n\nCMS收集器具有以下几个缺点：\n- 在并发阶段，CMS虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。\n- CMS无法处理浮动垃圾。\n- 需要预留一部分空间提供并发收集时的程序运作使用，因此不能等到老年代完全被填满再进行收集，要是CMS运行期间预留的内存无法满足程序需要，就会出现“Concurrent Mode Failure”失败，这时将会启用Serial Old收集器重新进行老年代的垃圾收集，停顿时间就很长了。\n- CMS是基于“标记-清除”算法实现的收集器，会产生大量空间碎片。\n\n> 浮动垃圾：由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在当次收集中处理掉它们，只好留待下一次GC时再清理掉，这一部分垃圾就称为“浮动垃圾”。\n\n## G1收集器\n\nG1（Garbage-First）收集器是一款面向服务端应用的垃圾收集器，在多CPU和大内存的场景下有很好的性能。HotSpot开发团队赋予它的使命是未来可以替换掉CMS收集器。G1收集器具有以下几个特点：\n- 垃圾收集线程和应用线程并发执行，和CMS一样。\n- 分代收集：不需要其它收集器配合就能独立管理整个GC堆，采用不同的方式去收集。\n- 空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个Region之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。\n- 可预测的停顿：能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在GC上的时间不得超过N毫秒。\n\n在G1算法中，采用了一种完全不同的方式组织堆内存，它将整个Java堆划分为多个大小相等的独立区域Region，每个Region是逻辑连续的一段内存，虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了。\n\n![](http://blog.default.nanwulife.com/9bbddeeb-e939-41f0-8e8e-2b1a0aa7e0a7.png)\n\nG1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region，这保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。\n\n每个Region都有一个Remembered Set，用来记录该Region对象的引用对象所在的Region。通过使用Remembered Set，在做可达性分析的时候就可以避免全堆扫描。\n\nG1收集器的运作大致可划分为以下几个步骤：\n- 初始标记\n- 并发标记\n- 最终标记\n- 筛选回收\n\n![](http://blog.default.nanwulife.com/g1.jpg)\n\n前三个步骤与CMS收集器相似，最后的筛选回收阶段对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划。\n\n# 内存分配策略\n\n- 对象优先分配在Eden区：如果Eden区没有足够的空间时，虚拟机执行一次Minor GC。\n- 大对象直接进入老年代：大对象是指需要大量连续内存空间的对象，这样做的目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝（新生代采用复制算法收集内存）。\n- 长期存活的对象进入老年代：为对象定义年龄计数器，对象在Eden区出生并经过Minor GC依然存活，将被移动到Survivor区中，年龄增加1岁，增加到年龄阈值则移动到老年代中。\n- 动态判断对象的年龄：如果在Survivor区中相同年龄所有对象大小的总和大于Survivor空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代而无需达到年龄阈值。\n- 空间分配担保：新生代使用复制收集算法，但为了了内存利用率，只是用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况，就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的，所以在发生Minor GC之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果大于则确保是安全的，如果不大于，则只好以晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多的空间。\n\n# 方法区的回收\n\n垃圾收集主要针对于Java堆进行，方法区虽然也有垃圾收集，但性价比很低，主要回收两部分内容：废弃常量和无用的类。\n\n无用的类需要满足下面三个条件：\n- 该类所有的实例都已经被回收，也就是堆中不存在该类的任何实例。\n- 加载该类的ClassLoader已经被回收。\n- 该类对应的Class对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。\n\n# 参考资料\n\n- 周志明. 深入理解 Java 虚拟机 [M]. 机械工业出版社, 2011.\n- [JVM 之 ParNew 和 CMS 日志分析](http://matt33.com/2018/07/28/jvm-cms/#%E9%98%B6%E6%AE%B57%EF%BC%9AConcurrent-Reset)","tags":["JVM","垃圾收集"],"categories":["JVM"]},{"title":"深入理解JVM-类加载机制","url":"/2019/01/28/深入理解JVM-类加载机制/","content":"## 类的生命周期\n\n![](http://blog.default.nanwulife.com/870109-20160503213708857-429280187.png)\n\n## 类加载过程\n\n类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。\n\n在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也称为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。\n\n<!--more-->\n\n### 加载\n\n在加载阶段，虚拟机需要完成以下三件事情：\n- 通过一个类的全限定名来获取其定义的二进制字节流。\n- 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n- 在Java堆中生成一个代表这个类的`java.lang.Class`对象，作为对方法区中这些数据的访问入口。\n\n相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。\n\n加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个`java.lang.Class`类的对象，这样便可以通过该对象访问方法区中的这些数据。\n\n> 二进制字节流不一定要从一个Class文件中获取，还可以通过以下几种方式获取：\n> - 从ZIP包读取，成为JAR、EAR、WAR格式的基础。\n> - 从网络中获取，最典型的应用是Applet。\n> - 运行时计算生成，例如动态代理技术，在`java.lang.reflect.Proxy`中使用`ProxyGenerator.generateProxyClass`来为特定接口生成代理类的二进制字节流。\n> - 由其他文件生成，例如由JSP文件生成对应的Class类。\n\n### 验证\n\n确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作：\n\n- 文件格式验证：验证字节流是否符合Class文件格式的规范。\n- 元数据验证：对类的元数据信息进行语义校验，保证不存在不符合Java语言规范的元数据信息。（例如：这个类是否有父类）。\n- 字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件。\n- 符号引用验证：确保解析动作能正确执行。\n\n验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用`-Xverifynone`参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。\n\n### 准备\n\n准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。\n\n注意：\n- 这时候进行内存分配的仅包括类变量（被static修饰的变量），实例变量将会在对象实例化时（实例化不是类加载的一个过程）随着对象一起分配在Java堆中。\n- 初始值通常情况下是数据类型的零值，但如果类字段同时被`final`和`static`修饰（即为常量），那么在准备阶段就会被初始化为所指定的值。\n\n### 解析\n\n解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。\n\n> 符号引用：符号引用以一组符号来描述所引用的目标，可以是任何形式的字面量，与虚拟机实现的内存布局无关，引用的目标不一定已经加载到内存中。\n\n> 直接引用：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局相关的，引用的目标必定已经在内存中存在。\n\n其中解析过程在某些情况下可以在初始化阶段之后再开始，这是为了支持Java的动态绑定。\n\n> 动态绑定是指在执行期间（非编译期）判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。 程序运行过程中，把函数（或过程）调用与响应调用所需要的代码相结合的过程称为动态绑定。\n\n### 初始化\n\n初始化阶段才真正开始执行类中定义的Java程序代码。初始化阶段即虚拟机执行类构造器`<clinit>()`方法的过程。\n\n> - `<clinit>()`方法是由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。\n> - 与类的构造函数（或者说实例构造器`<init>()`）不同，不需要显式的调用父类的构造器。虚拟机会自动保证在子类的`<clinit>()`方法运行之前，父类的`<clinit>()`方法已经执行结束。因此虚拟机中第一个执行`<clinit>()`方法的类肯定为`java.lang.Object`。\n> - 由于父类的`<clinit>()`方法先执行，也就意味着父类中定义的静态语句块的执行要优先于子类。\n> - `<clinit>()`方法对于类或接口不是必须的，如果一个类中不包含静态语句块，也没有对类变量的赋值操作，编译器可以不为该类生成`<clinit>()`方法。\n> - 接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成`<clinit>()`方法。但接口与类不同的是，执行接口的`<clinit>()`方法不需要先执行父接口的`<clinit>()`方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的`<clinit>()`方法。\n> - 虚拟机会保证一个类的`<clinit>()`方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的`<clinit>()`方法，其它线程都会阻塞等待，直到活动线程执行`<clinit>()`方法完毕。如果在一个类的`<clinit>()`方法中有耗时的操作，就可能造成多个线程阻塞，在实际过程中此种阻塞很隐蔽。\n\n在准备阶段，类变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源。在Java中对类变量进行初始值设定有两种方式：\n- 声明类变量时指定初始值。\n- 使用静态代码块为类变量指定初始值。\n\n只有当对类主动引用的时候才会导致类的初始化，主动引用有以下几种：\n- 创建类的实例，也就是new的方式。\n- 访问某个类或接口的静态变量，或者对该静态变量赋值。\n- 调用类的静态方法。\n- 使用`java.lang.reflect`包的方法对类进行反射调用的时候。\n- 当初始化一个类的时候，如果其父类还没有进行过初始化，则需要先触发其父类的初始化。\n- 当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个主类。\n\n除主动引用外的所有引用类的方式都不会触发初始化，被称为被动引用，常见有以下几个例子:\n- 通过子类引用父类的静态字段，不会导致子类初始化。\n- 通过数组定义来引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自`Object`的子类，其中包含了数组的属性和方法。\n\n## 类加载器\n\n两个类相等需要类本身相等，并且使用同一个类加载器进行加载。这是因为每一个类加载器都拥有一个独立的类名称空间。\n\n从 Java 虚拟机的角度来讲，只存在以下两种不同的类加载器：\n\n- 启动类加载器（Bootstrap ClassLoader），这个类加载器用C++实现，是虚拟机自身的一部分。\n- 所有其他类的加载器，这些类由Java实现，独立于虚拟机外部，并且全都继承自抽象类`java.lang.ClassLoader`，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类。\n\n站在Java开发人员的角度来看，类加载器可以大致划分为以下三类：\n- 启动类加载器（Bootstrap ClassLoader）：此类加载器负责将存放在 `<JRE_HOME>\\lib`目录中的，或者被`-Xbootclasspath`参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如`rt.jar`，名字不符合的类库即使放在`lib`目录中也不会被加载）类库加载到虚拟机内存中。启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给启动类加载器，直接使用`null`代替即可。\n- 扩展类加载器（Extension ClassLoader）：此类加载器是由`ExtClassLoader（sun.misc.Launcher$ExtClassLoader）`实现的。它负责将` <JAVA_HOME>/lib/ext`或者被`java.ext.dir`系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。\n- 应用程序类加载器（Application ClassLoader）：此类加载器是由`AppClassLoader（sun.misc.Launcher$AppClassLoader）`实现的。由于这个类加载器是`ClassLoader`中的`getSystemClassLoader()`方法的返回值，因此一般称为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。\n\n## 双亲委派模型\n\n双亲委派模型的工作流程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。\n\n![](http://blog.default.nanwulife.com/2ebc07fadf474b07bd5663a8ec8fe2db.png)\n\n该模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。这里类加载器之间的父子关系一般通过组合关系来实现，而不是通过继承的关系实现。\n\n### 具体过程\n\n1. 当`AppClassLoader`加载一个`class`时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器`ExtClassLoader`去完成。\n2. 当`ExtClassLoader`加载一个`class`时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给`BootStrapClassLoader`去完成。\n3. 如果`BootStrapClassLoader`加载失败（例如在`<JRE_HOME>\\lib`里未查找到该`class`），会使用`ExtClassLoader`来尝试加载。\n4. 若`ExtClassLoader`也加载失败，则会使用`AppClassLoader`来加载，如果`AppClassLoader`也加载失败，则会报出异常`ClassNotFoundException`。\n\n### 优点\n\n使得Java类随着它的类加载器一起具有一种带有优先级的层次关系，从而使得基础类得到统一。\n\n例如`java.lang.Object`存放在`rt.jar`中，如果编写另外一个`java.lang.Object`的类并放到`ClassPath`中，程序可以编译通过。由于双亲委派模型的存在，所以在`rt.jar`中的`Object`比在`ClassPath`中的`Object`优先级更高，这是因为`rt.jar`中的`Object`使用的是启动类加载器，而`ClassPath`中的`Object`使用的是应用程序类加载器。`rt.jar`中的`Object`优先级更高，那么程序中所有的`Object`都是这个`Object`。\n\n### 自定义类加载器\n\n通常情况下，我们都是直接使用系统类加载器，但是有的时候，我们也需要自定义类加载器。\n\n自定义类加载器一般都是继承自`ClassLoader`类，而`java.lang.ClassLoader`的`loadClass()`实现了双亲委派模型的逻辑，因此自定义类加载器最好不要去重写它。\n\n## 参考资料\n\n- 周志明. 深入理解 Java 虚拟机 [M]. 机械工业出版社, 2011.","tags":["JVM"],"categories":["JVM"]},{"title":"深入理解JVM-内存模型","url":"/2019/01/28/深入理解JVM-内存模型/","content":"# Java内存模型\n\n由于计算机上的内存模型涉及到物理的主内存、高速缓存和寄存器等。这些不同的计算机不同的操场系统可能会存在差异，Java虚拟机规范中试图定义一种Java内存模型，来屏蔽掉各种硬件和操作系统的内存访问差异，让Java程序在各个平台下都能达到一致的访问效果。\n\n<!--more-->\n\n## 主内存与工作内存\n\n![](http://blog.default.nanwulife.com/V%29M4K%7D%7BE0VJ5B%28%7B7XV2PJ7D.png)\n\nJava内存模型规定了所有变量都存储在主内存内（主内存包括方法区和堆），此处主内存隶属于Java虚拟机内存的一部分，而虚拟机内存是操作系统分配的。每条Java线程还有自己的工作内存，工作内存中保存了被该线程使用到的变量的主内存的副本，线程对变量的所有操作都在工作内存中进行，Java线程之间的变量值传递都通过主内存来完成。\n\n## 内存间的交互\n\n关于主内存和工作内存间的交互协议，即一个变量如何从主内存拷贝到工作内存、又是如何从工作内存同步回主内存之类的实现细节，Java内存模型中定义了8种操作，这8种操作实现时必须保证每一种操作都是原子的、不可再分的，其中前4条是作用于主内存，后4条作用于工作内存：\n\n- lock锁定：将一个变量标识为线程独占状态\n- unlock解锁：将锁定状态的变量解除锁定，释放后的变量才可以被其他变量锁定\n- read读取：将变量从主内存传输到线程的工作内存中，待之后的load加载\n- write写入：把store操作从工作内存中得到的变量值写入主内存的变量中\n- load加载：将read后从主内存得到的变量值加载到工作内存的变量副本中\n- use使用：把工作内存中的一个变量值传递给字节码执行引擎，等待字节码指令使用\n- assign赋值：把一个从执行引擎接收到的值赋值给工作内存的变量\n- store存储：把工作内存中一个变量的值传送到主内存中，以便随后的write使用\n\n# 运行时数据区域\n\nJava虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。其中程序计数器、JVM栈、本地方法栈是线程私有的，而方法区和堆是所有线程共享的。\n\n![运行时数据区域](http://blog.default.nanwulife.com/asdasdasdasdasdsada.png)\n\n## 程序计数器\n\n一块较小的内存空间，可以看作当前线程所执行的字节码的行号指示器：如果线程正在执行一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行Native方法，这个计数器值为空。\n\n## Java虚拟机栈\n\nJava虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n\n> 局部变量表：局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。局部变量表所需的内存空间在编译期间完成分配。\n>\n> 动态链接：动态链接是在运行时将符号引用解析为直接引用的过程。\n>  \n> 操作数：参与运算的常量或者变量称为操作数。\n\n该区域可能抛出以下异常：\n- 当线程请求的栈深度超过最大值，会抛出`StackOverflowError`异常。\n- 栈进行动态扩展时如果无法申请到足够内存，会抛出`OutOfMemoryError`异常。\n\n## 本地方法栈\n\n本地方法栈与Java虚拟机栈类似，它们的区别只不过是虚拟机栈为虚拟机执行Java方法服务，而本地方法栈为本地方法服务。该区域可能抛出的异常与Java虚拟机栈一样。\n\n## Java堆\n\nJava堆是Java虚拟机所管理的内存中最大的一块，是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。\n\nJava堆是垃圾收集器管理的主要区域，还可以细分为新生代和老年代。\n\n> 一般情况下，新创建的对象都会存放到新生代中。\n>\n> 在新生代每进行一次垃圾收集后，就会给存活的对象“加1岁”，当年龄达到一定数量的时候就会进入老年代，另外，比较大的对象也会进入老年代。\n\nJava堆不需要物理上连续的内存空间，逻辑上连续即可。如果堆中没有内存完成实例分配且堆也无法再扩展时，将抛出`OutOfMemoryError`异常。\n\n## 方法区\n\n方法区也是各个线程共享的内存区域，之前是用永久代实现的，用于存储已被虚拟机加载的类信息、常量、静态变量等数据。由于永久代的回收效率低，对于永久代的大小指定困难且容易发生内存溢出等原因，JDK1.8彻底废弃永久代而使用元空间取代，并将字符串常量转移到堆中。元空间并不在虚拟机中，而是使用本地内存，因此默认情况下元空间的大小仅受本地内存限制。\n\n# 控制参数汇总\n可以通过如下参数来控制各区域的内存大小：\n```\n-Xms设置堆的最小空间大小\n\n-Xmx设置堆的最大空间大小\n\n-XX:NewSize设置新生代最小空间大小\n\n-XX:MaxNewSize设置新生代最大空间大小\n\n-Xss设置每个线程的堆栈大小\n```\n\n# 参考资料\n- 周志明. 深入理解 Java 虚拟机 [M]. 机械工业出版社, 2011.","tags":["JVM","内存模型"],"categories":["JVM"]},{"title":"操作系统原理-死锁","url":"/2019/01/28/操作系统原理-死锁/","content":"# 死锁的定义\n\n一组进程中，每个进程都无限等待被该组进程中另一进程所占有的资源，因而永远无法得到的资源，这种现象称为进程死锁，这一组进程就称为死锁进程。\n\n<!--more-->\n\n# 死锁与活锁的区别\n\n活锁指的是一组进程既无进展也没有阻塞 ，由于某些条件没有满足，导致一直重复尝试并失败。例如错误地使用Pertonson算法：\n\n![活锁](http://blog.operatingsystem.nanwulife.com/EOSY6EMJT9MKNS1AL88.png)\n\n# 产生死锁的必要条件\n\n- 互斥使用（资源独占）：一个资源每次只能给一个进程使用。\n- 占有且等待（请求和保持）：进程在申请新的资源的同时保持对原有资源的占有。\n- 不可抢占：资源申请者不能强行的从资源占有者手中夺取资源，资源只能由占有者自愿释放。\n- 循环等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。\n\n# 资源分配图\n\n系统由若干类资源构成，一类资源称为一个资源类；每个资源类中包含若干个同种资源，称为资源实例。用方框表示资源类，用方框中的黑圆点表示资源实例，用圆圈中加进程名表示进程。如果资源分配图中没有环路，则系统中没有死锁， 如果图中存在环路则系统中可能存在死锁。\n\n![RAG](http://blog.operatingsystem.nanwulife.com/NZXIGJJX_ST86ZZU.png)\n\n## 资源分配图化简\n\n1. 找一个非孤立、且只有分配边的进程结点，去掉分配边，将其变为孤立结点。\n2. 再把相应的资源分配给一个等待该资源的进程，即将该进程的申请边变为分配边。\n\n如果一个图可完全化简（所有的资源和进程都变成孤立的点），则不会产生死锁；如果一个图不可完全化简（即图中还有边存在），则会产生死锁。\n\n# 死锁预防\n\n防止产生死锁的四个必要条件中任何一个条件发生，以此排除发生死锁的可能性。\n\n## 破坏“互斥使用”条件\n\n把独占资源变为共享资源。例如在SPOOLing系统中，实际上并没有为任何进程分配这台打印机，而只是在输入井和输出井中，为进程分配一存储区和建立一章I/O请求表。这样，便把独占设备改造为共享设备。\n\n## 破坏“占有且等待”条件 \n\n实现方案一：要求每个进程在运行前必须一次性申请它所要求的所有资源，且仅当该进程所要资源均可满足时才给予一次性分配。\n\n实现方案二：在允许进程动态申请资源前提下规定，一个进程在申请新的资源不能立即得到满足而变为等待状态之前，必须释放已占有的全部资 源，若需要再重新申请。 \n\n## 破坏“不可抢占”条件\n\n当一个进程申请的资源被其他进程占用时，可以通过操作系统抢占这一资源(两个进程优先级不同) 。\n\n## 破坏“循环等待”条件\n\n通过定义资源类型的线性顺序实现。\n\n把系统中所有资源编号，进程在申请资源时必须严格按资源编号的递增次序进行，否则操作系统不予分配。 \n\n# 死锁避免\n\n在系统运行过程中，对进程发出的每一个系统能够满足的资源申请进行动态检查，并根据检查结果决定是否分配资源，若分配后系统发生死锁或可能发生死锁，则不予分配，否则予以分配。\n\n## 安全状态\n\n如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每一个进程运行完毕，则称该状态是安全的。\n\n![安全状态](http://blog.operatingsystem.nanwulife.com/ed523051-608f-4c3f-b343-383e2d194470.png)\n\n例如，图a的第二列Has表示已拥有的资源数，第三列Max表示总共需要的资源数，Free表示还有可以使用的资源数。从图a开始出发，先让B拥有所需的所有资源（图b），运行结束后释放B，此时Free变为5（图c）；接着以同样的方式运行C和A，使得所有进程都能成功运行，因此可以称图a所示的状态时安全的。\n\n## 单个资源的银行家算法\n\n一个小城镇的银行家，他向一群客户分别承诺了一定的贷款额度，算法要做的是判断对请求的满足是否会进入不安全状态，如果是，就拒绝请求；否则予以分配。\n\n![bank](http://blog.operatingsystem.nanwulife.com/d160ec2e-cfe2-4640-bda7-62f53e58b8c0.png)\n\n由图可知，状态b进入状态c是进入了一个不安全的状态，因此恢复原来状态，避免了进入不安全状态。\n\n## 多个资源的银行家算法\n\n上图中有五个进程，四个资源。左边的图表示已经分配的资源，右边的图表示还需要分配的资源。最右边的E、P以及A分别表示：总资源、已分配资源以及可用资源。\n\n检查一个状态是否安全的算法如下：\n\n1. 查找右边的矩阵是否存在一行小于等于向量A。如果不存在这样的行，那么系统将会发生死锁，状态是不安全的。\n2. 假若找到这样一行，将该进程标记为终止，并将其已分配资源加到A 中。\n3. 重复以上两步，直到所有进程都标记为终止，则状态是安全的。\n\n如果一个状态不是安全的，需要拒绝进入这个状态。\n\n![bank](http://blog.operatingsystem.nanwulife.com/62e0dd4f-44c3-43ee-bb6e-fedb9e068519.png)\n\n# 死锁检测与解除\n\n允许死锁发生，但是操作系统会不断监视系统进展情况，判断死锁是否真的发生，一旦死锁发生则采取专门的措施，解除死锁并以最小的代价恢复操作系统运行。\n\n### 死锁的检测\n\n死锁的检测与银行家算法几乎一样，此处不再阐述。\n\n### 死锁的解除\n\n- 利用抢占恢复\n- 利用回滚恢复\n- 通过杀死进程恢复\n\n# 鸵鸟算法\n\n把头埋在沙子里，假装根本没发生问题。\n\n因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。\n\n# 哲学家就餐问题\n\n五个哲学家围着一张圆桌，每个哲学家面前放着食物。哲学家的生活有两种交替活动：吃饭以及思考。当一个哲学家吃饭时，需要先拿起自己左右两边的两根筷子，并且一次只能拿起一根筷子。\n\n![哲学家就餐问题](http://blog.operatingsystem.nanwulife.com/a9077f06-7584-4f2b-8c20-3a8e46928820.jpg)\n\n下面是一种错误的解法，考虑到如果所有哲学家同时拿起左手边的筷子，那么就无法拿起右手边的筷子，造成死锁。\n\n```cpp\n#define N 5\n\nvoid philosopher(int i) {\n    while(true) {\n        think();\n        take(i);       // 拿起左边的筷子\n        take((i+1)%N); // 拿起右边的筷子\n        eat();\n        put(i);\n        put((i+1)%N);\n    }\n}\n```\n\n为了防止死锁的发生，有以下几种解法：\n- 仅当一个哲学家左右两边的筷子都可用时，才允许他拿筷子。\n- 最多允许4个哲学家同时坐在桌子周围。\n- 规定奇数号哲学家先拿左筷子再拿右筷子，而偶数号哲学家相反。\n\n# 参考资料\n\n- Tanenbaum A S, Bos H. Modern operating systems[M]. Prentice Hall Press, 2014.\n- [北京大学操作系统原理（Operating Systems）](https://www.coursera.org/learn/os-pku/home/welcome)\n- [计算机操作系统](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md#%E4%B8%80%E6%A6%82%E8%BF%B0)","tags":["操作系统","死锁"],"categories":["操作系统"]},{"title":"操作系统原理-文件系统","url":"/2019/01/28/操作系统原理-文件系统/","content":"\n\n# 文件的分类\n\n- 普通文件：包含了用户的信息，一般为ASCII或二进制文件\n- 目录文件：管理文件系统的系统文件\n- 特殊文件（设备文件）\n\n<!--more-->\n\n# 文件的逻辑结构\n\n逻辑结构是从用户观点出发看到的文件的组织形式。分为以下两类：\n- 流式文件：无结构，对文件内信息不再划分单位，它是依次的一串字符流构成的文件。\n- 记录式文件：有结构，文件由若干个记录组成，可以按记 录进行读、写、查找等操作。\n\n# 存储介质与物理块\n\n## 典型的存储介质\n\n磁盘(包括固态盘SSD)、磁带、光盘、U盘等等，以下为典型的磁盘结构：\n\n## 物理块\n- 信息存储、传输、分配的独立单位\n- 存储设备划分为大小相等的物理块，统一编号\n\n# 磁盘访问\n\n- 寻道：磁头移动定位到指定磁道\n- 旋转延迟：等待指定扇区从磁头下旋转经过\n- 数据传输：数据在磁盘与内存之间的实际传输\n\n# 文件控制块（FCB）\n\n为管理文件而设置的数据结构，保存管理文件所需的所有有关信息（文件属性或元数据）。\n\n文件控制块一般包含下列常用属性：\n-  文件名\n-  文件号\n-  文件大小\n-  文件地址\n-  创建时间\n-  最后修改时间\n-  最后访问时间\n-  各种标志(只读、隐藏、系统、归档等)\n-  ... \n \n\n# 文件目录\n\n- 文件目录：文件目录由目录项构成，统一管理每个文件的元数据，以支持文件名到文件物理地址的转换。\n- 目录文件：将文件目录以文件的形式存放在磁盘上。\n- 目录项：可以看成是FCB。\n\n![文件目录](http://blog.operatingsystem.nanwulife.com/J%256%28%29GY%289SA9IZM16$CXH@P.png)\n\n# 文件的物理结构\n\n文件的物理结构指的是文件在存储介质上的存放方式。\n\n## 连续结构\n\n文件的信息存放在若干连续的物理块中。\n\n![连续结构](http://blog.operatingsystem.nanwulife.com/FF~%5BI%293MB7VNBNBG29TVL%5B5.png)\n\n连续结构实现简单，且所需的磁盘寻道次数和寻道时间最少，支持顺序存取和随机存取，但文件不能动态增长，且会产生许多外部碎片。\n\n## 链接结构\n\n一个文件的信息存放在若干不连续的物理块中，各块之间通过指针连接，前一个物理块指向下一 个物理块。\n\n![lianjie](http://blog.operatingsystem.nanwulife.com/HGQ679OP1%29H%7BDV4KQBFPN~C.png)\n\n使用链接结构不存在外部碎片的问题，提高了磁盘空间利用率，有利于文件的动态扩充，但是比起连续结构需要更多的寻道次数和寻道时间，且存取速度慢，不适于随机存取。\n\n## 索引结构\n\n一个文件的信息存放在若干不连续物理块中，系统为每个文件建立一个专用数据结构索引表，并将这些物理块的块号存放在该索引表中。\n\n![索引结构](http://blog.operatingsystem.nanwulife.com/AS%7DDZ0~DVA%29ST%5B42GL_1J_X.png)\n\n索引结构保持了链接结构的优点，也解决了其缺点：既能顺序存取又能随机存取，满足了文件动态增长的要求，能充分利用磁盘空间。但是索引结构依然有较多的寻道次数和寻道时间，而索引表本身也带来了额外系统开销。\n\n### 多级索引结构（综合模式）\n\n![多级索引](http://blog.nanwulife.com/LF%7DAA%5DF%60EYX$8D88AM@UZTF.png)\n\nUNIX文件系统采用的便是这种多级索引结构（综合模式）：每个文件的索引表有15个索引项，每项2个字节，前12项直接存放文件的物理块号，如果文件大于12块，则利用第13项指向一个物理块作为一级索引表。假设扇区大小为512字节，物理块等于扇区块大小，那么一级索引表可以存放256个物理块号。对于更大的文件还可利用第14和第15项作为二级和三级索引表。\n\n![unix多级索引](http://blog.operatingsystem.nanwulife.com/IM@B%29N356ONDW74_EW7D@M1.png)\n\n# 文件目录检索\n\n用户给出文件名，按文件名查找到目录项/FCB，根据目录项/FCB中文件物理地址等信息，计算出文件中任意记录或字符在存储介质上的地址。\n\n![文件目录检索](http://blog.operatingsystem.nanwulife.com/%2998%5BS7GNZ@V8~ZL%7B$H%7DBW%5B1.png)\n\n## 目录项分解法\n\n通过目录项分解法可以加快文件目录的检索速度。\n\n目录项分解法即把FCB分解成两部分：符号目录项（文件名，文件号）、基本目录项（除文件名外的所有字段）。目录文件改进后减少了访盘次数，提高了文件检索速度。\n\n# 磁盘调度算法\n\n当有多个访盘请求等待时，采用一定的策略，对这些请求的服务顺序调整安排，以降低平均磁盘服务时间，达到公平、高效。\n\n## 先来先服务（FCFS）\n\n按访问请求到达的先后次序服务。\n\n优点是简单公平，但效率不高，相临两次请求可能会造成最内到最外的柱面寻道，使磁头反复移动，增加了服务时间，对机械也不利。\n\n![FCFS](http://blog.operatingsystem.nanwulife.com/IQXXIMC5P%7D%28%259Q%25S92Y0D_7.png)\n\n## 最短寻道时间优先（Shortest Seek Time First）\n\n优先选择距当前磁头最近的访问请求进行服务。\n\n虽然改善了磁盘平均服务时间，但是造成某些访问请求长期等待得不到服务，也就是饥饿现象。\n\n![SSTF](http://blog.operatingsystem.nanwulife.com/%605%7BWTIQ%5B%7DAJBLY%7BJICLY3Z5.png)\n\n## 扫描算法（SCAN）\n\n扫描算法又称为电梯算法，当设备无访问请求时，磁头不动；当有访问请求时，磁头按一个方向移动，在移动过程中对遇到的访问请求进行服务，然后判断该方向上是否还有访问请求，如果有则继续扫描；否则改变移动方向，并为经过的访问请求服务，如此反复。\n\n![scan](http://blog.operatingsystem.nanwulife.com/F%5BH%5D6J7%7DB0UL%284U4%25%29Z1Q91.png)\n\n\n## 单向扫描算法（CSCAN）\n\n扫描调度算法（SCAN）存在这样的问题：当磁头刚从里向外移动过某一磁道时，恰有一进程请求访问此磁道，这时该进程必须等待，待磁头从里向外，然后再从外向里扫描完所有要访问的磁道后，才处理该进程的请求，致使该进程的请求被严重地推迟。\n\n为了减少这种延迟，CSCAN算法规定磁头只做单向移动。例如，磁头只自里向外移动，当磁头移到最外的被访问磁道时，磁头立即返回到最里的欲访磁道，即将最小磁道号紧接着最大磁道号构成循环，进行扫描。\n\n## 旋转调度算法\n\n旋转调度算法根据延迟时间来决定执行次序的调度，请求访问分为以下三种情况：\n- 若干等待访问者请求访问同一磁头上的不同扇区 \n- 若干等待访问者请求访问不同磁头上的不同编号的扇区\n- 若干等待访问者请求访问不同磁头上具有相同的扇区\n\n对于前两种情况总是让首先到达读写磁头位置下的扇区先进行传送操作，而对于第三种情况，这些扇区同时到达读写磁头位置下，可任意选择一个读写磁头进行传送操作。\n\n# 参考资料\n \n- Tanenbaum A S, Bos H. Modern operating systems[M]. Prentice Hall Press, 2014.\n- [北京大学操作系统原理（Operating Systems）](https://www.coursera.org/learn/os-pku/home/welcome)\n- [计算机操作系统](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md#%E4%B8%80%E6%A6%82%E8%BF%B0)","tags":["操作系统"],"categories":["操作系统"]},{"title":"操作系统原理-存储模型","url":"/2019/01/28/操作系统原理-存储模型/","content":"\n# 地址重定位\n\n为了保证CPU执行指令时可正确访问内存单元，需要将用户程序中的逻辑地址转换为运行时可由机器直接寻址的物理地址，这一过程称为地址重定位（又称地址转换、地址变换、地址翻译、地址映射）。\n\n<!--more-->\n\n- 逻辑地址（相对地址，虚拟地址）：目标代码通常采用相对地址的形式，其首地址为0， 其余地址都相对于首地址而编址。不能用逻辑地址在内存中读取信息。\n- 物理地址（绝对地址，实地址）：内存中存储单元的地址，可直接寻址。\n\n地址重定位分为静态重定位和动态重定位：\n\n- 静态重定位：当用户程序加载到内存时，一次性实现逻辑地址到物理地址的转换。\n- 动态重定位：在进程执行过程中进行地址变换，即逐条指令执行时完成地址转换。\n\n# 伙伴系统\n\nLinux底层内存管理采用伙伴系统这一种经典的内存分配方案。\n\n主要思想：将内存按2的幂进行划分，组成若干空闲块链表；查找该链表找到能满足进程需求的最佳匹配块。\n\n过程：\n1. 首先将整个可用空间看作一块： 2^u\n2. 假设进程申请的空间大小为 s，如果满足 2^u-1 < s <= 2^u，则分配整个块；否则，将块划分为两个大小相等的伙伴，大小为2^u-1 \n3. 一直划分下去直到产生大于或等于 s 的最小块\n\n![伙伴系统](http://blog.operatingsystem.nanwulife.com/FWWZYB@V87A_~Q64%5B1V~FJL.png)\n\n# 基本内存管理方案一\n\n整个进程进入内存中一片连续区域。\n\n## 单一连续区\n\n内存在此方式下分为系统区和用户区，系统区仅提供给操作系统使用，用户区是为用户提供的、除系统区之外的内存空间。一段时间内只有一个进程在内存，简单但内存利用率低。\n\n## 固定分区\n\n把内存空间分割成若干区域，称为分区，每个分区的大小可以相同也可以不同，但分区大小固定不变，每个分区装一个且只能装一个进程。\n\n这种方式会产生两个问题：一是程序太大而放不进任何一个分区中；二是容易产生内部碎片。\n\n## 可变分区\n\n可变分区是一种动态划分内存的分区方法。这种分区方法不预先将内存划分，而是在进程装入内存时，根据进程的大小动态地建立分区，并使分区的大小正好适合进程的需要。因此系统中分区的大小和数目是可变的。\n\n可变分区虽然不会产生内部碎片，但容易产生外部碎片，导致内存利用率下降。\n\n在进程装入或换入主存时，如果内存中有多个足够大的空闲块，操作系统必须确定分配哪个内存块给进程使用，考虑以下几种分配算法：\n\n- 首次适配（first fit）：在空闲区表中找到第一个满足进程要求的空闲区。该算法优先使用低址部分空闲区，在低址空间造成许多小的空闲区，在高地址空间保留大的空闲区。\n- 下次适配（next fit）：从上次找到的空闲区处接着查找。\n- 最佳适配（best fit）：查找整个空闲区表，找到能够满足进程要求的最小空闲区。该算法保留大的空闲区，但造成许多小的空闲区。\n- 最差适配（worst fit ）：总是分配满足进程要求的最大空闲区。该算法保留小的空闲区，尽量减少小的碎片产生。\n\n# 基本内存管理方案二\n\n一个进程进入内存中若干片不连续的区域。\n\n## 页式存储管理方案\n\n用户进程地址空间被划分为大小相等的部分，称为页（page）或页面，从0开始编号。内存空间按同样大小划分为大小相等的区域，称为页框（page frame）或物理页面或内存块，从0开始编号。\n\n内存分配规则：以页为单位进行分配，并按进程需要的页数来分配；逻辑上相邻的页，物理上不一定相邻。\n\n每个进程一个页表，存放在内存。\n\n\n### 地址转换\n\nCPU取到逻辑地址，自动划分为页号和页内地址；用页号查页表，得到页框号，再与页内偏移拼接成为物理地址。\n\n\n## 段式存储管理方案\n\n将用户进程地址空间按程序自身的逻辑关系划分为若干个程序段，每个程序段都有一个段号。内存空间被动态划分为若干长度不相同的区域， 称为物理段，每个物理段由起始地址和长度确定。\n\n内存分配规则：以段为单位进行分配，每段在内存中占据连续空间，但各段之间可以不相邻。\n\n### 地址转换\n\nCPU取到逻辑地址，自动划分为段号和段内地址；用段号查段表，得到该段在内存的起始地址，与段内偏移地址计算出物理地址。\n\n# 覆盖技术\n\n把一个程序划分为一系列功能相对独立的程序段，让执行时不要求同时装入内存的程序段组成一组（称为覆盖段），共享同一块内存区域 ，这种内存扩充技术就是覆盖技术。\n\n程序段先保存在磁盘上，当有关程序段的前一部分执行结束，把后续程序段调入内存，覆盖前面的程序段。\n\n一般要求作业各模块之间有明确的调用结构，程序员要向系统指明覆盖结构，然后由操作系统完成自动覆盖。\n\n# 交换技术\n\n内存空间紧张时，系统将内存中某些进程暂时移到外存，把外存中某些进程换进内存，占据前者所占用的区域（进程在内存与磁盘之间的动态调度）。\n\n# 虚拟存储技术\n\n所谓虚拟存储技术是指：当进程运行时，先将其一部分装入内存，另一部分暂留在磁盘，当要执行的指令或访问的数据不在内存时，由操作系统自动完成将它们从磁盘调入内存的工作。\n\n- 虚拟地址空间：分配给进程的虚拟内存\n- 虚拟地址：在虚拟内存中指令或数据的位置， 该位置可以被访问，仿佛它是内存的一部分\n- 虚拟内存：把内存与磁盘有机地结合起来使用，从而得到一个容量很大的“内存”\n\n# 虚拟页式存储管理系统\n\n虚拟页式即将虚拟存储技术和页式存储管理方案结合起来，以CPU时间和磁盘空间换取昂贵内存空间。\n\n基本思想：进程开始运行之前，不是装入全部页面， 而是装入一个或零个页面，之后，根据进程运行的需要，动态装入其他页面。当内存空间已满，而又需要装入新的页面时，则根据某种算法置换内存中的某个页面，以便装入新的页面。\n\n## 内存管理单元（MMU）\n\n内存管理单元（MMU）管理着地址空间和物理内存的转换，其中的页表（Page table）存储着页（程序地址空间）和页框（物理内存空间）的映射表。\n\n![MMU](http://blog.operatingsystem.nanwulife.com/cf4386a1-58c9-4eca-a17f-e12b1e9770eb.png)\n\n上图为一级页表结构的地址转换，下图为二级页表结构的地址转换及MMU的位置。\n\n![MMU](http://blog.operatingsystem.nanwulife.com/T%7DASOUFAA70W%7D8%5B%5B9MRZLBJ.png)\n\n\n\n## 二级页表结构及地址映射\n\n页目录表共有2^10 = 1K个表项，每个表项是4B，因此页目录大小为4K，存储在一个4K字节的页面中。同理，一个页表也存储在一个4K字节的页面中。\n\n![二级页表](http://blog.operatingsystem.nanwulife.com/A%5D~%5B6%28XBGCOE%7B%7DGVWG%60BEJ8.png)\n\n\n## 为什么要使用多级页表\n\n系统分配给每个进程的虚拟地址都是4G，那么采用一级页表需要4G／4K = 2^20个表项，如果每个页表项是4B，那么需要4MB的内存空间。但是大多数程序根本用不到4G的虚拟内存空间，比如hello world程序，这样一个几kb的程序却需要4MB的内存空间是很浪费的。如果采用二级页表，那么一级页表只需要4KB的空间用来索引二级页表的地址，像hello world这样的程序可能只需要一个物理页，那么只需要一条记录就可以了，故对于二级页表也只要4KB就足够了，所以这样只需要8KB就能解决问题。\n\n\n## TLB（快表）\n\n页表一般都很大，并且存放在内存中，所以处理器引入MMU后，读取指令、数据需要访问两次内存：首先通过查询页表得到物理地址，然后访问该物理地址读取指令、数据。由于CPU的指令处理速度与内存指令的访问速度差异大，CPU的速度得不到充分利用，为了减少因为MMU导致的处理器性能下降，引入了TLB。\n\nTLB(Translation Lookaside Buffer)转换检测缓冲区相当于页表的缓存，利用程序访问的局部性原理改进虚拟地址到物理地址的转换速度。TLB保存正在运行进程的页表的子集(部分页表项)，只有在TLB无法完成地址转换任务时，才会到内存中查询页表，这样就减少了页表查询导致的处理器性能下降。\n\n![TLB](http://blog.operatingsystem.nanwulife.com/ZX1W%29%7B~6T$LIJ@7983%7B5PJE.png)\n\n# 缺页异常\n\n缺页异常是一种Page Fault（页错误）。在地址映射过程中，硬件检查页表时发现所要访问的页面不在内存，则产生缺页异常，操作系统执行缺页异常处理程序：获得磁盘地址，启动磁盘，将该页调入内存。此时分为两种情况：\n- 如果内存中有空闲页框，则分配一个页框， 将新调入页装入，并修改页表中相应页表项的有效位及相应的页框号。\n- 若内存中没有空闲页框，则要置换内存中某一页框；若该页框内容被修改过，则要将其写回磁盘。 \n\n# 页面置换算法\n\n## 最佳页面置换算法（OPT，Optimal）\n\n置换以后不再需要的或最远的将来才会用到的页面。\n\n这是一种理论上的算法，因为无法知道一个页面多长时间不再被访问，它作为一种标准来衡量其他算法的性能。\n\n## 先进先出算法（FIFO）\n\n选择在内存中驻留时间最长的页并置换它。\n\n该算法会将那些经常被访问的页面也被换出，从而使缺页率升高。\n\n## 第二次机会算法（SCR，Second Chance） \n\n当页面被访问 (读或写) 时设置该页面的R位为1。需要替换的时候，检查最老页面的R位。如果R位是0，那么这个页面既老又没有被使用，可以立刻置换掉；如果是1，就将R位清0，并把该页面放到链表的尾端，修改它的装入时间使它就像刚装入的一样，然后继续从链表的头部开始搜索。\n\n![SCR](http://blog.operatingsystem.nanwulife.com/D96VNCKG0LR6PM1RE%609O0~0.png)\n\n这个算法是对FIFO算法的改进，不会像FIFO一样把经常使用的页面置换出去。\n\n## 时钟算法（CLOCK）\n\n第二次机会算法需要在链表中移动页面，降低了效率。时钟算法使用环形链表将页面连接起来，再使用一个指针指向最老的页面。\n\n![clock](http://blog.operatingsystem.nanwulife.com/5f5ef0b6-98ea-497c-a007-f6c55288eab1.png)\n\n## 最近未使用算法（NRU，Not Recently Used）\n\n选择在最近一段时间内未使用过的一页并置换。\n\n每个页面都有两个状态位：R与M，当页面被访问时设置页面的R=1，当页面被修改时设置M=1。其中R位会定时被清零。可以将页面分成以下四类：\n- R=0，M=0\n- R=0，M=1\n- R=1，M=0\n- R=1，M=1\n\n当发生缺页中断时，NRU算法随机地从类编号最小的非空类中挑选一个页面将它换出。\n\nNRU算法优先换出已经被修改的脏页面（R=0，M=1），而不是被频繁使用的干净页面（R=1，M=0）。\n\n## 最近最久未使用算法（LRU，Least Recently Used ）\n\n虽然无法知道将来要使用的页面情况，但是可以知道过去使用页面的情况。LRU算法选择最后一次访问时间距离当前时间最长的一页并置换，即置换未使用时间最长的一页。\n\n为了实现LRU，需要在内存中维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面是最近最长时间未访问的。\n\n![LRU](http://blog.operatingsystem.nanwulife.com/eb859228-c0f2-4bce-910d-d9f76929352b.png)\n\nLRU的性能接近OPT，但因为每次访问都需要更新链表，因此这种方式实现的LRU代价很高。\n\n## 最不经常使用算法（NFU，Not Frequently Used）\n\nNFU算法选择访问次数最少的页面置换。\n\n因为LRU算法的实现比较麻烦而且开销很大，所以提出了用软件来模拟LRU算法的NFU算法，该算法为每一页设置一个软件计数器，初值为0，每次时钟中断的时候就将计数器加R，发生缺页中断时选择计数器值最小的一页置换。\n\n## 老化算法（AGING）\n\n在NFU算法中存在一个问题：在第一次时钟中断的时候其中一页可能被访问了很多次，之后再未被访问过，然而在以后的时钟中断这一页计数器的值仍然高于其它页，因此其虽然长时间未被访问也不会被置换出去。\n\n为了更好地模拟LRU算法，老化算法对NFU进行了改进，计数器在加R前先右移一位，R位加到计数器的最左端。\n\n![AGING](http://blog.operatingsystem.nanwulife.com/NF17%5DTDZT4S$%60_B%5DV~~_5H1.png)\n\n## 工作集算法\n\n基本思想：根据程序的局部性原理，一般情况下，进程在一段时间内总是集中访问一些页面，这些页面称为活跃页面，如果分配给一个进程的物理页面数太少了，使该进程所需的活跃页面不能全部装入内存，则进程在运行过程中将频繁发生中断 。如果能为进程提供与活跃页面数相等的物理页 面数，则可减少缺页中断次数。 \n \n工作集W(t, Δ) = 该进程在过去的Δ个虚拟时间单位中访问到的页面的集合\n\n工作集算法就是找出一个不在工作集中的页面并置换它。具体过程为：扫描所有页表项，如果一个页面的R位是1，则将该页面的最后一次访问时间设为当前时间，将R位清零；如果一个页面的R位是0，则检查该页面的访问 时间是否在“当前时间-T”之前，如果是，则该页面为被置换的页面；如果不是，记录当前所有被扫描过页面的最后访问时间里面的最小值，扫描下一个页面并重复上述过程。\n\n\n# 参考资料\n\n- Tanenbaum A S, Bos H. Modern operating systems[M]. Prentice Hall Press, 2014.\n- [北京大学操作系统原理（Operating Systems）](https://www.coursera.org/learn/os-pku/home/welcome)\n- [计算机操作系统](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md#%E4%B8%80%E6%A6%82%E8%BF%B0)\n- [内存连续分配方式的几种算法及优劣](https://blog.csdn.net/qq_33774935/article/details/52717848)\n- [多级页表](http://www.geekqanda.com/index.php/59367/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%A4%9A%E7%BA%A7%E9%A1%B5%E8%A1%A8%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F?show=59380)","tags":["操作系统"],"categories":["操作系统"]},{"title":"操作系统原理-同步机制","url":"/2019/01/28/操作系统原理-同步机制/","content":"\n\n# 进程互斥\n\n由于各进程要求使用共享资源（变量、文件等），而这些资源需要排他性使用，各进程之间竞争使用这些资源，这一关系称为进程互斥。\n\n<!--more-->\n\n## 临界资源与临界区\n\n系统中某些资源一次只允许一个进程使用，称这样的资源为临界资源或互斥资源或共享变量。\n\n而各个进程中对某个临界资源（共享变量）实施操作的程序片段称为临界区或互斥区。\n\n## 临界区的使用原则\n\n- 没有进程在临界区时，想进入临界区的进程可进入\n- 不允许两个进程同时处于其临界区中 \n- 临界区外运行的进程不得阻塞其他进程进入临界区 \n- 不得使进程无限期等待进入临界区\n\n# 进程互斥的软件解决方案\n\n## 错误解法\n\n考虑两个进程p和q，pturn与qturn表示哪个进程要进入临界区，P进入临界区的条件为`pturn && not qturn`，而Q进入临界区的条件为`not pturn && qturn`:\n\n```cpp\n//进程p：\npturn = true;     \nwhile (qturn) ;          \nvisit();   \t//访问临界区\npturn = false;\n```\n\n```cpp\n//进程q：\nqturn = true;     \nwhile (pturn) ;          \nvisit();   \t//访问临界区\nqturn = false;\n```\n\n如果由于CPU调度使得两个进程都执行完了第一行语句，也就是pturn和qturn都为true了，那么就都会在下一行while语句上死循环，互相都在谦让对方执行，也就不满足了临界区的使用原则—不得使进程无限期等待进入临界区。\n\n## Dekker算法\n\nDekker互斥算法是由荷兰数学家Dekker提出的一种解决并发进程互斥与同步的软件实现方法。假设有p和q两个进程，变量pturn、qturn表示p和q进程是否想要资源（可以想象为举手示意想要），变量turn表示安排资源给谁：\n\n```cpp\n//进程P：\npturn = true; \t//进程p举手示意想要访问\nwhile (qturn) { \t//如果进程q也举手了\n     if (turn == 2) {   //资源被安排给了q\n\t     pturn = false;   //进程p把手放下\n\t     while (turn == 2);   //资源安排给q的时候一直等待\n\t     pturn = true;    //此时资源安排给了自己，进程p再举手\n\t }\n}\nvisit();\t//访问临界区\nturn = 2;   //进程p使用完了，安排资源给q\npturn = false;\t//进程p把手放下\n```\n```cpp\n//进程q：\nqturn = true; \nwhile (pturn) { \n     if (turn == 1) { \n\t     qturn = false; \n\t     while (turn == 1); \n\t     qturn = true; \n\t }\n}\nvisit();\t//访问临界区\nturn = 1;\nqturn = false;\n```\n\n如果两个进程都执行完了第一行语句，也就是pturn和qturn都为true了，那么会根据变量turn进一步查看究竟是把资源安排给了谁，如果安排给了另一个进程，那么自己就先把手放下，等待安排资源给自己。\n\n与之前的错误解法相比，可以发现Dekker算法就是在原本的while死循环上做了进一步的判断，引入的turn变量总是会安排一个进程访问临界区。\n\n## Peterson算法\n\nPeterson算法是另一种解决并发进程互斥与同步的软件实现方法，而且克服了强制轮流法的缺点。其使用十分方便，只需要向如下这样调用即可:\n\n```cpp\nenter_region(i);\nvisit();\t//访问临界区\nleave_region(i); \n```\n\n其中的`enter_region`方法实现如下：\n\n```cpp\n#define FALSE 0\n#define TRUE 1\n#define N 2 //进程的个数\nint turn;   //轮到谁\nint interested[N];   //兴趣数组，初始值均为FALSE\n \nvoid enter_region(int process) // process = 0 或 1\n{\n\tint other;     // 另外一个进程的进程号\n\tother = 1 - process;\n\tinterested[process] = TRUE;  // 表明本进程感兴趣\n\tturn = process;  // 设置标志位         \n\twhile(turn == process && interested[other] == TRUE); \n}\n```\n\n如果有两个进程都要执行的话，turn会被设置成后一个进程的进程号，这时候因为要按照先来后到的规矩，后一个进程在判断while条件的时候`turn == process`成立，也就进行循环等待，而先进入的进程可以访问临界区。当先进入的进程离开了临界区，就调用`leave_region`方法，将自己的兴趣设为FALSE，后一个进程判断`interested[other] == TRUE`不成立时就可以跳出while循环进入临界区了。\n\n```cpp\nvoid leave_region(int process){\n\tinterested[process] = FALSE;   // 本进程已离开临界区\n}\n```\n\n# 进程互斥的硬件解决方案\n\n## “测试并加锁”指令\n\n![TSL](http://blog.operatingsystem.nanwulife.com/SUD5DJE7$P%7D13XXZ2NJ%7D7DI.png)\n\n## \"交换\"指令\n\n![XCHG](http://blog.operatingsystem.nanwulife.com/O%25F0$$TNO5A9JYKN@JTYGL6.png)\n\n# 进程同步\n\n进程同步指系统中多个进程中发生的事件存在某种时序关系，需要相互合作，共同完成一项任务。\n具体地说，一个进程运行到某一点时， 要求另一伙伴进程为它提供消息，在未获得消息之前，该进程进入阻塞态，获得消息后被唤醒进入就绪态。\n\n# 信号量及PV操作\n\n信号量是一个特殊变量，用于进程间传递信息的一个整数值，定义如下：\n\n```cpp\nstruct semaphore\n{  \n\tint count;\n\tqueueType queue;\n} \n```\n\n可以对其执行down和up操作，也就是常见的P和V操作（PV操作均为原语操作），定义如下：\n\n```cpp\nP(semaphore s) \n{\n\ts.count--;\n\tif (s.count < 0)\n\t{\n\t\t//该进程状态置为阻塞状态；\n\t\t//将该进程插入相应的等待队列s.queue末尾;\n\t\t//重新调度；\n\t}\n}\n\nV(semaphore s) {   \n\ts.count++;   \n\tif (s.count <= 0)   \n\t{      \n\t\t//唤醒相应等待队列s.queue中等待的一个进程；      \n\t\t//改变其状态为就绪态，并将其插入就绪队列；    \n\t} \n} \n```\n\n## 用PV操作解决进程间互斥问题\n\n- 分析并发进程的关键活动，划定临界区\n- 设置信号量 mutex，初值为1\n- 在临界区前实施 P(mutex)\n- 在临界区之后实施 V(mutex)\n\n## 用信号量解决生产者-消费者问题\n\n问题描述：使用一个缓冲区来保存物品，只有缓冲区没有满，生产者才可以放入物品；只有缓冲区不为空，消费者才可以拿走物品。\n\n这里使用三个信号量，其中mutex用于解决互斥问题，empty和full用于解决同步问题。\n\n```cpp\n#define N 100\t//缓冲区个数\ntypedef int semaphore;\t//信号量是一种特殊的整型数据\nsemaphore mutex = 1;\t//互斥信号量：控制对临界区的访问\nsemaphore empty = N;\t//空缓冲区个数，初始为N\nsemaphore full = 0;\t\t//满缓冲区个数，初始为0\n\nvoid producer() {\n    while(TRUE) {\n        int item = produce_item();\n        p(&empty);\n        p(&mutex);\n        insert_item(item);\n        v(&mutex);\n        v(&full);\n    }\n}\n\nvoid consumer() {\n    while(TRUE) {\n        p(&full);\n        p(&mutex);\n        int item = remove_item();\n        v(&mutex);\n        v(&empty);\n        consume_item(item);\n    }\n}\n```\n\n注意：不能交换`p(&empty);`和`p(&mutex);`的顺序，否则会导致死锁。\n\n## 用信号量解决读者-写者问题\n\n问题描述：多个进程共享一个数据区，这些进程分为只读数据区中的数据的读者进程和只往数据区中写数据的写者进程。允许多个读者同时执行读操作，不允许多个写者同时操作，不允许读者、写者同时操作。\n\n```cpp\ntypedef int semaphore;\nsemaphore count_mutex = 1;\t//对count加锁\nsemaphore data_mutex = 1;\t//对读写的数据加锁\nint count = 0;\t//对数据进行读操作的进程数量\n\nvoid reader() {\n    while(TRUE) {\n        p(&count_mutex);\n        count = count + 1;\n        if(count == 1) p(&data_mutex); // 第一个读者需要对数据进行加锁，防止写进程访问\n        v(&count_mutex);\n        read();\n        p(&count_mutex);\n        count = count - 1;\n        if(count == 0) v(&data_mutex);\n        v(&count_mutex);\n    }\n}\n\nvoid writer() {\n    while(TRUE) {\n        p(&data_mutex);\n        write();\n        v(&data_mutex);\n    }\n}\n```\n\n# 管程\n\n由于信号量机制程序编写困难、易出错，所以在程序设计语言中引入管程。\n\n管程是一个抽象数据类型，由关于共享资源的数据结构及在其上操作的一组过程组成，进程只能通过调用管程中的过程来间接地访问管程中的数据结构。\n\n## 互斥/同步\n\n互斥：管程是互斥进入的，管程的互斥性是由编译器负责保证的。\n\n同步：管程中设置条件变量及等待/唤醒操作以解决同步问题，可以让一个进程或线程在条件变量上等待（此时，应先释放管程的使用权），也可以通过发送信号将等待在条件变量上的进程或线程唤醒。\n\n## Hoare管程\n\n因为管程是互斥进入的，所以当一个进程试图进入一个已被占用的管程时，应当在管程的入口处等待，为此，管程的入口处设置一个进程等待队列，称作入口等待队列。\n\n如果进程P唤醒进程Q，则P等待Q执行；如果进程Q执行中又唤醒进程R，则Q等待R执行；如此， 在管程内部可能会出现多个等待进程。在管程内需要设置一个进程等待队列，称为紧急等待队列，紧急等待队列的优先级高于入口等待队列的优先级。\n\n![Hoare管程](http://blog.operatingsystem.nanwulife.com/D%7DZK7%608%7BE%7BVQA_PGOH6%7B3R8.png)\n\n### 条件变量\n\n条件变量是在管程内部说明和使用的一种特殊类型的变量，对于条件变量，可以执行wait和signal操作：\n\n- wait(c)：如果紧急等待队列非空，则唤醒第一个等待者；否则释放管程的互斥权，执行此操作的进程进入c链末尾。\n- signal(c)：如果c链为空，则相当于空操作，执行此操作的进程继续执行；否则唤醒第一个等待者，执行此操作的进程进入紧急等待队列的末尾。\n\n### 用管程解决生产者-消费者问题\n\n```\n//管程\nmonitor ProducerConsumer     \n\tcondition full, empty;  //条件变量\n\tinteger count;      \n\t    \n\tprocedure insert (item: integer);     \n\tbegin         \n\t\tif count == N then wait(full);         \n\t\tinsert_item(item); count++;         \n\t\tif count ==1 then signal(empty);     \n\tend;          \n\t\n\tfunction remove: integer;     \n\tbegin         \n\t\tif count==0 then wait(empty);         \n\t\tremove = remove_item; count--;         \n\t\tif count==N-1 then signal(full);     \n\tend;          \n\tcount:=0; \nend monitor; \n\n//生产者\nprocedure producer; \nbegin     \n\twhile true do     \n\tbegin           \n\t\titem = produce_item;         \n\t\tProducerConsumer.insert(item);     \n\tend \nend; \n \n//消费者\nprocedure consumer; \nbegin     \n\twhile true do     \n\tbegin         \n\t\titem=ProducerConsumer.remove;         \n\t\tconsume_item(item);          \n\tend \nend; \n```\n\n## MESA管程\n\nHoare管程有个缺点就是会有两次额外的进程切换，因此MESA管程将原本的signal操作变为notify操作：当一个正在管程中的进程执行notify(x)时，它使得x条件队列得到通知，发信号的进程继续执行，而位于条件队列头的进程在将来合适的时候且当处理器可用时恢复执行。\n\n由于收到通知时并未执行，且对等待进程在notify之后何时运行没有任何限制，所以当进程真正被调度时，条件不一定成立，因而这个进程必须重新检查条件，也就是用while循环取代if语句。\n\n# IPC（进程间通信）\n\n进程间通信（IPC，InterProcess Communication）是指在不同进程之间传播或交换信息。\n\n进程通信是一种手段，而进程同步是一种目的。也可以说，为了能够达到进程同步的目的，需要让进程进行通信，传输一些进程同步所需要的信息。\n\n进程通信的方式通常有管道（包括无名管道和命名管道）、消息队列、信号量、共享存储、Socket、Streams等。其中 Socket和Streams支持不同主机上的两个进程IPC。\n\n## 管道\n\n管道，通常指无名管道，是 UNIX 系统IPC最古老的形式。\n\n管道是通过调用 pipe 函数创建的，当一个管道建立时，它会创建两个文件描述符：fd[0]为读而打开，fd[1]为写而打开，要关闭管道只需将这两个文件描述符关闭即可。\n\n![管道](http://blog.operatingsystem.nanwulife.com/53cd9ade-b0a6-4399-b4de-7f1fbd06cdfb.png)\n\n单个进程中的管道几乎没有任何用处。所以，通常调用 pipe 的进程接着调用 fork，这样就创建了父进程与子进程之间的 IPC 通道。若要数据流从父进程流向子进程，则关闭父进程的读端（fd[0]）与子进程的写端（fd[1]）；反之，则可以使数据流从子进程流向父进程。\n\n特点:\n- 它是半双工的（即数据只能在一个方向上流动），具有固定的读端和写端。\n- 它只能用于具有亲缘关系的进程之间的通信（也是父子进程或者兄弟进程之间）。\n\n## FIFO\n\nFIFO也称为命名管道，它是一种文件类型，可以在无关的进程之间交换数据，与无名管道不同。\n\nFIFO 常用于客户-服务器应用程序中，FIFO 用作汇聚点，在客户进程和服务器进程之间传递数据。\n\n![FIFO](http://blog.operatingsystem.nanwulife.com/2ac50b81-d92a-4401-b9ec-f2113ecc3076.png)\n\n## 消息队列\n\n消息队列，是消息的链接表，存放在内核中。一个消息队列由一个标识符（即队列ID）来标识。\n\n- 消息队列是面向记录的，其中的消息具有特定的格式以及特定的优先级。\n- 消息队列独立于发送与接收进程。进程终止时，消息队列及其内容并不会被删除。\n- 消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取。\n\n## 信号量\n\n信号量是一个计数器。信号量用于实现进程间的互斥与同步，而不是用于存储进程间通信数据。\n\n## 共享内存\n\n共享内存指两个或多个进程共享一个给定的存储区，因为数据不需要在进程之间复制，所以这是最快的一种 IPC。由于多个进程可以同时操作，所以信号量与共享内存通常结合在一起使用，信号量用来同步对共享内存的访问。\n\n## 套接字\n\n与其它通信机制不同的是，它可用于不同机器间的进程通信。\n\n\n\n# 参考资料\n\n- Tanenbaum A S, Bos H. Modern operating systems[M]. Prentice Hall Press, 2014.\n- [北京大学操作系统原理（Operating Systems）](https://www.coursera.org/learn/os-pku/home/welcome)\n- [计算机操作系统](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md#%E4%B8%80%E6%A6%82%E8%BF%B0)\n- [进程间的五种通信方式介绍](https://blog.csdn.net/wh_sjc/article/details/70283843)\n","tags":["操作系统","同步"],"categories":["操作系统"]},{"title":"操作系统原理-进程线程模型","url":"/2019/01/28/操作系统原理-进程线程模型/","content":"\n\n## 进程的定义\n\n进程是具有独立功能的程序关于某个数据集合上的一次运行活动，是系统进行资源分配和调度的独立单位。\n\n<!--more-->\n\n## 进程控制块PCB\n\nPCB：Process Control Block，又称进程描述符、进程属性，是操作系统用于管理控制进程的一个专门数据结构，是系统感知进程存在的唯一标志。\n\nPCB的内容包括：\n- 进程描述信息\n- 进程控制信息\n- 所拥有的资源和使用情况\n- CPU现场信息\n\n## 进程状态及状态转换\n\n### 进程的三种基本状态\n\n- 运行态（Running）：占有CPU，并在CPU上运行\n- 就绪态（Ready）：已经具备运行条件，但由于没有空闲CPU，而暂时不能运行\n- 等待态（Waiting/Blocked）：因等待某一事件而暂时不能运行（如等待读盘结果，又称为阻塞态、睡眠态）\n\n### 三状态模型及状态转换\n\n![三状态模型](http://blog.operatingsystem.nanwulife.com/1107494-20170420135629571-462537817.jpg)\n\n其中，只有就绪态和运行态可以相互转换，其它的都是单向转换。\n\n### 进程的其它状态\n\n- 创建：已完成创建一进程所必要的工作，但因为资源有限尚未同意执行该进程\n- 终止：终止执行后，进程进入该状态，回收资源\n- 挂起：用于调节负载，进程不占用内存空间，其进程映像交换到磁盘上\n\n### 进程的五状态模型\n\n![五状态模型](http://blog.operatingsystem.nanwulife.com/7c03bb1fh78d58c467517&690.jpg)\n\n## 进程队列\n\n操作系统为每一类进程建立一个或多个队列，队列元素为PCB，伴随进程状态的改变，其PCB从一个队列进入另一个队列。以下为五状态进程模型的队列模型：\n\n![进程队列](http://blog.operatingsystem.nanwulife.com/6%5D13%29OZ%601UJ0Y2JTDG7FG77.png)\n\n## 进程控制\n\n进程控制操作完成进程各状态之间的转换，由具有特定功能的原语完成：\n- 进程创建原语\n- 进程撤消原语\n- 阻塞原语\n- 唤醒原语\n- 挂起原语\n...\n\n原语：完成某种特定功能的一段程序，具有不可分割性或不可中断性，即原语的执行必须是连续的，在执行过程中不允许被中断\n\n### 进程的创建\n\n- 给新进程分配一个唯一标识以及进程控制块\n- 为进程分配地址空间\n- 初始化进程控制块\n- 设置相应的队列指针（如: 把新进程加到就绪队列链表中）\n\n### 进程的撤销\n\n- 收回进程所占有的资源（如：关闭打开的文件、断开网络连接、回收分配的内存）\n- 撤消该进程的PCB\n\n### 进程阻塞\n\n处于运行状态的进程，在其运行过程中期待某一事件发生，如等待键盘输入、等待磁盘数据传输完成、等待其它进程发送消息，当被等待的事件未发生时，由进程自己执行阻塞原语，使自己由运行态变为阻塞态。\n\n## 上下文切换\n\n将CPU硬件状态从一个进程换到另一个进程的过程称为上下文切换。\n\n进程运行时，其硬件状态保存在CPU上的寄存器中；进程不运行时，这些寄存器的值保存在进程控制块PCB中；当操作系统要运行一个新的进程时，将PCB中的相关值送到对应的寄存器中。\n\n## 线程的定义\n\n进程中的一个运行实体，是CPU的调度单位，有时将线程称为轻量级进程。\n\n线程共享所在进程的地址空间和其他资源。\n\n## 线程机制的实现\n\n### 用户级线程\n\n在用户空间建立线程库：提供一组管理线程的过程。运行时系统完成线程的管理工作，内核管理的还是进程，不知道线程的存在，线程切换不需要内核态特权。\n\n![用户级线程](http://blog.operatingsystem.nanwulife.com/8$BOTZ56@%25WE6%7B9%293_PA%5B65.png)\n\n优点：\n- 线程切换快\n- 调度算法是应用程序特定的\n- 用户级线程可运行在任何操作系统上（只需要实现线程库）\n\n缺点：\n- 大多数系统调用是阻塞的，因此，由于内核阻塞进程，故进程中所有线程也被阻塞\n\n### 核心级线程\n\n内核管理所有线程管理，并向应用程序提供API接口。内核维护进程和线程的上下文，且线程的切换需要内核支持。\n\n![核心级线程](http://blog.operatingsystem.nanwulife.com/AA%7D~%28L8IKG80E%25X%7B8%29%5BIN%7BJ.png)\n\n### 混合模型\n\n线程创建在用户空间完成，线程调度等在核心态完成。\n\n\n## 线程与进程的区别\n\n- 拥有资源：进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。\n- 调度：线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。\n- 系统开销：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。\n- 通信方面：线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC。\n\n## 参考资料\n- Tanenbaum A S, Bos H. Modern operating systems[M]. Prentice Hall Press, 2014.\n- [北京大学操作系统原理（Operating Systems）](https://www.coursera.org/learn/os-pku/home/welcome)\n- [计算机操作系统](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md#%E4%B8%80%E6%A6%82%E8%BF%B0)","tags":["操作系统 ","进程"],"categories":["操作系统"]},{"title":"操作系统原理-处理器调度","url":"/2019/01/28/操作系统原理—/","content":"\n\n# CPU调度\n\n即按一定的调度算法从就绪队列中选择一个进程， 把CPU的使用权交给被选中的进程，其任务是控制、协调进程对CPU的竞争。\n\n# 调度算法衡量指标\n\n吞吐量：每单位时间完成的进程数目\n\n周转时间：每个进程从提出请求到运行完成的时间\n\n响应时间：从提出请求到第一次回应的时间\n\n<!--more-->\n\n# 进程调度算法\n\n## 批处理系统\n\n目标：吞吐量，周转时间，cpu利用率，包含以下四种调度算法：\n* 先来先服务（FCFS）\n* 短作业优先（SJF）\n* 最短剩余时间优先（SRTN）\n* 最高响应比优先（HRRN）\n\n### 先来先服务（FCFS）\n\n- First Come First Serve\n- 按照进程就绪的先后顺序使用CPU \n- 非抢占 \n\n长进程后面的短进程需要等很长时间，不利于用户体验。\n\n### 短作业优先（SJF）\n\n*  Shortest Job First \n*  具有最短完成时间的进程优先执行 \n*  非抢占式  \n\n### 最短剩余时间优先（SRTN）\n* Shortest Remaining Time Next\n* SJF的抢占式版本，即当一个新就绪的进程比当前运行进程具有更短的完成时间时，系统抢占当前进程， 选择新就绪的进程执行 \n\n短作业优先的调度算法可以得到最短的平均周转时间，但随着源源不断的短任务到来，可能使长的任务长时间得不到运行，即产生 “饥饿”现象。\n\n### 最高响应比优先（HRRN）\n* Highest Response Ratio Next\n* 调度时，首先计算每个进程的响应比R；之后，总是选择R最高的进程执行 \n* 响应比R = 周转时间 / 处理时间 =（处理时间 + 等待时间）/  处理时间 = 1 +（等待时间 / 处理时间）  \n\n## 交互式系统\n\n目标：响应时间，包含以下三种调度算法：\n\n* 时间片轮转（RR）\n* 最高优先级（HPF）\n* 多级反馈队列（Multiple feedback queue）\n\n### 时间片轮转\n\n* Round Robin\n* 将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。\n\n时间片轮转算法中选择合适的时间片很重要：\n- 如果太长，会降级为先来先服务算法，延长短进程的响应时间\n- 如果太短，进程切换会浪费CPU时间\n\n### 最高优先级\n\n* Highest Priority First\n* 选择优先级最高的进程投入运行\n* 优先级可以是静态不变的，也可以是动态调整的\n* 不公平\n* 会导致优先级翻转问题，解决方案：1、优先级天花板；2、优先级继承\n\n优先级翻转是当一个高优先级任务通过信号量机制访问共享资源时，该信号量已被一低优先级任务占有，因此造成高优先级任务被许多具有较低优先级任务阻塞，实时性难以得到保证。\n\n例如：有优先级为A、B和C三个任务，优先级A>B>C，任务A，B处于挂起状态，等待某一事件发生，任务C正在运行，此时任务C开始使用某一共享资源S。在使用中，任务A等待事件到来，任务A转为就绪态，因为它比任务C优先级高，所以立即执行。当任务A要使用共享资源S时，由于其正在被任务C使用，因此任务A被挂起，任务C开始运行。如果此时任务B等待事件到来，则任务B转为就绪态。由于任务B优先级比任务C高，因此任务B开始运行，直到其运行完毕，任务C才开始运行。直到任务C释放共享资源S后，任务A才得以执行。在这种情况下，优先级发生了翻转，任务B先于任务A运行。\n\n解决优先级翻转问题有优先级天花板(priority ceiling)和优先级继承(priority inheritance)两种办法。\n\n优先级天花板是当任务申请某资源时， 把该任务的优先级提升到可访问这个资源的所有任务中的最高优先级， 这个优先级称为该资源的优先级天花板。这种方法简单易行， 不必进行复杂的判断， 不管任务是否阻塞了高优先级任务的运行， 只要任务访问共享资源都会提升任务的优先级。\n\n优先级继承是当任务A 申请共享资源S 时， 如果S正在被任务C 使用，通过比较任务C 与自身的优先级，如发现任务C 的优先级小于自身的优先级， 则将任务C的优先级提升到自身的优先级， 任务C 释放资源S 后，再恢复任务C 的原优先级。这种方法只在占有资源的低优先级任务阻塞了高优先级任务时才动态的改变任务的优先级，如果过程较复杂， 则需要进行判断。\n\n### 多级反馈队列\n\n设置多个就绪队列，第一级队列优先级最高，给不同就绪队列中的进程分配长度不同的时间片，第一级队列时间片最小；随着队列优先级别的降低，时间片增大。当第一级队列为空时，在第二级队列调度，以此类推。当一个新创建进程就绪后，进入第一级队列，进程用完时间片而放弃CPU，进入下一级就绪队列。由于阻塞而放弃CPU的进程进入相应的等待队列，一旦等待的事件发生，该进程回到原来一级就绪队列。\n\n![多级反馈队列](http://blog.operatingsystem.nanwulife.com/042cf928-3c8e-4815-ae9c-f2780202c68f.png)\n\n## 调度算法总结\n\n| 调度算法|占用CPU方式|吞吐量|响应时间|开销|对进程的影响|饥饿问题|\n|--|--|--|--|--|--|--|\n| FCFS|非抢占式|不强调|可能很慢，特别是当进程的执行时间差别很大时|最小 |对短进程不利；对I/O型的进程不利|无|\n| RR|抢占式(时间片用完时)|若时间片小，吞吐量会很低|为短进程提供好的响应时间|较大 |公平对待 |无|\n| SJF|非抢占式|高|为短进程提供好的响应时间|可能较大 |对长进程不利 |可能|\n| SRTN|抢占式(到达时)|高|提供好的响应时间|可能较大 |对长进程不利 |可能|\n| HRRN|非抢占式|高|提供好的响应时间|可能较大 |很好的平衡性 |无|\n| Feedback|抢占式(时间片用完时)|不强调|不强调|可能较大 |对I/O型进程有利 |可能|\n\n# 参考资料\n\n- Tanenbaum A S, Bos H. Modern operating systems[M]. Prentice Hall Press, 2014.\n- [北京大学操作系统原理（Operating Systems）](https://www.coursera.org/learn/os-pku/home/welcome)\n- [计算机操作系统](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md#%E4%B8%80%E6%A6%82%E8%BF%B0)\n- [优先级翻转](https://baike.baidu.com/item/%E4%BC%98%E5%85%88%E7%BA%A7%E7%BF%BB%E8%BD%AC/4945202)","tags":["操作系统"],"categories":["操作系统"]},{"title":"LinkedList源码分析","url":"/2018/09/11/LinkedList源码分析/","content":"## LinkedList简介（jdk1.8)\n\nLinkedList是基于双向链表实现的。如下为LinkedList的继承体系结构： \n\n```java\npublic class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable\n```\n\n可以看到，LinkedList实现了Deque接口，Deque表示双端队列，即在两端都可以进行插入和删除的队列。Deque是一个比Stack和Queue功能更强大的接口，它同时实现了栈和队列的功能。Deque接口的部分方法如下：  \n```java\n// *** Queue methods ***\n    boolean add(E e);\n    boolean offer(E e);\n    E remove();        \n    E poll();\n    E element();\n    E peek();\n    \n// *** Stack methods ***\n    void push(E e);\n    E pop();\n```\n从代码可以看出，Deque既可以用作后进先出的栈，也可以用作先进先出的队列。\n\n与ArrayList一样，LinkedList也不是线程安全的，因此只能在单线程环境下使用。\n\n<!--more-->\n\n## 属性\n\nLinkedList有size、first、last三个属性：\n\n```java\n//LinkedList中元素的数量\ntransient int size = 0;\n\n//指向第一个元素\ntransient Node<E> first;\n\n//指向最后一个元素\ntransient Node<E> last;\n```\n\n## Node\n\n既然LinkedList是基于链表实现的，那就必须要介绍一下它的内部类Node：\n```java\n    private static class Node<E> {\n        E item;\n        Node<E> next;\n        Node<E> prev;\n\n        Node(Node<E> prev, E element, Node<E> next) {\n            this.item = element;\n            this.next = next;\n            this.prev = prev;\n        }\n    }\n```\n因为是双向链表，所以每个节点都包含前一个节点的指向与后一个节点的指向。\n\n## 构造函数\n\n* 无参构造函数\n```java\n    public LinkedList() {\n    }\n```\n\n* 有参构造函数\n```java\n    public LinkedList(Collection<? extends E> c) {\n        this();\n        addAll(c);\n    }\n```\n此方法先调用一个无参构造函数构造一个空列表，然后再将集合内的所有元素添加进去。\n\n## addAll\n\n将集合内的所有元素加入到LinkedLiist中。\n\n```java\n    public boolean addAll(Collection<? extends E> c) {\n        return addAll(size, c);\n    }\n```\n\n```java\n    public boolean addAll(int index, Collection<? extends E> c) {\n\t\t//判断是否满足index >= 0 && index <= size，若不满足，则抛出异常\n        checkPositionIndex(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        if (numNew == 0)\n            return false;\n\n        Node<E> pred, succ;\n        if (index == size) {\n            succ = null;\n            pred = last;\n        } else {\n            succ = node(index);\n            pred = succ.prev;\n        }\n\n        for (Object o : a) {\n            @SuppressWarnings(\"unchecked\") E e = (E) o;\n            Node<E> newNode = new Node<>(pred, e, null);\n            if (pred == null)\n                first = newNode;\n            else\n                pred.next = newNode;\n            pred = newNode;\n        }\n\n        if (succ == null) {\n            last = pred;\n        } else {\n            pred.next = succ;\n            succ.prev = pred;\n        }\n\n        size += numNew;\n        modCount++;\n        return true;\n    }\n```\n此段代码中，succ表示后节点，pred表示前节点。\n\n在进行了下标检查与长度检查后，首先判断要加入的元素是加入在末尾还是中间，如果在末尾，则succ应指向null，而pred应指向last，否则，succ应指向下标为index的节点，而pred指向该节点的前一个节点。这样，要插入的节点的前后节点就都有了，接下来就可以将要插入的节点的前后节点都连接好，从而完成插入操作。\n\n这里有必要介绍一下取出指定位置的节点的方法：\n```java\n    Node<E> node(int index) {\n        // assert isElementIndex(index);\n\n        if (index < (size >> 1)) {\n            Node<E> x = first;\n            for (int i = 0; i < index; i++)\n                x = x.next;\n            return x;\n        } else {\n            Node<E> x = last;\n            for (int i = size - 1; i > index; i--)\n                x = x.prev;\n            return x;\n        }\n    }\n```\n与数组不同，链表无法直接通过下标找到指定的元素，而需要依次遍历。由于LinkedList是通过双向链表实现的，所以既可以从头也可以从尾开始遍历。为了提高效率，该方法先判断指定的位置index在链表的前半段还是后半段，从而决定从头还是从尾开始遍历。\n\n## linkFirst，linkLast，linkBefore\n\n在介绍add方法与其它相关方法前，有必要先介绍一下这三个辅助方法：\n```java\n    private void linkFirst(E e) {\n        final Node<E> f = first;\n        final Node<E> newNode = new Node<>(null, e, f);\n        first = newNode;\n        if (f == null)\n            last = newNode;\n        else\n            f.prev = newNode;\n        size++;\n        modCount++;\n    }\n\n    void linkLast(E e) {\n        final Node<E> l = last;\n        final Node<E> newNode = new Node<>(l, e, null);\n        last = newNode;\n        if (l == null)\n            first = newNode;\n        else\n            l.next = newNode;\n        size++;\n        modCount++;\n    }\n\n    void linkBefore(E e, Node<E> succ) {\n        // assert succ != null;\n        final Node<E> pred = succ.prev;\n        final Node<E> newNode = new Node<>(pred, e, succ);\n        succ.prev = newNode;\n        if (pred == null)\n            first = newNode;\n        else\n            pred.next = newNode;\n        size++;\n        modCount++;\n    }\n```\n\nlinkFirst、linkLast、linkBefore方法分别将元素加入到链表头部、链表尾部与链表中指定节点之前。\n\n以linkFirst为例，先创建一个新的节点，并将first指向该节点。然后判断以前的first节点是否为null，如果为null，则说明之前链表中没有元素，应将last指向新节点，否则，将原first节点的prev指向新节点。\n\n## add，addFirst，addLast\n\n介绍完上面三个辅助方法后，我们再来看看add相关的方法。\n\n```java\n    public boolean add(E e) {\n        linkLast(e);\n        return true;\n    }\n\n    public void add(int index, E element) {\n        checkPositionIndex(index);\n\n        if (index == size)\n            linkLast(element);\n        else\n            linkBefore(element, node(index));\n    }\n\n    public void addFirst(E e) {\n        linkFirst(e);\n    }\n\n    public void addLast(E e) {\n        linkLast(e);\n    }\n```\n\n由源码可以看到，add相关的代码都是直接调用上面介绍的辅助方法，十分简单。\n\n## unlink，unlinkFirst，unlinkLast\n\n同样，在介绍remove及相关方法时，先介绍这三个辅助方法：\n\n```java\n    E unlink(Node<E> x) {\n        // assert x != null;\n        final E element = x.item;\n        final Node<E> next = x.next;\n        final Node<E> prev = x.prev;\n\n        if (prev == null) {\n            first = next;\n        } else {\n            prev.next = next;\n            x.prev = null;\n        }\n\n        if (next == null) {\n            last = prev;\n        } else {\n            next.prev = prev;\n            x.next = null;\n        }\n\n        x.item = null;\n        size--;\n        modCount++;\n        return element;\n    }\n\n    private E unlinkFirst(Node<E> f) {\n        // assert f == first && f != null;\n        final E element = f.item;\n        final Node<E> next = f.next;\n        f.item = null;\n        f.next = null; // help GC\n        first = next;\n        if (next == null)\n            last = null;\n        else\n            next.prev = null;\n        size--;\n        modCount++;\n        return element;\n    }\n\n    private E unlinkLast(Node<E> l) {\n        // assert l == last && l != null;\n        final E element = l.item;\n        final Node<E> prev = l.prev;\n        l.item = null;\n        l.prev = null; // help GC\n        last = prev;\n        if (prev == null)\n            first = null;\n        else\n            prev.next = null;\n        size--;\n        modCount++;\n        return element;\n    }\n```\n\n这三个方法也很好理解。以unlink方法为例，将要删除的元素的前后节点相连接，并且把要删除的节点的属性设为null以帮助垃圾回收机制回收，从而达到移除该节点的目的。最后，将要删除的节点的值返回。\n\n## remove，removeFirst，removeLast\n\n接下来介绍移除链表中元素的几个方法。\n\n```java\n    public E remove() {\n        return removeFirst();\n    }\n\n    public E remove(int index) {\n        checkElementIndex(index);\n        return unlink(node(index));\n    }\n\n    public boolean remove(Object o) {\n        if (o == null) {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (x.item == null) {\n                    unlink(x);\n                    return true;\n                }\n            }\n        } else {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (o.equals(x.item)) {\n                    unlink(x);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n```\n\n前两个方法比较简单，而对于remove(Object o)方法，要先判断对象是否为null，如果为null，则遍历链表找到值为null的节点，并调用unlink方法移除该节点，否则，同样遍历链表并用equals方法根据内容进行等值比较，如果找到值相等的节点，调用unlink方法将其移除。\n\n```java\n    public E removeFirst() {\n        final Node<E> f = first;\n        if (f == null)\n            throw new NoSuchElementException();\n        return unlinkFirst(f);\n    }\n    \n        public E removeLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return unlinkLast(l);\n    }\n```\n\n这两个方法先判断链表中是否有元素，如果没有，则抛出异常，否则就调用辅助方法将其移除。\n\n## get，getFirst，getLast\n```java\n    public E get(int index) {\n        checkElementIndex(index);\n        return node(index).item;\n    }\n\n    public E getFirst() {\n        final Node<E> f = first;\n        if (f == null)\n            throw new NoSuchElementException();\n        return f.item;\n    }\n\n    public E getLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return l.item;\n    }\n```\nget(int index)方法在进行了下标检查后，直接通过node方法找到该节点并返回节点的值。而getFirst和getLast先判断first和last是否为null，如果不为null则返回节点的值，否则抛出异常。\n\n## set\n\nset方法将替换链表中指定位置的节点的值。\n\n```java\n    public E set(int index, E element) {\n        checkElementIndex(index);\n        Node<E> x = node(index);\n        E oldVal = x.item;\n        x.item = element;\n        return oldVal;\n    }\n```\n\n该方法先判断index是否合法，然后获取到该下标的节点，并将该节点的值重新设置即可。\n\n## linkedList总结\n* linkedList是通过双向链表实现的，因此删除效率很高，而查找效率很低，且不存在扩容问题。\n* linkedList实现了Deque接口，因此既可以当作栈，也可以当作队列。\n* 与ArrayList一样，linkedList也是非线程安全的，只能在单线程环境下使用。","tags":["JDK","LinkedList"],"categories":["JDK"]},{"title":"ArrayList源码分析","url":"/2018/09/06/ArrayList源码分析/","content":"\n## ArrayList简介（jdk1.8）\n\nArrayList就是动态数组，其容量能够自动增长。如下为ArrayList的继承体系结构：\n\n```java\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n```\n\nArrayList实现了List<E>, RandomAccess, Cloneable, java.io.Serializable接口，且不是线程安全的，因此只能用在单线程环境下。\n\n<!--more-->\n\n## 属性\n\nArrayList主要有elementData和size两个属性：\n```java\ntransient Object[] elementData; \nprivate int size;\n```\nelementData数组是用来存储元素的，而size表示ArrayList中已有的元素数量（不等于elementData.length）。\n\n## 构造方法\n\nArrayList共有三种构造方法：\n\n* 指定容量的构造函数\n\n```java\n    public ArrayList(int initialCapacity) {\n        if (initialCapacity > 0) {\n            this.elementData = new Object[initialCapacity];\n        } else if (initialCapacity == 0) {\n            this.elementData = EMPTY_ELEMENTDATA;\n        } else {\n            throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCapacity);\n        }\n    }\n```\n\n此方法接受一个初始化容量来初始化底层数组elementData，如果初始化容量值为0则将其初始化为一个空的常量数组：`private static final Object[] EMPTY_ELEMENTDATA = {};` ，如果值小于零，则抛出异常。\n\n* 无参构造函数\n\n```java\n\tprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n    public ArrayList() {\n        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n```\n\n此方法中的**DEFAULTCAPACITY_EMPTY_ELEMENTDATA**区别于**EMPTY_ELEMENTDATA**，通过将数组设为前者，在添加元素的时候会将容量设置为默认值10。\n\n* Collection作为参数的构造函数\n\n```java\n    public ArrayList(Collection<? extends E> c) {\n        elementData = c.toArray();\n        if ((size = elementData.length) != 0) {\n            // c.toArray might (incorrectly) not return Object[] (see 6260652)\n            if (elementData.getClass() != Object[].class)\n                elementData = Arrays.copyOf(elementData, size, Object[].class);\n        } else {\n            // replace with empty array.\n            this.elementData = EMPTY_ELEMENTDATA;\n        }\n    }\n```\n\n此方法接受一个Collection，并且将其转换为数组赋给elementData，如果被赋值后的elementData长度为0，则将空的常量数组赋值给它。相反，则再判断Collection是否转化为了Object数组，如果没有则将其进行转化。\n\n这里用到了Arrays.copyof()方法：\n```java\n    public static <T,U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {\n        @SuppressWarnings(\"unchecked\")\n        T[] copy = ((Object)newType == (Object)Object[].class)\n            ? (T[]) new Object[newLength]\n            : (T[]) Array.newInstance(newType.getComponentType(), newLength);\n        System.arraycopy(original, 0, copy, 0,\n                         Math.min(original.length, newLength));\n        return copy;\n    }\n```\n\n可以看出，该方法构造了一个新的长度为newLength的Object类型数组，并且将原数组复制到新的数组中 。而此处的复制用了System.arraycopy()方法，该方法被标记了native，调用了系统的C/C++代码，可以在openJDK中查看到源码。\n\n## get\n\n```java\n    public E get(int index) {\n        rangeCheck(index);\n\n        return elementData(index);\n    }\n    \n    E elementData(int index) {\n        return (E) elementData[index];\n    }\n```\n\n此方法可以得到指定下标的元素，先对下标进行越界检查，然后再通过一个间接方法获取到elementData的index下标的元素。\n\n## set\n\n```java\n    public E set(int index, E element) {\n        rangeCheck(index);\n\n        E oldValue = elementData(index);\n        elementData[index] = element;\n        return oldValue;\n    }\n```\n\n此方法用于设置指定下标的元素，并将该下标原有的元素返回。\n\n## add\n\nadd方法比较复杂，也是ArrayList核心所在，有下面两种形式：\n\n* 将元素加入到列表末尾\n\n```java\n    public boolean add(E e) {\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        elementData[size++] = e;\n        return true;\n    }\n```\n```java\n    private void ensureCapacityInternal(int minCapacity) {\n        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n    }\n    \n    private static int calculateCapacity(Object[] elementData, int minCapacity) {\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n            return Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n        return minCapacity;\n    }\n```\n 此处的calculateCapacity正是与上文DEFAULTCAPACITY_EMPTY_ELEMENTDATA常量相照应的方法。如果ArrayList是默认构造函数构造的话，在添加元素的时候此方法将返回DEFAULT_CAPACITY也就是10。而size已经大于10的情况，该方法便也失去了意义。\n```java\n    \n    private void ensureExplicitCapacity(int minCapacity) {\n        modCount++;\n\n        // overflow-conscious code\n        if (minCapacity - elementData.length > 0)\n            grow(minCapacity);\n    }\n\n    private void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n    }\n\n    private static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n            Integer.MAX_VALUE :\n            MAX_ARRAY_SIZE;\n    }\n```\n\n从源码可以看出，当需要的容量大于elementData数组的长度时，就需要对其进行扩张。而扩张的大小则根据if条件判断。**一般情况下，会将长度扩张为原来的1.5倍**，但是当1.5倍仍小于所需的容量时，会将长度直接设为所需容量。而新容量如果大于最大数组长度MAX_ARRAY_SIZE ，则根据所需容量分配Integer.MAX_VALUE或者MAX_ARRAY_SIZE。\n\nensureExplicitCapacity方法的第一行语句`modCount++;`的作用是记录修改次数。我们知道，ArrayList不是线程安全的，因此在迭代ArrayList的时候如果有其它线程修改了内容，那么就会导致modCount与迭代器初始化时的modCount不同，从而抛出异常ConcurrentModificationException。说白了，就是**防止一个线程正在迭代遍历，另一个线程修改了这个列表的结构。**\n\n* 将元素添加到指定位置上\n\n```java\n    public void add(int index, E element) {\n        rangeCheckForAdd(index);\n\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        System.arraycopy(elementData, index, elementData, index + 1,\n                         size - index);\n        elementData[index] = element;\n        size++;\n    }\n```\n\n在此方法中，先对index进行越界检查，然后再进行扩容。这里用了System.arraycopy方法，j将包括index在内的之后的所有元素均向右移动一位，再将要添加的元素放置在elementData的index下标下。\n\n\n## addAll\n\n* 将集合中的元素全部添加到ArrayList末尾\n\n```java\n    public boolean addAll(Collection<? extends E> c) {\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n        System.arraycopy(a, 0, elementData, size, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n```\n将Collection对象转化为Object数组后，先根据其长度进行扩容，再同样利用System.arraycopy函数把数组中的所有元素添加到elementData数组末尾。\n\n* 将集合中的元素全部添加到ArrayList指定位置\n\n```java\n    public boolean addAll(int index, Collection<? extends E> c) {\n        rangeCheckForAdd(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n\n        int numMoved = size - index;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index, elementData, index + numNew,\n                             numMoved);\n\n        System.arraycopy(a, 0, elementData, index, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n```\n\n原理与`add(int index, E element)`类似，都是通过将已有元素右移实现，此处将不再阐述。\n\n## remove\n\n* 移除指定下标上的元素\n\n```java\n    public E remove(int index) {\n        rangeCheck(index);\n\n        modCount++;\n        E oldValue = elementData(index);\n\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                             numMoved);\n        elementData[--size] = null; // clear to let GC do its work\n\n        return oldValue;\n    }\n```\n\n在这里，移除操作是将要移除的元素后面的所有元素均向左移动一位，并将size数减小实现的。此方法将返回要移除的元素。\n\n* 移除指定的元素\n\n```java\n    public boolean remove(Object o) {\n        if (o == null) {\n            for (int index = 0; index < size; index++)\n                if (elementData[index] == null) {\n                    fastRemove(index);\n                    return true;\n                }\n        } else {\n            for (int index = 0; index < size; index++)\n                if (o.equals(elementData[index])) {\n                    fastRemove(index);\n                    return true;\n                }\n        }\n        return false;\n    }\n\n    private void fastRemove(int index) {\n        modCount++;\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                             numMoved);\n        elementData[--size] = null; // clear to let GC do its work\n    }\n```\n先找到指定元素的下标，再根据下标进行移除。指定的元素有可能为null，而不为null的情况下将根据元素内容进行比较，因此将分为两种情况遍历数组。fastRemove的实现与remove(int index)基本一致，区别在于fastRemove不需要对下标进行检查，也不返回被移除的元素。\n\n## indexOf\n\n```java\n    public int indexOf(Object o) {\n        if (o == null) {\n            for (int i = 0; i < size; i++)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = 0; i < size; i++)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n\n    public int lastIndexOf(Object o) {\n        if (o == null) {\n            for (int i = size-1; i >= 0; i--)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = size-1; i >= 0; i--)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n\n    public boolean contains(Object o) {\n        return indexOf(o) >= 0;\n    }\n```\n由源码可以看出，indexOf和lastIndexOf与`remove(Object o)`方法类似，并且找到元素时返回下标，没找到时返回-1，而contains方法正是通过indexOf判断是否找到元素实现的。\n\n## ArrayList总结\n\n* ArrayList底层是通过数组实现的，随机访问速度快，但插入和移除由于要移动大量的元素，所以性能较差。\n* ArrayList不是线程安全的，在多线程环境下，通过modCount域检测是否出现问题。\n* ArrayList每次扩容为原本的1.5倍，若依然不够，则会直接设置为所需容量大小。\n\n\n\n\n\n\n\n\n\n\n\n","tags":["JDK","ArrayList"],"categories":["JDK"]},{"title":"浅谈对尾递归的理解","url":"/2018/08/22/浅谈对尾递归的理解/","content":"\n今天在做《剑指Offer》第十题时，发现了一个用尾递归的解法，由于之前对于尾递归并没有太多了解，于是查阅了一些资料，在此对其进行一个简单的总结。关于其它题目的题解与笔记，感兴趣的朋友可以到我的Github或个人博客上看看：[剑指Offer笔记](https://github.com/cenjieHo/CodingInterviews/blob/master/README.md)  [Cenjie's Blog](http://hecenjie.cn/) ，\n\n以下是正文。\n\n<!--more-->\n\n### 递归本质\n\n递归的本质是自己调用自己，因为是嵌套调用，所以**栈帧无法回收**，在递归调用的层级太多时，往往会引发调用栈溢出，也就是**内存溢出**。\n\n### 尾递归概述\n\n尾递归本质与递归并无区别，只不过是递归的一种特殊写法。尾递归要求递归调用是整个函数体中最后执行的语句且它的返回值不属于表达式的一部分，例如 `return 3f(n)`或者`return f(n)+f(n-1)` 都是不允许的。\n\n由于尾递归也是一种递归，因此**这种写法本身并不会有任何的优化效果，内存依旧会溢出**，只不过一些编译器中会加入对尾递归的优化机制，在编译代码时自动根据尾递归的特性对其进行优化。\n\n### 如何优化尾递归\n\n因为在递归调用自身的时候，这一层函数已经没有要做的事情了，虽然被递归调用的函数是在当前的函数里，但是他们之间的关系已经在传参的时候了断了，也就是这一层函数的所有变量什么的都不会再被用到了，所以当前函数虽然没有执行完，不能弹出栈，但它确实已经可以出栈了，这是一方面。\n\n另一方面，正因为调用的是自身，所以需要的存储空间是一模一样的，那干脆重新刷新这些空间给下一层利用就好了，不用销毁再另开空间。\n\n因此，为尾递归进行优化主要分两个步骤：\n1、写成尾递归的形式。\n2、编译器遇到此形式时自动为其优化。\n\n而在[第十题：斐波那契数列](https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3?tpId=13&tqId=11160&tPage=1&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)中，由于Java没有对尾递归进行优化，因此与使用普通递归并无太大区别，依然会产生内存溢出的问题。\n\n本文参考：https://www.cnblogs.com/bellkosmos/p/5280619.html\n\n\n","tags":["算法"],"categories":["算法"]},{"title":"README文档的规范写法总结","url":"/2018/06/25/README文档的规范写法总结/","content":"俗话说的好：“一个好开源项目一定有一个好的 README”。\n\n要想自己放到github上的项目能吸引更多人的眼球，就必须写一个规范舒适的README.md，这么做不仅可以梳理自己对于项目的思路，也方便他人上手使用或学习。因此，此文根据Github上众多项目以及查阅相关资料对README做了一个小小的总结， 方便以后写README的时候可以直接套用该模板。\n<!--more-->\n\n---\n\n\n## XXX系统（如果有Logo可以加上Logo）\n\nxxx系统是一个..系统，支持...，...（此处为简要描述）\n\n[官方网站](http://example.com) | [文档手册](http://example.com) | [别的东西](http://example.com) \n\n目前，此系统包含有以下功能：\n* 功能1\n* 功能2\n* 功能3\n\n### 准备\n* 依赖1\n* 依赖2\n* 依赖3\n\n### 搭建环境\nIntelliJ IDEA + MySQL 或者 eclipse + MySQL，...\n\n### 快速开始\n* 步骤1\n* 步骤2\n* 步骤3\n\n### 相关截图\n截图1\n截图2\n\n### To Do List\n* 功能1\n* 功能2\n* 功能3\n\n### CHANGE LOG\n此处填写版本更新记录\n\n\n---\n\n至此，我们可以看到一个相对规范的README.md模板，在开源项目时可以直接套用该模板，而不必每次都采用不同的零零散散的格式去书写README。Markdown代码在下方给出，当然，大家也可以根据项目具体情况进行修改而使用。\n\n```\n## XXX系统（如果有Logo可以加上Logo）\nxxx系统是一个..系统，支持...，...（此处为简要描述）\n\n[官方网站](http://example.com) | [文档手册](http://example.com) | [别的东西](http://example.com) \n\n目前，此系统包含有以下功能：\n* 功能1\n* 功能2\n* 功能3\n\n### 准备\n* 依赖1\n* 依赖2\n* 依赖3\n\n### 搭建环境\nIntelliJ IDEA + MySQL 或者 eclipse + MySQL，...\n\n### 快速开始\n* 步骤1\n* 步骤2\n* 步骤3\n\n### 相关截图\n截图1\n截图2\n\n### To Do List\n* 功能1\n* 功能2\n* 功能3\n\n### CHANGE LOG\n此处填写版本更新记录\n\n\n```\n\n## Contact\nIf you have some questions after you see this article, you can just find some info by clicking these links.\n\n* [Cenjie's CSDN](https://blog.csdn.net/qq_38283262)\n* [Cenjie's Github](https://github.com/cenjieHo)\n* [Cenjie's Gmail](mailto:cenjie.ho@gmail.com)\n* [Cenjie's Weibo](https://weibo.com/5777495883/profile?topnav=1&wvr=6)","tags":["README","markdown","Github"],"categories":["Github"]},{"title":"Welcome To My Blog","url":"/2018/06/22/Welcome-To-My-Blog/","content":"## 写在前面的话\n大家好！我是就读于南京某高校的一名大二学生，在昨天搭建了这个个人博客网站用于记录自己在学习以及项目过程中的技术积累，希望通过这个平台能与大家分享自己的经验与教训，同时也欢迎大家随时可以联系我，期待与大家共同进步。\n\n<!--more-->\n\n## 关于我\n我在学校的专业是*电子信息科学与技术*，曾利用课余时间学习过C、C++、Python等多门语言(仅限于皮毛)，经过两年的不断试错，终于在大二下学期确定了自己以后的发展方向—Java后台研发工程师。于是从基础语法到各大框架，这半年里接触到了许多新技术，看似学了许多东西却仍浮于水面终无所获，逐渐了解到自己要走的路还很长，而自己目前对于基础方面知识也尤为欠缺。因此需记住，沉下心，耐下性子，Coding the World。\n\n\n## 铭记\nWork hard in silence, let success make the noise.\n\n## Contact\nIf you have some questions after you see this article, you can just find some info by clicking these links.\n\n* [Cenjie's CSDN](https://blog.csdn.net/qq_38283262)\n* [Cenjie's Github](https://github.com/cenjieHo)\n* [Cenjie's Gmail](mailto:cenjie.ho@gmail.com)","tags":["hello","杂谈"],"categories":["杂谈"]}]